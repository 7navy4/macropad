
macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800936c  0800936c  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800936c  0800936c  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800936c  0800936c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08009374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  20000198  0800950c  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  0800950c  00020e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f627  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d85  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  00033ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125be  00000000  00000000  0004dc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000871fb  00000000  00000000  00060222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e741d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000e7470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	0800857c 	.word	0x0800857c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	0800857c 	.word	0x0800857c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd44 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f848 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8cc 	bl	80002f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 fe28 	bl	8007db0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if (ssd1306_Init(&hi2c1) != 0) {
 8000164:	481b      	ldr	r0, [pc, #108]	; (80001d4 <main+0x88>)
 8000166:	f000 fa97 	bl	8000698 <ssd1306_Init>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <main+0x28>
    Error_Handler();
 8000170:	f000 f8e2 	bl	8000338 <Error_Handler>
  }
  HAL_Delay(1000);
 8000174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000178:	f000 fd92 	bl	8000ca0 <HAL_Delay>

  ssd1306_Fill(Black);
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fbab 	bl	80008d8 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000182:	4814      	ldr	r0, [pc, #80]	; (80001d4 <main+0x88>)
 8000184:	f000 fbca 	bl	800091c <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018c:	f000 fd88 	bl	8000ca0 <HAL_Delay>

  // Write data to local screenbuffer
  ssd1306_SetCursor(0, 0);
 8000190:	2100      	movs	r1, #0
 8000192:	2000      	movs	r0, #0
 8000194:	f000 fd08 	bl	8000ba8 <ssd1306_SetCursor>
  ssd1306_WriteString("12345678912345", Font_11x18, White);
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <main+0x8c>)
 800019a:	2301      	movs	r3, #1
 800019c:	ca06      	ldmia	r2, {r1, r2}
 800019e:	480f      	ldr	r0, [pc, #60]	; (80001dc <main+0x90>)
 80001a0:	f000 fcdc 	bl	8000b5c <ssd1306_WriteString>

  ssd1306_UpdateScreen(&hi2c1);
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <main+0x88>)
 80001a6:	f000 fbb9 	bl	800091c <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 36);
 80001aa:	2124      	movs	r1, #36	; 0x24
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fcfb 	bl	8000ba8 <ssd1306_SetCursor>
  ssd1306_WriteString("4ilo", Font_11x18, White);
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <main+0x8c>)
 80001b4:	2301      	movs	r3, #1
 80001b6:	ca06      	ldmia	r2, {r1, r2}
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x94>)
 80001ba:	f000 fccf 	bl	8000b5c <ssd1306_WriteString>

  ssd1306_UpdateScreen(&hi2c1);
 80001be:	4805      	ldr	r0, [pc, #20]	; (80001d4 <main+0x88>)
 80001c0:	f000 fbac 	bl	800091c <ssd1306_UpdateScreen>
	  ResetColumn(2);
	  ResetColumn(3);
*/


	 scanNumberTest=scan();
 80001c4:	f000 fa12 	bl	80005ec <scan>
 80001c8:	4603      	mov	r3, r0
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <main+0x98>)
 80001ce:	701a      	strb	r2, [r3, #0]
 80001d0:	e7f8      	b.n	80001c4 <main+0x78>
 80001d2:	bf00      	nop
 80001d4:	200001b8 	.word	0x200001b8
 80001d8:	20000004 	.word	0x20000004
 80001dc:	08008594 	.word	0x08008594
 80001e0:	080085a4 	.word	0x080085a4
 80001e4:	200001b4 	.word	0x200001b4

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	; 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f008 f9b8 	bl	800856c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000228:	2300      	movs	r3, #0
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800022c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f91e 	bl	8003478 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000242:	f000 f879 	bl	8000338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fb8a 	bl	800397c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800026e:	f000 f863 	bl	8000338 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000272:	2310      	movs	r3, #16
 8000274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800027a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fd00 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800028a:	f000 f855 	bl	8000338 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	; 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_I2C1_Init+0x50>)
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <MX_I2C1_Init+0x54>)
 80002a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <MX_I2C1_Init+0x58>)
 80002a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002d6:	f000 ffc9 	bl	800126c <HAL_I2C_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f82a 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200001b8 	.word	0x200001b8
 80002ec:	40005400 	.word	0x40005400
 80002f0:	000186a0 	.word	0x000186a0

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_GPIO_Init+0x40>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <MX_GPIO_Init+0x40>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_GPIO_Init+0x40>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <MX_GPIO_Init+0x40>)
 8000318:	f043 0308 	orr.w	r3, r3, #8
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0308 	and.w	r3, r3, #8
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	683b      	ldr	r3, [r7, #0]

}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	e7fe      	b.n	8000340 <Error_Handler+0x8>
	...

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_MspInit+0x5c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <HAL_MspInit+0x5c>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <HAL_MspInit+0x60>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_MspInit+0x60>)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <HAL_I2C_MspInit+0x90>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d132      	bne.n	800042e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <HAL_I2C_MspInit+0x94>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <HAL_I2C_MspInit+0x94>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <HAL_I2C_MspInit+0x94>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e6:	2312      	movs	r3, #18
 80003e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ea:	2303      	movs	r3, #3
 80003ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4812      	ldr	r0, [pc, #72]	; (8000440 <HAL_I2C_MspInit+0x98>)
 80003f6:	f000 fd85 	bl	8000f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_I2C_MspInit+0x9c>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000402:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
 8000410:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <HAL_I2C_MspInit+0x9c>)
 8000412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000414:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_I2C_MspInit+0x94>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <HAL_I2C_MspInit+0x94>)
 800041c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <HAL_I2C_MspInit+0x94>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800042e:	bf00      	nop
 8000430:	3728      	adds	r7, #40	; 0x28
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40005400 	.word	0x40005400
 800043c:	40021000 	.word	0x40021000
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40010000 	.word	0x40010000

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800044c:	e7fe      	b.n	800044c <NMI_Handler+0x4>

0800044e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <HardFault_Handler+0x4>

08000454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <MemManage_Handler+0x4>

0800045a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <BusFault_Handler+0x4>

08000460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <UsageFault_Handler+0x4>

08000466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048e:	f000 fbeb 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800049e:	f001 fc70 	bl	8001d82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000b00 	.word	0x20000b00

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004de:	f7ff ffe5 	bl	80004ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f008 f81f 	bl	8008524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fe31 	bl	800014c <main>
  bx lr
 80004ea:	4770      	bx	lr
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 80004f4:	08009374 	.word	0x08009374
  ldr r2, =_sbss
 80004f8:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80004fc:	20000e00 	.word	0x20000e00

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <rowread>:
static uint16_t rowPin[RowNumber]={PinRow1,PinRow2,PinRow3};
static uint16_t columnPin[ColumnNumber]={PinColumn1,PinColumn2,PinColumn3,PinColumn4};
static GPIO_TypeDef *rowPort[RowNumber]={PortRow1,PortRow2,PortRow1};
static GPIO_TypeDef *columnPort[ColumnNumber]={PortColumn1,PortColumn2,PortColumn3,PortColumn4};

GPIO_PinState rowread(uint8_t rowNumber){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(rowPort[rowNumber],rowPin[rowNumber]);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <rowread+0x2c>)
 8000512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <rowread+0x30>)
 800051a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800051e:	4619      	mov	r1, r3
 8000520:	4610      	mov	r0, r2
 8000522:	f000 fe73 	bl	800120c <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000001c 	.word	0x2000001c
 8000534:	2000000c 	.word	0x2000000c

08000538 <setcolumn>:

void setcolumn(uint8_t columnNumber){
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_SET);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <setcolumn+0x78>)
 8000546:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <setcolumn+0x7c>)
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	f000 fe70 	bl	800123a <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e01e      	b.n	800059e <setcolumn+0x66>
		HAL_GPIO_WritePin(columnPort[(columnNumber+i)%columnNumber],columnPin[(columnNumber+i)%columnNumber], GPIO_PIN_RESET);
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4413      	add	r3, r2
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	fb93 f1f2 	sdiv	r1, r3, r2
 800056c:	fb01 f202 	mul.w	r2, r1, r2
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <setcolumn+0x78>)
 8000574:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000578:	79fa      	ldrb	r2, [r7, #7]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	fb93 f1f2 	sdiv	r1, r3, r2
 8000584:	fb01 f202 	mul.w	r2, r1, r2
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <setcolumn+0x7c>)
 800058c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	f000 fe51 	bl	800123a <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbdc      	blt.n	8000560 <setcolumn+0x28>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000028 	.word	0x20000028
 80005b4:	20000014 	.word	0x20000014

080005b8 <resetcolumn>:

void resetcolumn(uint8_t columnNumber){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_RESET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <resetcolumn+0x2c>)
 80005c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <resetcolumn+0x30>)
 80005ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	f000 fe30 	bl	800123a <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	20000014 	.word	0x20000014

080005ec <scan>:

uint8_t scan(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	uint8_t pressedButton=0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<ColumnNumber;i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e02e      	b.n	800065a <scan+0x6e>
	{
		setcolumn(i);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff99 	bl	8000538 <setcolumn>
		for(int j=0;j<RowNumber;j++)
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	e01b      	b.n	8000644 <scan+0x58>
		{
			if(rowread(j)==GPIO_PIN_SET)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff77 	bl	8000504 <rowread>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d110      	bne.n	800063e <scan+0x52>
			{
				pressedButton=j*4+i+1;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4413      	add	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
				resetcolumn(i);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffbf 	bl	80005b8 <resetcolumn>
				return pressedButton;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	e011      	b.n	8000662 <scan+0x76>
		for(int j=0;j<RowNumber;j++)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3301      	adds	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b02      	cmp	r3, #2
 8000648:	dde0      	ble.n	800060c <scan+0x20>
			}

		}
		resetcolumn(i);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffb2 	bl	80005b8 <resetcolumn>
	for(int i=0; i<ColumnNumber;i++)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b03      	cmp	r3, #3
 800065e:	ddcd      	ble.n	80005fc <scan+0x10>
	}
	return pressedButton;
 8000660:	79fb      	ldrb	r3, [r7, #7]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af04      	add	r7, sp, #16
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000676:	230a      	movs	r3, #10
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2301      	movs	r3, #1
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	1cfb      	adds	r3, r7, #3
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	2200      	movs	r2, #0
 8000686:	2178      	movs	r1, #120	; 0x78
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 ff33 	bl	80014f4 <HAL_I2C_Mem_Write>
 800068e:	4603      	mov	r3, r0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fafd 	bl	8000ca0 <HAL_Delay>
    int status = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80006aa:	21ae      	movs	r1, #174	; 0xae
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffdc 	bl	800066a <ssd1306_WriteCommand>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80006bc:	2120      	movs	r1, #32
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ffd3 	bl	800066a <ssd1306_WriteCommand>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006ce:	2110      	movs	r1, #16
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ffca 	bl	800066a <ssd1306_WriteCommand>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4413      	add	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80006e0:	21b0      	movs	r1, #176	; 0xb0
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffc1 	bl	800066a <ssd1306_WriteCommand>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80006f2:	21c8      	movs	r1, #200	; 0xc8
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ffb8 	bl	800066a <ssd1306_WriteCommand>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4413      	add	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000704:	2100      	movs	r1, #0
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffaf 	bl	800066a <ssd1306_WriteCommand>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000716:	2110      	movs	r1, #16
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffa6 	bl	800066a <ssd1306_WriteCommand>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff9d 	bl	800066a <ssd1306_WriteCommand>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800073a:	2181      	movs	r1, #129	; 0x81
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff94 	bl	800066a <ssd1306_WriteCommand>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff8b 	bl	800066a <ssd1306_WriteCommand>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800075e:	21a1      	movs	r1, #161	; 0xa1
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff82 	bl	800066a <ssd1306_WriteCommand>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000770:	21a6      	movs	r1, #166	; 0xa6
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff79 	bl	800066a <ssd1306_WriteCommand>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000782:	21a8      	movs	r1, #168	; 0xa8
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff70 	bl	800066a <ssd1306_WriteCommand>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000794:	213f      	movs	r1, #63	; 0x3f
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff67 	bl	800066a <ssd1306_WriteCommand>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007a6:	21a4      	movs	r1, #164	; 0xa4
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff5e 	bl	800066a <ssd1306_WriteCommand>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80007b8:	21d3      	movs	r1, #211	; 0xd3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff55 	bl	800066a <ssd1306_WriteCommand>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80007ca:	2100      	movs	r1, #0
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff4c 	bl	800066a <ssd1306_WriteCommand>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80007dc:	21d5      	movs	r1, #213	; 0xd5
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff43 	bl	800066a <ssd1306_WriteCommand>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80007ee:	21f0      	movs	r1, #240	; 0xf0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff3a 	bl	800066a <ssd1306_WriteCommand>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000800:	21d9      	movs	r1, #217	; 0xd9
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff31 	bl	800066a <ssd1306_WriteCommand>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000812:	2122      	movs	r1, #34	; 0x22
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff28 	bl	800066a <ssd1306_WriteCommand>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000824:	21da      	movs	r1, #218	; 0xda
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff1f 	bl	800066a <ssd1306_WriteCommand>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000836:	2112      	movs	r1, #18
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff16 	bl	800066a <ssd1306_WriteCommand>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000848:	21db      	movs	r1, #219	; 0xdb
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff0d 	bl	800066a <ssd1306_WriteCommand>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800085a:	2120      	movs	r1, #32
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff04 	bl	800066a <ssd1306_WriteCommand>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800086c:	218d      	movs	r1, #141	; 0x8d
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fefb 	bl	800066a <ssd1306_WriteCommand>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800087e:	2114      	movs	r1, #20
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fef2 	bl	800066a <ssd1306_WriteCommand>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000890:	21af      	movs	r1, #175	; 0xaf
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fee9 	bl	800066a <ssd1306_WriteCommand>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <ssd1306_Init+0x214>
        return 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00f      	b.n	80008cc <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f813 	bl	80008d8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f832 	bl	800091c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <ssd1306_Init+0x23c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <ssd1306_Init+0x23c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <ssd1306_Init+0x23c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	715a      	strb	r2, [r3, #5]

    return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000062c 	.word	0x2000062c

080008d8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e00d      	b.n	8000904 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <ssd1306_Fill+0x1a>
 80008ee:	2100      	movs	r1, #0
 80008f0:	e000      	b.n	80008f4 <ssd1306_Fill+0x1c>
 80008f2:	21ff      	movs	r1, #255	; 0xff
 80008f4:	4a08      	ldr	r2, [pc, #32]	; (8000918 <ssd1306_Fill+0x40>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	460a      	mov	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800090a:	d3ed      	bcc.n	80008e8 <ssd1306_Fill+0x10>
    }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	2000020c 	.word	0x2000020c

0800091c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af04      	add	r7, sp, #16
 8000922:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e024      	b.n	8000974 <ssd1306_UpdateScreen+0x58>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3b50      	subs	r3, #80	; 0x50
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fe99 	bl	800066a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe95 	bl	800066a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000940:	2110      	movs	r1, #16
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe91 	bl	800066a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000948:	7bfa      	ldrb	r2, [r7, #15]
 800094a:	4613      	mov	r3, r2
 800094c:	015b      	lsls	r3, r3, #5
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	461a      	mov	r2, r3
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <ssd1306_UpdateScreen+0x68>)
 8000956:	4413      	add	r3, r2
 8000958:	2264      	movs	r2, #100	; 0x64
 800095a:	9202      	str	r2, [sp, #8]
 800095c:	2284      	movs	r2, #132	; 0x84
 800095e:	9201      	str	r2, [sp, #4]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	2240      	movs	r2, #64	; 0x40
 8000966:	2178      	movs	r1, #120	; 0x78
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 fdc3 	bl	80014f4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3301      	adds	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d9d7      	bls.n	800092a <ssd1306_UpdateScreen+0xe>
    }
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000020c 	.word	0x2000020c

08000988 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000988:	b490      	push	{r4, r7}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	460b      	mov	r3, r1
 8000994:	71bb      	strb	r3, [r7, #6]
 8000996:	4613      	mov	r3, r2
 8000998:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b83      	cmp	r3, #131	; 0x83
 800099e:	d854      	bhi.n	8000a4a <ssd1306_DrawPixel+0xc2>
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b3f      	cmp	r3, #63	; 0x3f
 80009a4:	d851      	bhi.n	8000a4a <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <ssd1306_DrawPixel+0xcc>)
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 80009ae:	797b      	ldrb	r3, [r7, #5]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80009bc:	797b      	ldrb	r3, [r7, #5]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d120      	bne.n	8000a04 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	b2d8      	uxtb	r0, r3
 80009ca:	4601      	mov	r1, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	015b      	lsls	r3, r3, #5
 80009d0:	440b      	add	r3, r1
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <ssd1306_DrawPixel+0xd0>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b25c      	sxtb	r4, r3
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4601      	mov	r1, r0
 80009f2:	460b      	mov	r3, r1
 80009f4:	015b      	lsls	r3, r3, #5
 80009f6:	440b      	add	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	b2e1      	uxtb	r1, r4
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <ssd1306_DrawPixel+0xd0>)
 8000a00:	54d1      	strb	r1, [r2, r3]
 8000a02:	e023      	b.n	8000a4c <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	b2d8      	uxtb	r0, r3
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	460b      	mov	r3, r1
 8000a10:	015b      	lsls	r3, r3, #5
 8000a12:	440b      	add	r3, r1
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <ssd1306_DrawPixel+0xd0>)
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	2101      	movs	r1, #1
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	b25c      	sxtb	r4, r3
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	4601      	mov	r1, r0
 8000a38:	460b      	mov	r3, r1
 8000a3a:	015b      	lsls	r3, r3, #5
 8000a3c:	440b      	add	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	b2e1      	uxtb	r1, r4
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <ssd1306_DrawPixel+0xd0>)
 8000a46:	54d1      	strb	r1, [r2, r3]
 8000a48:	e000      	b.n	8000a4c <ssd1306_DrawPixel+0xc4>
        return;
 8000a4a:	bf00      	nop
    }
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc90      	pop	{r4, r7}
 8000a52:	4770      	bx	lr
 8000a54:	2000062c 	.word	0x2000062c
 8000a58:	2000020c 	.word	0x2000020c

08000a5c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	1d38      	adds	r0, r7, #4
 8000a66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	4613      	mov	r3, r2
 8000a72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	793b      	ldrb	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2b83      	cmp	r3, #131	; 0x83
 8000a80:	dc06      	bgt.n	8000a90 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000a82:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000a84:	885b      	ldrh	r3, [r3, #2]
 8000a86:	461a      	mov	r2, r3
 8000a88:	797b      	ldrb	r3, [r7, #5]
 8000a8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8e:	dd01      	ble.n	8000a94 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e05d      	b.n	8000b50 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	e04c      	b.n	8000b34 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	3b20      	subs	r3, #32
 8000aa0:	7979      	ldrb	r1, [r7, #5]
 8000aa2:	fb01 f303 	mul.w	r3, r1, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	440b      	add	r3, r1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	e034      	b.n	8000b24 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d012      	beq.n	8000af0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2d8      	uxtb	r0, r3
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000ada:	885b      	ldrh	r3, [r3, #2]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7bba      	ldrb	r2, [r7, #14]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f7ff ff4d 	bl	8000988 <ssd1306_DrawPixel>
 8000aee:	e016      	b.n	8000b1e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f7ff ff35 	bl	8000988 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	461a      	mov	r2, r3
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d3c5      	bcc.n	8000aba <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	797b      	ldrb	r3, [r7, #5]
 8000b36:	461a      	mov	r2, r3
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3ad      	bcc.n	8000a9a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	793b      	ldrb	r3, [r7, #4]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4413      	add	r3, r2
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <ssd1306_WriteChar+0xfc>)
 8000b4c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3724      	adds	r7, #36	; 0x24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	2000062c 	.word	0x2000062c

08000b5c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	1d38      	adds	r0, r7, #4
 8000b66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b6a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000b6c:	e012      	b.n	8000b94 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	7818      	ldrb	r0, [r3, #0]
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	ca06      	ldmia	r2, {r1, r2}
 8000b78:	f7ff ff70 	bl	8000a5c <ssd1306_WriteChar>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d002      	beq.n	8000b8e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	e008      	b.n	8000ba0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e8      	bne.n	8000b6e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x+1;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <ssd1306_SetCursor+0x30>)
 8000bc2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <ssd1306_SetCursor+0x30>)
 8000bca:	805a      	strh	r2, [r3, #2]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000062c 	.word	0x2000062c

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f947 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fba4 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f95f 	bl	8000eea <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f927 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	2000003c 	.word	0x2000003c
 8000c64:	20000038 	.word	0x20000038

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x20>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	2000003c 	.word	0x2000003c
 8000c88:	20000634 	.word	0x20000634

08000c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_GetTick+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	20000634 	.word	0x20000634

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff fff0 	bl	8000c8c <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffe0 	bl	8000c8c <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000003c 	.word	0x2000003c

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4906      	ldr	r1, [pc, #24]	; (8000d80 <__NVIC_EnableIRQ+0x34>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff90 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff2d 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff42 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff90 	bl	8000dd8 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff35 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa2 	bl	8000e3c <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08b      	sub	sp, #44	; 0x2c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e169      	b.n	80011ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8158 	bne.w	80011e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a9a      	ldr	r2, [pc, #616]	; (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d05e      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f40:	4a98      	ldr	r2, [pc, #608]	; (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d875      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f46:	4a98      	ldr	r2, [pc, #608]	; (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d058      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f4c:	4a96      	ldr	r2, [pc, #600]	; (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d86f      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f52:	4a96      	ldr	r2, [pc, #600]	; (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d052      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f58:	4a94      	ldr	r2, [pc, #592]	; (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d869      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f5e:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d04c      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f64:	4a92      	ldr	r2, [pc, #584]	; (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d863      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f6a:	4a92      	ldr	r2, [pc, #584]	; (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d046      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f70:	4a90      	ldr	r2, [pc, #576]	; (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d85d      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f76:	2b12      	cmp	r3, #18
 8000f78:	d82a      	bhi.n	8000fd0 <HAL_GPIO_Init+0xcc>
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d859      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <HAL_GPIO_Init+0x80>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fd9 	.word	0x08000fd9
 8000f8c:	08000feb 	.word	0x08000feb
 8000f90:	0800102d 	.word	0x0800102d
 8000f94:	08001033 	.word	0x08001033
 8000f98:	08001033 	.word	0x08001033
 8000f9c:	08001033 	.word	0x08001033
 8000fa0:	08001033 	.word	0x08001033
 8000fa4:	08001033 	.word	0x08001033
 8000fa8:	08001033 	.word	0x08001033
 8000fac:	08001033 	.word	0x08001033
 8000fb0:	08001033 	.word	0x08001033
 8000fb4:	08001033 	.word	0x08001033
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	08001033 	.word	0x08001033
 8000fc0:	08001033 	.word	0x08001033
 8000fc4:	08001033 	.word	0x08001033
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000ff5 	.word	0x08000ff5
 8000fd0:	4a79      	ldr	r2, [pc, #484]	; (80011b8 <HAL_GPIO_Init+0x2b4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd6:	e02c      	b.n	8001032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e029      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e024      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e01f      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	330c      	adds	r3, #12
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e01a      	b.n	8001034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001006:	2304      	movs	r3, #4
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e013      	b.n	8001034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d105      	bne.n	8001020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001014:	2308      	movs	r3, #8
 8001016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	611a      	str	r2, [r3, #16]
          break;
 800101e:	e009      	b.n	8001034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001020:	2308      	movs	r3, #8
 8001022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	615a      	str	r2, [r3, #20]
          break;
 800102a:	e003      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x130>
          break;
 8001032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d801      	bhi.n	800103e <HAL_GPIO_Init+0x13a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e001      	b.n	8001042 <HAL_GPIO_Init+0x13e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2bff      	cmp	r3, #255	; 0xff
 8001048:	d802      	bhi.n	8001050 <HAL_GPIO_Init+0x14c>
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x152>
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	3b08      	subs	r3, #8
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	210f      	movs	r1, #15
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	6a39      	ldr	r1, [r7, #32]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	431a      	orrs	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80b1 	beq.w	80011e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2bc>)
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1ec>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1e8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3d      	ldr	r2, [pc, #244]	; (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1e0>
 80010e0:	2303      	movs	r3, #3
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010f0:	2300      	movs	r3, #0
 80010f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001102:	492f      	ldr	r1, [pc, #188]	; (80011c0 <HAL_GPIO_Init+0x2bc>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	492c      	ldr	r1, [pc, #176]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	4928      	ldr	r1, [pc, #160]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001134:	4013      	ands	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4922      	ldr	r1, [pc, #136]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	491e      	ldr	r1, [pc, #120]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	4918      	ldr	r1, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4914      	ldr	r1, [pc, #80]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	490e      	ldr	r1, [pc, #56]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
 80011a0:	e021      	b.n	80011e6 <HAL_GPIO_Init+0x2e2>
 80011a2:	bf00      	nop
 80011a4:	10320000 	.word	0x10320000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10220000 	.word	0x10220000
 80011b0:	10210000 	.word	0x10210000
 80011b4:	10120000 	.word	0x10120000
 80011b8:	10110000 	.word	0x10110000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f ae8e 	bne.w	8000f18 <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001256:	e003      	b.n	8001260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e12b      	b.n	80014d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f888 	bl	80003a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012d0:	f002 fca6 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a81      	ldr	r2, [pc, #516]	; (80014e0 <HAL_I2C_Init+0x274>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d807      	bhi.n	80012f0 <HAL_I2C_Init+0x84>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a80      	ldr	r2, [pc, #512]	; (80014e4 <HAL_I2C_Init+0x278>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	bf94      	ite	ls
 80012e8:	2301      	movls	r3, #1
 80012ea:	2300      	movhi	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	e006      	b.n	80012fe <HAL_I2C_Init+0x92>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a7d      	ldr	r2, [pc, #500]	; (80014e8 <HAL_I2C_Init+0x27c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	bf94      	ite	ls
 80012f8:	2301      	movls	r3, #1
 80012fa:	2300      	movhi	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0e7      	b.n	80014d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4a78      	ldr	r2, [pc, #480]	; (80014ec <HAL_I2C_Init+0x280>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_I2C_Init+0x274>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d802      	bhi.n	8001340 <HAL_I2C_Init+0xd4>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3301      	adds	r3, #1
 800133e:	e009      	b.n	8001354 <HAL_I2C_Init+0xe8>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_I2C_Init+0x284>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	3301      	adds	r3, #1
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	495c      	ldr	r1, [pc, #368]	; (80014e0 <HAL_I2C_Init+0x274>)
 8001370:	428b      	cmp	r3, r1
 8001372:	d819      	bhi.n	80013a8 <HAL_I2C_Init+0x13c>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1e59      	subs	r1, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001388:	400b      	ands	r3, r1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <HAL_I2C_Init+0x138>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e59      	subs	r1, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fbb1 f3f3 	udiv	r3, r1, r3
 800139c:	3301      	adds	r3, #1
 800139e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a2:	e051      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 80013a4:	2304      	movs	r3, #4
 80013a6:	e04f      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <HAL_I2C_Init+0x168>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e58      	subs	r0, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	e012      	b.n	80013fa <HAL_I2C_Init+0x18e>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	0099      	lsls	r1, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x196>
 80013fe:	2301      	movs	r3, #1
 8001400:	e022      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10e      	bne.n	8001428 <HAL_I2C_Init+0x1bc>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e58      	subs	r0, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6859      	ldr	r1, [r3, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	fbb0 f3f3 	udiv	r3, r0, r3
 800141c:	3301      	adds	r3, #1
 800141e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001426:	e00f      	b.n	8001448 <HAL_I2C_Init+0x1dc>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	0099      	lsls	r1, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6809      	ldr	r1, [r1, #0]
 800144c:	4313      	orrs	r3, r2
 800144e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6911      	ldr	r1, [r2, #16]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	000186a0 	.word	0x000186a0
 80014e4:	001e847f 	.word	0x001e847f
 80014e8:	003d08ff 	.word	0x003d08ff
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4603      	mov	r3, r0
 8001504:	817b      	strh	r3, [r7, #10]
 8001506:	460b      	mov	r3, r1
 8001508:	813b      	strh	r3, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800150e:	f7ff fbbd 	bl	8000c8c <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b20      	cmp	r3, #32
 800151e:	f040 80d9 	bne.w	80016d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2319      	movs	r3, #25
 8001528:	2201      	movs	r2, #1
 800152a:	496d      	ldr	r1, [pc, #436]	; (80016e0 <HAL_I2C_Mem_Write+0x1ec>)
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f971 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001538:	2302      	movs	r3, #2
 800153a:	e0cc      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_I2C_Mem_Write+0x56>
 8001546:	2302      	movs	r3, #2
 8001548:	e0c5      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d007      	beq.n	8001570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2221      	movs	r2, #33	; 0x21
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a4d      	ldr	r2, [pc, #308]	; (80016e4 <HAL_I2C_Mem_Write+0x1f0>)
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015b2:	88f8      	ldrh	r0, [r7, #6]
 80015b4:	893a      	ldrh	r2, [r7, #8]
 80015b6:	8979      	ldrh	r1, [r7, #10]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4603      	mov	r3, r0
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f890 	bl	80016e8 <I2C_RequestMemoryWrite>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d052      	beq.n	8001674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e081      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f9f2 	bl	80019c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d107      	bne.n	80015fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06b      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b04      	cmp	r3, #4
 800163a:	d11b      	bne.n	8001674 <HAL_I2C_Mem_Write+0x180>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1aa      	bne.n	80015d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f9de 	bl	8001a42 <I2C_WaitOnBTFFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00d      	beq.n	80016a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b04      	cmp	r3, #4
 8001692:	d107      	bne.n	80016a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e016      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80016d4:	2302      	movs	r3, #2
  }
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	00100002 	.word	0x00100002
 80016e4:	ffff0000 	.word	0xffff0000

080016e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	817b      	strh	r3, [r7, #10]
 80016fa:	460b      	mov	r3, r1
 80016fc:	813b      	strh	r3, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	2200      	movs	r2, #0
 800171a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f878 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001738:	d103      	bne.n	8001742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e05f      	b.n	8001806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	6a3a      	ldr	r2, [r7, #32]
 800175a:	492d      	ldr	r1, [pc, #180]	; (8001810 <I2C_RequestMemoryWrite+0x128>)
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f8b0 	bl	80018c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e04c      	b.n	8001806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	6a39      	ldr	r1, [r7, #32]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f91a 	bl	80019c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00d      	beq.n	80017ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b04      	cmp	r3, #4
 8001798:	d107      	bne.n	80017aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e02b      	b.n	8001806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017b4:	893b      	ldrh	r3, [r7, #8]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	e021      	b.n	8001804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80017c0:	893b      	ldrh	r3, [r7, #8]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8f4 	bl	80019c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d107      	bne.n	80017f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e005      	b.n	8001806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017fa:	893b      	ldrh	r3, [r7, #8]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	00010002 	.word	0x00010002

08001814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001824:	e025      	b.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d021      	beq.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff fa2d 	bl	8000c8c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d116      	bne.n	8001872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f043 0220 	orr.w	r2, r3, #32
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e023      	b.n	80018ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10d      	bne.n	8001898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4013      	ands	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	e00c      	b.n	80018b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4013      	ands	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d0b6      	beq.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018d0:	e051      	b.n	8001976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e0:	d123      	bne.n	800192a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f043 0204 	orr.w	r2, r3, #4
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e046      	b.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d021      	beq.n	8001976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001932:	f7ff f9ab 	bl	8000c8c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d116      	bne.n	8001976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f043 0220 	orr.w	r2, r3, #32
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e020      	b.n	80019b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10c      	bne.n	800199a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4013      	ands	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	e00b      	b.n	80019b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	43da      	mvns	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4013      	ands	r3, r2
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d18d      	bne.n	80018d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019cc:	e02d      	b.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f878 	bl	8001ac4 <I2C_IsAcknowledgeFailed>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e02d      	b.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d021      	beq.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff f951 	bl	8000c8c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d116      	bne.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e007      	b.n	8001a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b80      	cmp	r3, #128	; 0x80
 8001a36:	d1ca      	bne.n	80019ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a4e:	e02d      	b.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f837 	bl	8001ac4 <I2C_IsAcknowledgeFailed>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e02d      	b.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d021      	beq.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a68:	f7ff f910 	bl	8000c8c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d302      	bcc.n	8001a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d1ca      	bne.n	8001a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d11b      	bne.n	8001b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f043 0204 	orr.w	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af06      	add	r7, sp, #24
 8001b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0fd      	b.n	8001d2e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 fa66 	bl	8008018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 f96f 	bl	8003e3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	687e      	ldr	r6, [r7, #4]
 8001b66:	466d      	mov	r5, sp
 8001b68:	f106 0410 	add.w	r4, r6, #16
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	602b      	str	r3, [r5, #0]
 8001b74:	1d33      	adds	r3, r6, #4
 8001b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f002 f939 	bl	8003df0 <USB_CoreInit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0ce      	b.n	8001d2e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 f96a 	bl	8003e70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e04c      	b.n	8001c3c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	b298      	uxth	r0, r3
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3336      	adds	r3, #54	; 0x36
 8001be0:	4602      	mov	r2, r0
 8001be2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3303      	adds	r3, #3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3338      	adds	r3, #56	; 0x38
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	333c      	adds	r3, #60	; 0x3c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3340      	adds	r3, #64	; 0x40
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3ad      	bcc.n	8001ba2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e044      	b.n	8001cd6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3b5      	bcc.n	8001c4c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	687e      	ldr	r6, [r7, #4]
 8001ce8:	466d      	mov	r5, sp
 8001cea:	f106 0410 	add.w	r4, r6, #16
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	602b      	str	r3, [r5, #0]
 8001cf6:	1d33      	adds	r3, r6, #4
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f002 f8c4 	bl	8003e88 <USB_DevInit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00d      	b.n	8001d2e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fd76 	bl	8006818 <USB_DevDisconnect>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_PCD_Start+0x16>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e016      	b.n	8001d7a <HAL_PCD_Start+0x44>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 f859 	bl	8003e10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d5e:	2101      	movs	r1, #1
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f006 fba8 	bl	80084b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 fd4a 	bl	8006804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b088      	sub	sp, #32
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fd4c 	bl	800682c <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fb48 	bl	8002436 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 fd3e 	bl	800682c <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d112      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f006 f99a 	bl	800810e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f923 	bl	8002028 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 fd20 	bl	800682c <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d10b      	bne.n	8001e10 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 fd09 	bl	800682c <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e24:	d10b      	bne.n	8001e3e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fcf2 	bl	800682c <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e52:	d126      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	b292      	uxth	r2, r2
 8001e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0208 	bic.w	r2, r2, #8
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f006 f97b 	bl	8008180 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fcc0 	bl	800682c <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb6:	f040 8082 	bne.w	8001fbe <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	77fb      	strb	r3, [r7, #31]
 8001ebe:	e010      	b.n	8001ee2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	7ffb      	ldrb	r3, [r7, #31]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	8812      	ldrh	r2, [r2, #0]
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	443b      	add	r3, r7
 8001ed8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	77fb      	strb	r3, [r7, #31]
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d9eb      	bls.n	8001ec0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f18:	bf00      	nop
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f6      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
 8001f48:	e00f      	b.n	8001f6a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4611      	mov	r1, r2
 8001f52:	7ffa      	ldrb	r2, [r7, #31]
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	440a      	add	r2, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	443b      	add	r3, r7
 8001f5e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f62:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
 8001f66:	3301      	adds	r3, #1
 8001f68:	77fb      	strb	r3, [r7, #31]
 8001f6a:	7ffb      	ldrb	r3, [r7, #31]
 8001f6c:	2b07      	cmp	r3, #7
 8001f6e:	d9ec      	bls.n	8001f4a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	b292      	uxth	r2, r2
 8001f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0204 	orr.w	r2, r2, #4
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 f8c7 	bl	800814c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fc32 	bl	800682c <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f006 f880 	bl	80080f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fc18 	bl	800682c <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002006:	d10b      	bne.n	8002020 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201a:	b292      	uxth	r2, r2
 800201c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_SetAddress+0x1a>
 800203e:	2302      	movs	r3, #2
 8002040:	e013      	b.n	800206a <HAL_PCD_SetAddress+0x42>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fbbf 	bl	80067de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4603      	mov	r3, r0
 8002082:	70fb      	strb	r3, [r7, #3]
 8002084:	460b      	mov	r3, r1
 8002086:	803b      	strh	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da0e      	bge.n	80020b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	705a      	strb	r2, [r3, #1]
 80020b4:	e00e      	b.n	80020d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 0207 	and.w	r2, r3, #7
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020e0:	883a      	ldrh	r2, [r7, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	78ba      	ldrb	r2, [r7, #2]
 80020ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020fe:	78bb      	ldrb	r3, [r7, #2]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d102      	bne.n	800210a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_PCD_EP_Open+0xa6>
 8002114:	2302      	movs	r3, #2
 8002116:	e00e      	b.n	8002136 <HAL_PCD_EP_Open+0xc4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fece 	bl	8003ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002134:	7afb      	ldrb	r3, [r7, #11]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800214a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da0e      	bge.n	8002170 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	705a      	strb	r2, [r3, #1]
 800216e:	e00e      	b.n	800218e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 0207 	and.w	r2, r3, #7
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_Close+0x6a>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_Close+0x88>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 f9f0 	bl	800459c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 0207 	and.w	r2, r3, #7
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fba2 	bl	8004974 <USB_EPStartXfer>
 8002230:	e005      	b.n	800223e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6979      	ldr	r1, [r7, #20]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fb9b 	bl	8004974 <USB_EPStartXfer>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	460b      	mov	r3, r1
 8002256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2201      	movs	r2, #1
 8002292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2da      	uxtb	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fb5f 	bl	8004974 <USB_EPStartXfer>
 80022b6:	e005      	b.n	80022c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6979      	ldr	r1, [r7, #20]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fb58 	bl	8004974 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 0207 	and.w	r2, r3, #7
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d901      	bls.n	80022ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e04c      	b.n	8002386 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da0e      	bge.n	8002312 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	705a      	strb	r2, [r3, #1]
 8002310:	e00c      	b.n	800232c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_PCD_EP_SetStall+0x7e>
 8002348:	2302      	movs	r3, #2
 800234a:	e01c      	b.n	8002386 <HAL_PCD_EP_SetStall+0xb8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	4618      	mov	r0, r3
 800235c:	f004 f942 	bl	80065e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f004 fa67 	bl	800684a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e040      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0e      	bge.n	80023d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	705a      	strb	r2, [r3, #1]
 80023d0:	e00e      	b.n	80023f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0207 	and.w	r2, r3, #7
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_PCD_EP_ClrStall+0x82>
 800240c:	2302      	movs	r3, #2
 800240e:	e00e      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	4618      	mov	r0, r3
 8002420:	f004 f930 	bl	8006684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b08e      	sub	sp, #56	; 0x38
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800243e:	e2ec      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002448:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800244a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8161 	bne.w	8002722 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d152      	bne.n	8002510 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	81fb      	strh	r3, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3328      	adds	r3, #40	; 0x28
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	3302      	adds	r3, #2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	441a      	add	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024ce:	2100      	movs	r1, #0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f005 fdf4 	bl	80080be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 829b 	beq.w	8002a1a <PCD_EP_ISR_Handler+0x5e4>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 8296 	bne.w	8002a1a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800250e:	e284      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002520:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002526:	2b00      	cmp	r3, #0
 8002528:	d034      	beq.n	8002594 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	3306      	adds	r3, #6
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002568:	b29b      	uxth	r3, r3
 800256a:	f004 f9be 	bl	80068ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	f640 738f 	movw	r3, #3983	; 0xf8f
 800257a:	4013      	ands	r3, r2
 800257c:	823b      	strh	r3, [r7, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	8a3a      	ldrh	r2, [r7, #16]
 8002584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002588:	b292      	uxth	r2, r2
 800258a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f005 fd69 	bl	8008064 <HAL_PCD_SetupStageCallback>
 8002592:	e242      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002594:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002598:	2b00      	cmp	r3, #0
 800259a:	f280 823e 	bge.w	8002a1a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025aa:	4013      	ands	r3, r2
 80025ac:	83bb      	strh	r3, [r7, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	8bba      	ldrh	r2, [r7, #28]
 80025b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b8:	b292      	uxth	r2, r2
 80025ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	3306      	adds	r3, #6
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d019      	beq.n	8002624 <PCD_EP_ISR_Handler+0x1ee>
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	6959      	ldr	r1, [r3, #20]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002608:	b29b      	uxth	r3, r3
 800260a:	f004 f96e 	bl	80068ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	441a      	add	r2, r3
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800261c:	2100      	movs	r1, #0
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f005 fd32 	bl	8008088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 81f2 	bne.w	8002a1a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d112      	bne.n	8002684 <PCD_EP_ISR_Handler+0x24e>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002668:	b29a      	uxth	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e02f      	b.n	80026e4 <PCD_EP_ISR_Handler+0x2ae>
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b3e      	cmp	r3, #62	; 0x3e
 800268a:	d813      	bhi.n	80026b4 <PCD_EP_ISR_Handler+0x27e>
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <PCD_EP_ISR_Handler+0x270>
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	3301      	adds	r3, #1
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e017      	b.n	80026e4 <PCD_EP_ISR_Handler+0x2ae>
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <PCD_EP_ISR_Handler+0x298>
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	3b01      	subs	r3, #1
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026de:	b29a      	uxth	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f4:	827b      	strh	r3, [r7, #18]
 80026f6:	8a7b      	ldrh	r3, [r7, #18]
 80026f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026fc:	827b      	strh	r3, [r7, #18]
 80026fe:	8a7b      	ldrh	r3, [r7, #18]
 8002700:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002704:	827b      	strh	r3, [r7, #18]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	8a7b      	ldrh	r3, [r7, #18]
 800270c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271c:	b29b      	uxth	r3, r3
 800271e:	8013      	strh	r3, [r2, #0]
 8002720:	e17b      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002734:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002738:	2b00      	cmp	r3, #0
 800273a:	f280 80ea 	bge.w	8002912 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29a      	uxth	r2, r3
 8002750:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002754:	4013      	ands	r3, r2
 8002756:	853b      	strh	r3, [r7, #40]	; 0x28
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800276c:	b292      	uxth	r2, r2
 800276e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002770:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	7b1b      	ldrb	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d122      	bne.n	80027d4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	3306      	adds	r3, #6
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	6959      	ldr	r1, [r3, #20]
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	88da      	ldrh	r2, [r3, #6]
 80027cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ce:	f004 f88c 	bl	80068ea <USB_ReadPMA>
 80027d2:	e07c      	b.n	80028ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	78db      	ldrb	r3, [r3, #3]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d108      	bne.n	80027ee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027de:	461a      	mov	r2, r3
 80027e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f927 	bl	8002a36 <HAL_PCD_EP_DB_Receive>
 80027e8:	4603      	mov	r3, r0
 80027ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027ec:	e06f      	b.n	80028ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	847b      	strh	r3, [r7, #34]	; 0x22
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	441a      	add	r2, r3
 8002818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d021      	beq.n	800288c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	3302      	adds	r3, #2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002870:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02a      	beq.n	80028ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	891a      	ldrh	r2, [r3, #8]
 8002884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002886:	f004 f830 	bl	80068ea <USB_ReadPMA>
 800288a:	e020      	b.n	80028ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	3306      	adds	r3, #6
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	6959      	ldr	r1, [r3, #20]
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	895a      	ldrh	r2, [r3, #10]
 80028c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ca:	f004 f80e 	bl	80068ea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d4:	441a      	add	r2, r3
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e0:	441a      	add	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x4c2>
 80028ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d206      	bcs.n	8002906 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f005 fbc2 	bl	8008088 <HAL_PCD_DataOutStageCallback>
 8002904:	e005      	b.n	8002912 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290c:	4618      	mov	r0, r3
 800290e:	f002 f831 	bl	8004974 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d07e      	beq.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800291c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	843b      	strh	r3, [r7, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	8c3b      	ldrh	r3, [r7, #32]
 800295c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002964:	b29b      	uxth	r3, r3
 8002966:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d00c      	beq.n	800298a <PCD_EP_ISR_Handler+0x554>
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	78db      	ldrb	r3, [r3, #3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800297c:	2b02      	cmp	r3, #2
 800297e:	d146      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002980:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d141      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	3302      	adds	r3, #2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d906      	bls.n	80029cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	1ad2      	subs	r2, r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	619a      	str	r2, [r3, #24]
 80029ca:	e002      	b.n	80029d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 fb6c 	bl	80080be <HAL_PCD_DataInStageCallback>
 80029e6:	e018      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	441a      	add	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	441a      	add	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 ffb4 	bl	8004974 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a0c:	e005      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f91b 	bl	8002c50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f6ff ad0a 	blt.w	8002440 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3738      	adds	r7, #56	; 0x38
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07e      	beq.n	8002b4c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	3302      	adds	r3, #2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	8b7b      	ldrh	r3, [r7, #26]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d306      	bcc.n	8002a90 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	8b7b      	ldrh	r3, [r7, #26]
 8002a88:	1ad2      	subs	r2, r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	619a      	str	r2, [r3, #24]
 8002a8e:	e002      	b.n	8002a96 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d123      	bne.n	8002ae6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab8:	833b      	strh	r3, [r7, #24]
 8002aba:	8b3b      	ldrh	r3, [r7, #24]
 8002abc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ac0:	833b      	strh	r3, [r7, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	441a      	add	r2, r3
 8002ad0:	8b3b      	ldrh	r3, [r7, #24]
 8002ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01f      	beq.n	8002b30 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	82fb      	strh	r3, [r7, #22]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	8afb      	ldrh	r3, [r7, #22]
 8002b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b30:	8b7b      	ldrh	r3, [r7, #26]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6959      	ldr	r1, [r3, #20]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	891a      	ldrh	r2, [r3, #8]
 8002b44:	8b7b      	ldrh	r3, [r7, #26]
 8002b46:	f003 fed0 	bl	80068ea <USB_ReadPMA>
 8002b4a:	e07c      	b.n	8002c46 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3306      	adds	r3, #6
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	8b7b      	ldrh	r3, [r7, #26]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d306      	bcc.n	8002b8e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	8b7b      	ldrh	r3, [r7, #26]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	619a      	str	r2, [r3, #24]
 8002b8c:	e002      	b.n	8002b94 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d123      	bne.n	8002be4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	83fb      	strh	r3, [r7, #30]
 8002bb8:	8bfb      	ldrh	r3, [r7, #30]
 8002bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bbe:	83fb      	strh	r3, [r7, #30]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	8bfb      	ldrh	r3, [r7, #30]
 8002bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c08:	83bb      	strh	r3, [r7, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	8bbb      	ldrh	r3, [r7, #28]
 8002c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c2e:	8b7b      	ldrh	r3, [r7, #26]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6959      	ldr	r1, [r3, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	895a      	ldrh	r2, [r3, #10]
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
 8002c42:	f003 fe52 	bl	80068ea <USB_ReadPMA>
    }
  }

  return count;
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0a2      	sub	sp, #136	; 0x88
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 81c7 	beq.w	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d907      	bls.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	e002      	b.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80b9 	bne.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d126      	bne.n	8002d18 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	4413      	add	r3, r2
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	011a      	lsls	r2, r3, #4
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e01a      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d116      	bne.n	8002d4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	4413      	add	r3, r2
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d126      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	011a      	lsls	r2, r3, #4
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	e017      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d113      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	011a      	lsls	r2, r3, #4
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f005 f96c 	bl	80080be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 82d4 	beq.w	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	827b      	strh	r3, [r7, #18]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	8a7b      	ldrh	r3, [r7, #18]
 8002e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	8013      	strh	r3, [r2, #0]
 8002e32:	e2b2      	b.n	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d021      	beq.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 8286 	bne.w	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e96:	441a      	add	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ea4:	441a      	add	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d309      	bcc.n	8002eca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	e015      	b.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ee0:	e009      	b.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d155      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x35a>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	4413      	add	r3, r2
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	011a      	lsls	r2, r3, #4
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
 8002f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d112      	bne.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x302>
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	e047      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	2b3e      	cmp	r3, #62	; 0x3e
 8002f56:	d811      	bhi.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	029b      	lsls	r3, r3, #10
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	e032      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x342>
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e01b      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d117      	bne.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	4413      	add	r3, r2
 8002fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	011a      	lsls	r2, r3, #4
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6959      	ldr	r1, [r3, #20]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	891a      	ldrh	r2, [r3, #8]
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f003 fc35 	bl	8006860 <USB_WritePMA>
 8002ff6:	e1d0      	b.n	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	3306      	adds	r3, #6
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003020:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800302c:	429a      	cmp	r2, r3
 800302e:	d307      	bcc.n	8003040 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003038:	1ad2      	subs	r2, r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	619a      	str	r2, [r3, #24]
 800303e:	e002      	b.n	8003046 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80c4 	bne.w	80031d8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d126      	bne.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x456>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	4413      	add	r3, r2
 800306e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	011a      	lsls	r2, r3, #4
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	4413      	add	r3, r2
 800307a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800307e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800308a:	b29a      	uxth	r2, r3
 800308c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	e01a      	b.n	80030dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d116      	bne.n	80030dc <HAL_PCD_EP_DB_Transmit+0x48c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	677b      	str	r3, [r7, #116]	; 0x74
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c2:	4413      	add	r3, r2
 80030c4:	677b      	str	r3, [r7, #116]	; 0x74
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	011a      	lsls	r2, r3, #4
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	4413      	add	r3, r2
 80030d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030d4:	673b      	str	r3, [r7, #112]	; 0x70
 80030d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d8:	2200      	movs	r2, #0
 80030da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	785b      	ldrb	r3, [r3, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d12f      	bne.n	800314a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003102:	4413      	add	r3, r2
 8003104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	011a      	lsls	r2, r3, #4
 800310e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003112:	4413      	add	r3, r2
 8003114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800311c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003128:	b29a      	uxth	r2, r3
 800312a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003140:	b29a      	uxth	r2, r3
 8003142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	e017      	b.n	800317a <HAL_PCD_EP_DB_Transmit+0x52a>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d113      	bne.n	800317a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003160:	4413      	add	r3, r2
 8003162:	67bb      	str	r3, [r7, #120]	; 0x78
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	011a      	lsls	r2, r3, #4
 800316a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316c:	4413      	add	r3, r2
 800316e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003172:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003176:	2200      	movs	r2, #0
 8003178:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f004 ff9c 	bl	80080be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8104 	bne.w	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	441a      	add	r2, r3
 80031be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]
 80031d6:	e0e0      	b.n	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d121      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	b29b      	uxth	r3, r3
 8003224:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 80b4 	bne.w	800339a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800323a:	441a      	add	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003248:	441a      	add	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	d309      	bcc.n	800326e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	621a      	str	r2, [r3, #32]
 800326c:	e015      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800327a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003284:	e009      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	667b      	str	r3, [r7, #100]	; 0x64
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d155      	bne.n	8003354 <HAL_PCD_EP_DB_Transmit+0x704>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032bc:	4413      	add	r3, r2
 80032be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	011a      	lsls	r2, r3, #4
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	4413      	add	r3, r2
 80032ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e044      	b.n	8003386 <HAL_PCD_EP_DB_Transmit+0x736>
 80032fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003300:	d811      	bhi.n	8003326 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
 8003308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	3301      	adds	r3, #1
 8003316:	657b      	str	r3, [r7, #84]	; 0x54
 8003318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331a:	b29b      	uxth	r3, r3
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	b29a      	uxth	r2, r3
 8003320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e02f      	b.n	8003386 <HAL_PCD_EP_DB_Transmit+0x736>
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
 800332c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	3b01      	subs	r3, #1
 800333a:	657b      	str	r3, [r7, #84]	; 0x54
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29b      	uxth	r3, r3
 8003344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334c:	b29a      	uxth	r2, r3
 800334e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	e018      	b.n	8003386 <HAL_PCD_EP_DB_Transmit+0x736>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d114      	bne.n	8003386 <HAL_PCD_EP_DB_Transmit+0x736>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336a:	4413      	add	r3, r2
 800336c:	667b      	str	r3, [r7, #100]	; 0x64
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	011a      	lsls	r2, r3, #4
 8003374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003376:	4413      	add	r3, r2
 8003378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800337c:	663b      	str	r3, [r7, #96]	; 0x60
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	b29a      	uxth	r2, r3
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003384:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6959      	ldr	r1, [r3, #20]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	895a      	ldrh	r2, [r3, #10]
 8003392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	f003 fa63 	bl	8006860 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	823b      	strh	r3, [r7, #16]
 80033b6:	8a3b      	ldrh	r3, [r7, #16]
 80033b8:	f083 0310 	eor.w	r3, r3, #16
 80033bc:	823b      	strh	r3, [r7, #16]
 80033be:	8a3b      	ldrh	r3, [r7, #16]
 80033c0:	f083 0320 	eor.w	r3, r3, #32
 80033c4:	823b      	strh	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	8a3b      	ldrh	r3, [r7, #16]
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3788      	adds	r7, #136	; 0x88
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	4613      	mov	r3, r2
 8003404:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e009      	b.n	800343e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800342a:	897a      	ldrh	r2, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	b29a      	uxth	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	80da      	strh	r2, [r3, #6]
 8003452:	e00b      	b.n	800346c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2201      	movs	r2, #1
 8003458:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	b29a      	uxth	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	b29a      	uxth	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e272      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8087 	beq.w	80035a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003498:	4b92      	ldr	r3, [pc, #584]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d00c      	beq.n	80034be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a4:	4b8f      	ldr	r3, [pc, #572]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d112      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
 80034b0:	4b8c      	ldr	r3, [pc, #560]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d06c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x12c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d168      	bne.n	80035a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e24c      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x76>
 80034e0:	4b80      	ldr	r3, [pc, #512]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7f      	ldr	r2, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e02e      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b7b      	ldr	r3, [pc, #492]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7a      	ldr	r2, [pc, #488]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b78      	ldr	r3, [pc, #480]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a77      	ldr	r2, [pc, #476]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0xbc>
 800351a:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a71      	ldr	r2, [pc, #452]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6e      	ldr	r2, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xd4>
 8003534:	4b6b      	ldr	r3, [pc, #428]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6a      	ldr	r2, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a67      	ldr	r2, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd fb9a 	bl	8000c8c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fd fb96 	bl	8000c8c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e200      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xe4>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fb86 	bl	8000c8c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd fb82 	bl	8000c8c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1ec      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x10c>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b2:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x18c>
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c0      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4939      	ldr	r1, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd fb3b 	bl	8000c8c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361a:	f7fd fb37 	bl	8000c8c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a1      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4927      	ldr	r1, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <HAL_RCC_OscConfig+0x270>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fd fb1a 	bl	8000c8c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fd fb16 	bl	8000c8c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e180      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03a      	beq.n	80036fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d019      	beq.n	80036c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_RCC_OscConfig+0x274>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fd fafa 	bl	8000c8c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369c:	f7fd faf6 	bl	8000c8c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e160      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f000 fac4 	bl	8003c48 <RCC_Delay>
 80036c0:	e01c      	b.n	80036fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RCC_OscConfig+0x274>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fd fae0 	bl	8000c8c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fd fadc 	bl	8000c8c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d908      	bls.n	80036f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e146      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	42420000 	.word	0x42420000
 80036ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e9      	bne.n	80036d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a6 	beq.w	8003856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b8b      	ldr	r3, [pc, #556]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a87      	ldr	r2, [pc, #540]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b85      	ldr	r3, [pc, #532]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b82      	ldr	r3, [pc, #520]	; (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7e      	ldr	r2, [pc, #504]	; (8003940 <HAL_RCC_OscConfig+0x4c8>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fd fa9d 	bl	8000c8c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fa99 	bl	8000c8c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	; 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e103      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b75      	ldr	r3, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x4c8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x312>
 800377c:	4b6f      	ldr	r3, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6213      	str	r3, [r2, #32]
 8003788:	e02d      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x334>
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a69      	ldr	r2, [pc, #420]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a66      	ldr	r2, [pc, #408]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6213      	str	r3, [r2, #32]
 80037aa:	e01c      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d10c      	bne.n	80037ce <HAL_RCC_OscConfig+0x356>
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4a60      	ldr	r2, [pc, #384]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6213      	str	r3, [r2, #32]
 80037c0:	4b5e      	ldr	r3, [pc, #376]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6213      	str	r3, [r2, #32]
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x36e>
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a5a      	ldr	r2, [pc, #360]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b58      	ldr	r3, [pc, #352]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d015      	beq.n	800381a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fd fa4d 	bl	8000c8c <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fa49 	bl	8000c8c <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0b1      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ee      	beq.n	80037f6 <HAL_RCC_OscConfig+0x37e>
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fa37 	bl	8000c8c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fa33 	bl	8000c8c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e09b      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	4b40      	ldr	r3, [pc, #256]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ee      	bne.n	8003822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b3c      	ldr	r3, [pc, #240]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4a3b      	ldr	r2, [pc, #236]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d061      	beq.n	8003930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d146      	bne.n	8003902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fa07 	bl	8000c8c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fa03 	bl	8000c8c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e06d      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	4921      	ldr	r1, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a19      	ldr	r1, [r3, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	430b      	orrs	r3, r1
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd f9d7 	bl	8000c8c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fd f9d3 	bl	8000c8c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03d      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x46a>
 8003900:	e035      	b.n	800396e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd f9c0 	bl	8000c8c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd f9bc 	bl	8000c8c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e026      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCC_OscConfig+0x4c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x498>
 800392e:	e01e      	b.n	800396e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e019      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
 8003944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x500>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	429a      	cmp	r2, r3
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0d0      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	4965      	ldr	r1, [pc, #404]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d040      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d115      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e073      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06b      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4936      	ldr	r1, [pc, #216]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd f90e 	bl	8000c8c <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fd f90a 	bl	8000c8c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e053      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d210      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4922      	ldr	r1, [pc, #136]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490a      	ldr	r1, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1cc>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1d0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd f86c 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	080085f8 	.word	0x080085f8
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000038 	.word	0x20000038

08003b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b490      	push	{r4, r7}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xac>)
 8003b58:	1d3c      	adds	r4, r7, #4
 8003b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b60:	f240 2301 	movw	r3, #513	; 0x201
 8003b64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b7a:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d002      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x40>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x46>
 8003b8e:	e02b      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b92:	623b      	str	r3, [r7, #32]
      break;
 8003b94:	e02b      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	0c9b      	lsrs	r3, r3, #18
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3328      	adds	r3, #40	; 0x28
 8003ba0:	443b      	add	r3, r7
 8003ba2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ba6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d012      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	0c5b      	lsrs	r3, r3, #17
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	3328      	adds	r3, #40	; 0x28
 8003bbe:	443b      	add	r3, r7
 8003bc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bca:	fb03 f202 	mul.w	r2, r3, r2
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e004      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	623b      	str	r3, [r7, #32]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bea:	623b      	str	r3, [r7, #32]
      break;
 8003bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc90      	pop	{r4, r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	080085ac 	.word	0x080085ac
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	003d0900 	.word	0x003d0900

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff2 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08008608 	.word	0x08008608

08003c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <RCC_Delay+0x34>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <RCC_Delay+0x38>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0a5b      	lsrs	r3, r3, #9
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c64:	bf00      	nop
  }
  while (Delay --);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	60fa      	str	r2, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f9      	bne.n	8003c64 <RCC_Delay+0x1c>
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	10624dd3 	.word	0x10624dd3

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d07d      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cba:	61d3      	str	r3, [r2, #28]
 8003cbc:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d118      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a42      	ldr	r2, [pc, #264]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce4:	f7fc ffd2 	bl	8000c8c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	e008      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cec:	f7fc ffce 	bl	8000c8c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e06d      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02e      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d027      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d28:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d3e:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d014      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fc ff9d 	bl	8000c8c <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fc ff99 	bl	8000c8c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e036      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4917      	ldr	r1, [pc, #92]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	490b      	ldr	r1, [pc, #44]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4904      	ldr	r1, [pc, #16]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42420440 	.word	0x42420440

08003df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003df0:	b084      	sub	sp, #16
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	f107 0014 	add.w	r0, r7, #20
 8003dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr

08003e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 0014 	add.w	r0, r7, #20
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	b004      	add	sp, #16
 8003ec6:	4770      	bx	lr

08003ec8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b09b      	sub	sp, #108	; 0x6c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	78db      	ldrb	r3, [r3, #3]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d81f      	bhi.n	8003f3a <USB_ActivateEndpoint+0x72>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <USB_ActivateEndpoint+0x38>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f43 	.word	0x08003f43
 8003f0c:	08003f1f 	.word	0x08003f1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f1c:	e012      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f2a:	e00b      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f38:	e004      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f40:	e000      	b.n	8003f44 <USB_ActivateEndpoint+0x7c>
      break;
 8003f42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7b1b      	ldrb	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8149 	bne.w	8004248 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8084 	beq.w	80040c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	88db      	ldrh	r3, [r3, #6]
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	81fb      	strh	r3, [r7, #14]
 8004002:	89fb      	ldrh	r3, [r7, #14]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01b      	beq.n	8004044 <USB_ActivateEndpoint+0x17c>
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	81bb      	strh	r3, [r7, #12]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	89bb      	ldrh	r3, [r7, #12]
 8004030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004040:	b29b      	uxth	r3, r3
 8004042:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	78db      	ldrb	r3, [r3, #3]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d020      	beq.n	800408e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004062:	813b      	strh	r3, [r7, #8]
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	f083 0320 	eor.w	r3, r3, #32
 800406a:	813b      	strh	r3, [r7, #8]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
 800408c:	e27f      	b.n	800458e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a4:	817b      	strh	r3, [r7, #10]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
 80040c6:	e262      	b.n	800458e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	4413      	add	r3, r2
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	011a      	lsls	r2, r3, #4
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	88db      	ldrh	r3, [r3, #6]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	4413      	add	r3, r2
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	011a      	lsls	r2, r3, #4
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	4413      	add	r3, r2
 800411a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d112      	bne.n	800414e <USB_ActivateEndpoint+0x286>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004132:	b29a      	uxth	r2, r3
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004146:	b29a      	uxth	r2, r3
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	e02f      	b.n	80041ae <USB_ActivateEndpoint+0x2e6>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b3e      	cmp	r3, #62	; 0x3e
 8004154:	d813      	bhi.n	800417e <USB_ActivateEndpoint+0x2b6>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	663b      	str	r3, [r7, #96]	; 0x60
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <USB_ActivateEndpoint+0x2a8>
 800416a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416c:	3301      	adds	r3, #1
 800416e:	663b      	str	r3, [r7, #96]	; 0x60
 8004170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004172:	b29b      	uxth	r3, r3
 8004174:	029b      	lsls	r3, r3, #10
 8004176:	b29a      	uxth	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	e017      	b.n	80041ae <USB_ActivateEndpoint+0x2e6>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <USB_ActivateEndpoint+0x2d0>
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	3b01      	subs	r3, #1
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
 8004198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419a:	b29b      	uxth	r3, r3
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	83fb      	strh	r3, [r7, #30]
 80041bc:	8bfb      	ldrh	r3, [r7, #30]
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <USB_ActivateEndpoint+0x336>
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	83bb      	strh	r3, [r7, #28]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	8bbb      	ldrh	r3, [r7, #28]
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	837b      	strh	r3, [r7, #26]
 8004216:	8b7b      	ldrh	r3, [r7, #26]
 8004218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800421c:	837b      	strh	r3, [r7, #26]
 800421e:	8b7b      	ldrh	r3, [r7, #26]
 8004220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004224:	837b      	strh	r3, [r7, #26]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8b7b      	ldrh	r3, [r7, #26]
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
 8004246:	e1a2      	b.n	800458e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	441a      	add	r2, r3
 800426c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004278:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	65bb      	str	r3, [r7, #88]	; 0x58
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004294:	4413      	add	r3, r2
 8004296:	65bb      	str	r3, [r7, #88]	; 0x58
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	011a      	lsls	r2, r3, #4
 800429e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a6:	657b      	str	r3, [r7, #84]	; 0x54
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	891b      	ldrh	r3, [r3, #8]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	4413      	add	r3, r2
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	011a      	lsls	r2, r3, #4
 80042d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	895b      	ldrh	r3, [r3, #10]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 8091 	bne.w	8004418 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <USB_ActivateEndpoint+0x47e>
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004324:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800433e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004342:	b29b      	uxth	r3, r3
 8004344:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	873b      	strh	r3, [r7, #56]	; 0x38
 8004354:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01b      	beq.n	8004396 <USB_ActivateEndpoint+0x4ce>
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f4:	867b      	strh	r3, [r7, #50]	; 0x32
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
 8004416:	e0ba      	b.n	800458e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004428:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800442c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01d      	beq.n	8004470 <USB_ActivateEndpoint+0x5a8>
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004480:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01d      	beq.n	80044c8 <USB_ActivateEndpoint+0x600>
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	78db      	ldrb	r3, [r3, #3]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d024      	beq.n	800451a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044ee:	f083 0320 	eor.w	r3, r3, #32
 80044f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
 8004518:	e01d      	b.n	8004556 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800458e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004592:	4618      	mov	r0, r3
 8004594:	376c      	adds	r7, #108	; 0x6c
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800459c:	b480      	push	{r7}
 800459e:	b08d      	sub	sp, #52	; 0x34
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	7b1b      	ldrb	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 808e 	bne.w	80046cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d044      	beq.n	8004642 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	81bb      	strh	r3, [r7, #12]
 80045c6:	89bb      	ldrh	r3, [r7, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <USB_DeactivateEndpoint+0x6c>
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	817b      	strh	r3, [r7, #10]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461e:	813b      	strh	r3, [r7, #8]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	893b      	ldrh	r3, [r7, #8]
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]
 8004640:	e192      	b.n	8004968 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	827b      	strh	r3, [r7, #18]
 8004650:	8a7b      	ldrh	r3, [r7, #18]
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01b      	beq.n	8004692 <USB_DeactivateEndpoint+0xf6>
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	823b      	strh	r3, [r7, #16]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	8a3b      	ldrh	r3, [r7, #16]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a8:	81fb      	strh	r3, [r7, #14]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	441a      	add	r2, r3
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	8013      	strh	r3, [r2, #0]
 80046ca:	e14d      	b.n	8004968 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 80a5 	bne.w	8004820 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	843b      	strh	r3, [r7, #32]
 80046e4:	8c3b      	ldrh	r3, [r7, #32]
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01b      	beq.n	8004726 <USB_DeactivateEndpoint+0x18a>
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	83fb      	strh	r3, [r7, #30]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	b29b      	uxth	r3, r3
 8004724:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	83bb      	strh	r3, [r7, #28]
 8004734:	8bbb      	ldrh	r3, [r7, #28]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01b      	beq.n	8004776 <USB_DeactivateEndpoint+0x1da>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	837b      	strh	r3, [r7, #26]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	8b7b      	ldrh	r3, [r7, #26]
 8004762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004772:	b29b      	uxth	r3, r3
 8004774:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	833b      	strh	r3, [r7, #24]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	8b3b      	ldrh	r3, [r7, #24]
 800479a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	82fb      	strh	r3, [r7, #22]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8afb      	ldrh	r3, [r7, #22]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	82bb      	strh	r3, [r7, #20]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8abb      	ldrh	r3, [r7, #20]
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
 800481e:	e0a3      	b.n	8004968 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800482e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <USB_DeactivateEndpoint+0x2d4>
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800487e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <USB_DeactivateEndpoint+0x324>
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	853b      	strh	r3, [r7, #40]	; 0x28
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	847b      	strh	r3, [r7, #34]	; 0x22
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3734      	adds	r7, #52	; 0x34
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b0cc      	sub	sp, #304	; 0x130
 8004978:	af00      	add	r7, sp, #0
 800497a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004982:	6018      	str	r0, [r3, #0]
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800498e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f041 817d 	bne.w	8005c9a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d908      	bls.n	80049ce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80049bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80049cc:	e007      	b.n	80049de <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80049ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	7b1b      	ldrb	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d152      	bne.n	8004a94 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	88da      	ldrh	r2, [r3, #6]
 8004a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a14:	6800      	ldr	r0, [r0, #0]
 8004a16:	f001 ff23 	bl	8006860 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a4c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	440a      	add	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	011a      	lsls	r2, r3, #4
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	f001 b8b5 	b.w	8005bfe <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f040 84c6 	bne.w	8005432 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	f240 8443 	bls.w	800534a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 823e 	beq.w	8004fe2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 809a 	bne.w	8004cc0 <USB_EPStartXfer+0x34c>
 8004b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bbe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	011a      	lsls	r2, r3, #4
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d122      	bne.n	8004c3e <USB_EPStartXfer+0x2ca>
 8004bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e079      	b.n	8004d32 <USB_EPStartXfer+0x3be>
 8004c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c42:	2b3e      	cmp	r3, #62	; 0x3e
 8004c44:	d81b      	bhi.n	8004c7e <USB_EPStartXfer+0x30a>
 8004c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <USB_EPStartXfer+0x2f2>
 8004c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c60:	3301      	adds	r3, #1
 8004c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e059      	b.n	8004d32 <USB_EPStartXfer+0x3be>
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <USB_EPStartXfer+0x32a>
 8004c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	e038      	b.n	8004d32 <USB_EPStartXfer+0x3be>
 8004cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d130      	bne.n	8004d32 <USB_EPStartXfer+0x3be>
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	011a      	lsls	r2, r3, #4
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6959      	ldr	r1, [r3, #20]
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d60:	6800      	ldr	r0, [r0, #0]
 8004d62:	f001 fd7d 	bl	8006860 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d76:	441a      	add	r2, r3
 8004d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d90f      	bls.n	8004dc0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	621a      	str	r2, [r3, #32]
 8004dbe:	e00e      	b.n	8004dde <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 809a 	bne.w	8004f24 <USB_EPStartXfer+0x5b0>
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004df8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dfc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e22:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	440a      	add	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d122      	bne.n	8004ea2 <USB_EPStartXfer+0x52e>
 8004e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e083      	b.n	8004faa <USB_EPStartXfer+0x636>
 8004ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea8:	d81b      	bhi.n	8004ee2 <USB_EPStartXfer+0x56e>
 8004eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <USB_EPStartXfer+0x556>
 8004ec0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	e063      	b.n	8004faa <USB_EPStartXfer+0x636>
 8004ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <USB_EPStartXfer+0x58e>
 8004ef8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004efc:	3b01      	subs	r3, #1
 8004efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	e042      	b.n	8004faa <USB_EPStartXfer+0x636>
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d13a      	bne.n	8004faa <USB_EPStartXfer+0x636>
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f66:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	891b      	ldrh	r3, [r3, #8]
 8004fb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6959      	ldr	r1, [r3, #20]
 8004fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fd8:	6800      	ldr	r0, [r0, #0]
 8004fda:	f001 fc41 	bl	8006860 <USB_WritePMA>
 8004fde:	f000 be0e 	b.w	8005bfe <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d16d      	bne.n	80050ce <USB_EPStartXfer+0x75a>
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500c:	b29b      	uxth	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	4413      	add	r3, r2
 8005014:	64bb      	str	r3, [r7, #72]	; 0x48
 8005016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	011a      	lsls	r2, r3, #4
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	4413      	add	r3, r2
 8005028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800502c:	647b      	str	r3, [r7, #68]	; 0x44
 800502e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d112      	bne.n	800505c <USB_EPStartXfer+0x6e8>
 8005036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005040:	b29a      	uxth	r2, r3
 8005042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e063      	b.n	8005124 <USB_EPStartXfer+0x7b0>
 800505c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005060:	2b3e      	cmp	r3, #62	; 0x3e
 8005062:	d817      	bhi.n	8005094 <USB_EPStartXfer+0x720>
 8005064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800506e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <USB_EPStartXfer+0x710>
 800507a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800507e:	3301      	adds	r3, #1
 8005080:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005084:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005088:	b29b      	uxth	r3, r3
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	b29a      	uxth	r2, r3
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e047      	b.n	8005124 <USB_EPStartXfer+0x7b0>
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <USB_EPStartXfer+0x740>
 80050aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050ae:	3b01      	subs	r3, #1
 80050b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	029b      	lsls	r3, r3, #10
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e02a      	b.n	8005124 <USB_EPStartXfer+0x7b0>
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d122      	bne.n	8005124 <USB_EPStartXfer+0x7b0>
 80050de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	653b      	str	r3, [r7, #80]	; 0x50
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fe:	4413      	add	r3, r2
 8005100:	653b      	str	r3, [r7, #80]	; 0x50
 8005102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	011a      	lsls	r2, r3, #4
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	4413      	add	r3, r2
 8005114:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	b29a      	uxth	r2, r3
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005122:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	891b      	ldrh	r3, [r3, #8]
 8005130:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6959      	ldr	r1, [r3, #20]
 8005140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005144:	b29b      	uxth	r3, r3
 8005146:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800514a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800514e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005152:	6800      	ldr	r0, [r0, #0]
 8005154:	f001 fb84 	bl	8006860 <USB_WritePMA>
            ep->xfer_buff += len;
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	441a      	add	r2, r3
 800516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	d90f      	bls.n	80051b2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	621a      	str	r2, [r3, #32]
 80051b0:	e00e      	b.n	80051d0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2200      	movs	r2, #0
 80051ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d16d      	bne.n	80052c8 <USB_EPStartXfer+0x954>
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	4413      	add	r3, r2
 800520e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	4413      	add	r3, r2
 8005222:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d112      	bne.n	8005256 <USB_EPStartXfer+0x8e2>
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800523a:	b29a      	uxth	r2, r3
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	e05d      	b.n	8005312 <USB_EPStartXfer+0x99e>
 8005256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525a:	2b3e      	cmp	r3, #62	; 0x3e
 800525c:	d817      	bhi.n	800528e <USB_EPStartXfer+0x91a>
 800525e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <USB_EPStartXfer+0x90a>
 8005274:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005278:	3301      	adds	r3, #1
 800527a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29a      	uxth	r2, r3
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e041      	b.n	8005312 <USB_EPStartXfer+0x99e>
 800528e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <USB_EPStartXfer+0x93a>
 80052a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052a8:	3b01      	subs	r3, #1
 80052aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e024      	b.n	8005312 <USB_EPStartXfer+0x99e>
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d11c      	bne.n	8005312 <USB_EPStartXfer+0x99e>
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	4413      	add	r3, r2
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
 80052f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	011a      	lsls	r2, r3, #4
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	4413      	add	r3, r2
 8005302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	b29a      	uxth	r2, r3
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	895b      	ldrh	r3, [r3, #10]
 800531e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	b29b      	uxth	r3, r3
 8005334:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005338:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800533c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005340:	6800      	ldr	r0, [r0, #0]
 8005342:	f001 fa8d 	bl	8006860 <USB_WritePMA>
 8005346:	f000 bc5a 	b.w	8005bfe <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	4413      	add	r3, r2
 80053d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	891b      	ldrh	r3, [r3, #8]
 8005408:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800540c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6959      	ldr	r1, [r3, #20]
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	b29b      	uxth	r3, r3
 800541e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005422:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005426:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	f001 fa18 	bl	8006860 <USB_WritePMA>
 8005430:	e3e5      	b.n	8005bfe <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800548e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 81bc 	beq.w	800584c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d16d      	bne.n	80055ce <USB_EPStartXfer+0xc5a>
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550c:	b29b      	uxth	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005512:	4413      	add	r3, r2
 8005514:	67bb      	str	r3, [r7, #120]	; 0x78
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	011a      	lsls	r2, r3, #4
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	4413      	add	r3, r2
 8005528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800552c:	677b      	str	r3, [r7, #116]	; 0x74
 800552e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d112      	bne.n	800555c <USB_EPStartXfer+0xbe8>
 8005536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005540:	b29a      	uxth	r2, r3
 8005542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005554:	b29a      	uxth	r2, r3
 8005556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	e060      	b.n	800561e <USB_EPStartXfer+0xcaa>
 800555c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005560:	2b3e      	cmp	r3, #62	; 0x3e
 8005562:	d817      	bhi.n	8005594 <USB_EPStartXfer+0xc20>
 8005564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800556e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <USB_EPStartXfer+0xc10>
 800557a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800557e:	3301      	adds	r3, #1
 8005580:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005584:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005588:	b29b      	uxth	r3, r3
 800558a:	029b      	lsls	r3, r3, #10
 800558c:	b29a      	uxth	r2, r3
 800558e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e044      	b.n	800561e <USB_EPStartXfer+0xcaa>
 8005594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <USB_EPStartXfer+0xc40>
 80055aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	029b      	lsls	r3, r3, #10
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e027      	b.n	800561e <USB_EPStartXfer+0xcaa>
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d11f      	bne.n	800561e <USB_EPStartXfer+0xcaa>
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f4:	4413      	add	r3, r2
 80055f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800560c:	4413      	add	r3, r2
 800560e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005618:	b29a      	uxth	r2, r3
 800561a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800561c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	895b      	ldrh	r3, [r3, #10]
 800562a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563e:	b29b      	uxth	r3, r3
 8005640:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005644:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005648:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f001 f907 	bl	8006860 <USB_WritePMA>
          ep->xfer_buff += len;
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005662:	441a      	add	r2, r3
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d90f      	bls.n	80056ac <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569c:	1ad2      	subs	r2, r2, r3
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	621a      	str	r2, [r3, #32]
 80056aa:	e00e      	b.n	80056ca <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80056ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80056ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8295 	beq.w	8005bfe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d16d      	bne.n	80057c0 <USB_EPStartXfer+0xe4c>
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005704:	4413      	add	r3, r2
 8005706:	66bb      	str	r3, [r7, #104]	; 0x68
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	011a      	lsls	r2, r3, #4
 8005716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005718:	4413      	add	r3, r2
 800571a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800571e:	667b      	str	r3, [r7, #100]	; 0x64
 8005720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d112      	bne.n	800574e <USB_EPStartXfer+0xdda>
 8005728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005732:	b29a      	uxth	r2, r3
 8005734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005746:	b29a      	uxth	r2, r3
 8005748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	e063      	b.n	8005816 <USB_EPStartXfer+0xea2>
 800574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005752:	2b3e      	cmp	r3, #62	; 0x3e
 8005754:	d817      	bhi.n	8005786 <USB_EPStartXfer+0xe12>
 8005756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <USB_EPStartXfer+0xe02>
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005770:	3301      	adds	r3, #1
 8005772:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577a:	b29b      	uxth	r3, r3
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	b29a      	uxth	r2, r3
 8005780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e047      	b.n	8005816 <USB_EPStartXfer+0xea2>
 8005786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <USB_EPStartXfer+0xe32>
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	3b01      	subs	r3, #1
 80057a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	029b      	lsls	r3, r3, #10
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e02a      	b.n	8005816 <USB_EPStartXfer+0xea2>
 80057c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d122      	bne.n	8005816 <USB_EPStartXfer+0xea2>
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	673b      	str	r3, [r7, #112]	; 0x70
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f0:	4413      	add	r3, r2
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005804:	4413      	add	r3, r2
 8005806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800580a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	b29a      	uxth	r2, r3
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	891b      	ldrh	r3, [r3, #8]
 8005822:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6959      	ldr	r1, [r3, #20]
 8005832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005836:	b29b      	uxth	r3, r3
 8005838:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800583c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005840:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005844:	6800      	ldr	r0, [r0, #0]
 8005846:	f001 f80b 	bl	8006860 <USB_WritePMA>
 800584a:	e1d8      	b.n	8005bfe <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d178      	bne.n	800594e <USB_EPStartXfer+0xfda>
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005880:	4413      	add	r3, r2
 8005882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	011a      	lsls	r2, r3, #4
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005898:	4413      	add	r3, r2
 800589a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800589e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d116      	bne.n	80058d8 <USB_EPStartXfer+0xf64>
 80058aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e06b      	b.n	80059b0 <USB_EPStartXfer+0x103c>
 80058d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058dc:	2b3e      	cmp	r3, #62	; 0x3e
 80058de:	d818      	bhi.n	8005912 <USB_EPStartXfer+0xf9e>
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <USB_EPStartXfer+0xf8c>
 80058f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058fa:	3301      	adds	r3, #1
 80058fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005900:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005904:	b29b      	uxth	r3, r3
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e04e      	b.n	80059b0 <USB_EPStartXfer+0x103c>
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2b00      	cmp	r3, #0
 8005926:	d104      	bne.n	8005932 <USB_EPStartXfer+0xfbe>
 8005928:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800592c:	3b01      	subs	r3, #1
 800592e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005932:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005936:	b29b      	uxth	r3, r3
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	b29b      	uxth	r3, r3
 800593c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005944:	b29a      	uxth	r2, r3
 8005946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e030      	b.n	80059b0 <USB_EPStartXfer+0x103c>
 800594e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d128      	bne.n	80059b0 <USB_EPStartXfer+0x103c>
 800595e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005982:	4413      	add	r3, r2
 8005984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800599a:	4413      	add	r3, r2
 800599c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	891b      	ldrh	r3, [r3, #8]
 80059bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6959      	ldr	r1, [r3, #20]
 80059cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059de:	6800      	ldr	r0, [r0, #0]
 80059e0:	f000 ff3e 	bl	8006860 <USB_WritePMA>
          ep->xfer_buff += len;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	441a      	add	r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d90f      	bls.n	8005a3e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	621a      	str	r2, [r3, #32]
 8005a3c:	e00e      	b.n	8005a5c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80cc 	beq.w	8005bfe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d178      	bne.n	8005b76 <USB_EPStartXfer+0x1202>
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d116      	bne.n	8005b00 <USB_EPStartXfer+0x118c>
 8005ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e064      	b.n	8005bca <USB_EPStartXfer+0x1256>
 8005b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b04:	2b3e      	cmp	r3, #62	; 0x3e
 8005b06:	d818      	bhi.n	8005b3a <USB_EPStartXfer+0x11c6>
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <USB_EPStartXfer+0x11b4>
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	3301      	adds	r3, #1
 8005b24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	029b      	lsls	r3, r3, #10
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e047      	b.n	8005bca <USB_EPStartXfer+0x1256>
 8005b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <USB_EPStartXfer+0x11e6>
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	3b01      	subs	r3, #1
 8005b56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	e029      	b.n	8005bca <USB_EPStartXfer+0x1256>
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d121      	bne.n	8005bca <USB_EPStartXfer+0x1256>
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	011a      	lsls	r2, r3, #4
 8005bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bf0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bf4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bf8:	6800      	ldr	r0, [r0, #0]
 8005bfa:	f000 fe31 	bl	8006860 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c20:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c3a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	f082 0210 	eor.w	r2, r2, #16
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c52:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c56:	8812      	ldrh	r2, [r2, #0]
 8005c58:	f082 0220 	eor.w	r2, r2, #32
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]
 8005c96:	f000 bc9f 	b.w	80065d8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	7b1b      	ldrb	r3, [r3, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 80ae 	bne.w	8005e08 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d917      	bls.n	8005cf8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce8:	1ad2      	subs	r2, r2, r3
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	619a      	str	r2, [r3, #24]
 8005cf6:	e00e      	b.n	8005d16 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <USB_EPStartXfer+0x141e>
 8005d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e3e8      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
 8005d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d96:	2b3e      	cmp	r3, #62	; 0x3e
 8005d98:	d818      	bhi.n	8005dcc <USB_EPStartXfer+0x1458>
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <USB_EPStartXfer+0x1446>
 8005db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db4:	3301      	adds	r3, #1
 8005db6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc8:	801a      	strh	r2, [r3, #0]
 8005dca:	e3cb      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <USB_EPStartXfer+0x1478>
 8005de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de6:	3b01      	subs	r3, #1
 8005de8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	e3ad      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	f040 8200 	bne.w	800621a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 8091 	bne.w	8005f4e <USB_EPStartXfer+0x15da>
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e50:	4413      	add	r3, r2
 8005e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	011a      	lsls	r2, r3, #4
 8005e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d116      	bne.n	8005eb0 <USB_EPStartXfer+0x153c>
 8005e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e083      	b.n	8005fb8 <USB_EPStartXfer+0x1644>
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ebe:	d820      	bhi.n	8005f02 <USB_EPStartXfer+0x158e>
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <USB_EPStartXfer+0x157c>
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	3301      	adds	r3, #1
 8005eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e05a      	b.n	8005fb8 <USB_EPStartXfer+0x1644>
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <USB_EPStartXfer+0x15be>
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	e034      	b.n	8005fb8 <USB_EPStartXfer+0x1644>
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d12c      	bne.n	8005fb8 <USB_EPStartXfer+0x1644>
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8091 	bne.w	80060fa <USB_EPStartXfer+0x1786>
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	011a      	lsls	r2, r3, #4
 8006010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006014:	4413      	add	r3, r2
 8006016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d116      	bne.n	800605c <USB_EPStartXfer+0x16e8>
 800602e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e07c      	b.n	8006156 <USB_EPStartXfer+0x17e2>
 800605c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b3e      	cmp	r3, #62	; 0x3e
 800606a:	d820      	bhi.n	80060ae <USB_EPStartXfer+0x173a>
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800607e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USB_EPStartXfer+0x1728>
 8006092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006096:	3301      	adds	r3, #1
 8006098:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800609c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e053      	b.n	8006156 <USB_EPStartXfer+0x17e2>
 80060ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <USB_EPStartXfer+0x176a>
 80060d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060d8:	3b01      	subs	r3, #1
 80060da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e02d      	b.n	8006156 <USB_EPStartXfer+0x17e2>
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d125      	bne.n	8006156 <USB_EPStartXfer+0x17e2>
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006120:	4413      	add	r3, r2
 8006122:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006138:	4413      	add	r3, r2
 800613a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800613e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	b29a      	uxth	r2, r3
 8006150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006154:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 81fe 	beq.w	8006564 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006188:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800618c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <USB_EPStartXfer+0x182c>
 8006194:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10d      	bne.n	80061bc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 81db 	bne.w	8006564 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 81d4 	bne.w	8006564 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80061bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006210:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006214:	b29b      	uxth	r3, r3
 8006216:	8013      	strh	r3, [r2, #0]
 8006218:	e1a4      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b01      	cmp	r3, #1
 8006228:	f040 819a 	bne.w	8006560 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	429a      	cmp	r2, r3
 8006246:	d917      	bls.n	8006278 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	619a      	str	r2, [r3, #24]
 8006276:	e00e      	b.n	8006296 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d178      	bne.n	8006398 <USB_EPStartXfer+0x1a24>
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062ca:	4413      	add	r3, r2
 80062cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	011a      	lsls	r2, r3, #4
 80062de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d116      	bne.n	8006322 <USB_EPStartXfer+0x19ae>
 80062f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	e06b      	b.n	80063fa <USB_EPStartXfer+0x1a86>
 8006322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006326:	2b3e      	cmp	r3, #62	; 0x3e
 8006328:	d818      	bhi.n	800635c <USB_EPStartXfer+0x19e8>
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <USB_EPStartXfer+0x19d6>
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006344:	3301      	adds	r3, #1
 8006346:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800634a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	e04e      	b.n	80063fa <USB_EPStartXfer+0x1a86>
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <USB_EPStartXfer+0x1a08>
 8006372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006376:	3b01      	subs	r3, #1
 8006378:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800637c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006380:	b29b      	uxth	r3, r3
 8006382:	029b      	lsls	r3, r3, #10
 8006384:	b29b      	uxth	r3, r3
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e030      	b.n	80063fa <USB_EPStartXfer+0x1a86>
 8006398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d128      	bne.n	80063fa <USB_EPStartXfer+0x1a86>
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	4413      	add	r3, r2
 80063ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	011a      	lsls	r2, r3, #4
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d178      	bne.n	800650a <USB_EPStartXfer+0x1b96>
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	011a      	lsls	r2, r3, #4
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006454:	4413      	add	r3, r2
 8006456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800645a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d116      	bne.n	8006494 <USB_EPStartXfer+0x1b20>
 8006466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e067      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
 8006494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006498:	2b3e      	cmp	r3, #62	; 0x3e
 800649a:	d818      	bhi.n	80064ce <USB_EPStartXfer+0x1b5a>
 800649c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <USB_EPStartXfer+0x1b48>
 80064b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064b6:	3301      	adds	r3, #1
 80064b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e04a      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
 80064ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USB_EPStartXfer+0x1b7a>
 80064e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e02c      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d124      	bne.n	8006564 <USB_EPStartXfer+0x1bf0>
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006528:	b29b      	uxth	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	4413      	add	r3, r2
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	4413      	add	r3, r2
 800654a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800654e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e001      	b.n	8006564 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e03a      	b.n	80065da <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800658e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006592:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006596:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800659a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800659e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660c:	81bb      	strh	r3, [r7, #12]
 800660e:	89bb      	ldrh	r3, [r7, #12]
 8006610:	f083 0310 	eor.w	r3, r3, #16
 8006614:	81bb      	strh	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	89bb      	ldrh	r3, [r7, #12]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
 8006636:	e01f      	b.n	8006678 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	81fb      	strh	r3, [r7, #14]
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006656:	81fb      	strh	r3, [r7, #14]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	7b1b      	ldrb	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 809d 	bne.w	80067d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d04c      	beq.n	800673a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	823b      	strh	r3, [r7, #16]
 80066ae:	8a3b      	ldrh	r3, [r7, #16]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <USB_EPClearStall+0x6c>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	81fb      	strh	r3, [r7, #14]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	89fb      	ldrh	r3, [r7, #14]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d06c      	beq.n	80067d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	81bb      	strh	r3, [r7, #12]
 8006710:	89bb      	ldrh	r3, [r7, #12]
 8006712:	f083 0320 	eor.w	r3, r3, #32
 8006716:	81bb      	strh	r3, [r7, #12]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	89bb      	ldrh	r3, [r7, #12]
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
 8006738:	e04b      	b.n	80067d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	82fb      	strh	r3, [r7, #22]
 8006748:	8afb      	ldrh	r3, [r7, #22]
 800674a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <USB_EPClearStall+0x106>
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	82bb      	strh	r3, [r7, #20]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	441a      	add	r2, r3
 8006774:	8abb      	ldrh	r3, [r7, #20]
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a0:	827b      	strh	r3, [r7, #18]
 80067a2:	8a7b      	ldrh	r3, [r7, #18]
 80067a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a8:	827b      	strh	r3, [r7, #18]
 80067aa:	8a7b      	ldrh	r3, [r7, #18]
 80067ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b0:	827b      	strh	r3, [r7, #18]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d103      	bne.n	80067f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2280      	movs	r2, #128	; 0x80
 80067f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800683a:	b29b      	uxth	r3, r3
 800683c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006860:	b480      	push	{r7}
 8006862:	b08d      	sub	sp, #52	; 0x34
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	460b      	mov	r3, r1
 8006870:	80fb      	strh	r3, [r7, #6]
 8006872:	4613      	mov	r3, r2
 8006874:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006876:	88bb      	ldrh	r3, [r7, #4]
 8006878:	3301      	adds	r3, #1
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	005a      	lsls	r2, r3, #1
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	e01e      	b.n	80068d8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	3301      	adds	r3, #1
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	3302      	adds	r3, #2
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	3302      	adds	r3, #2
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	3b01      	subs	r3, #1
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1dd      	bne.n	800689a <USB_WritePMA+0x3a>
  }
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	3734      	adds	r7, #52	; 0x34
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b08b      	sub	sp, #44	; 0x2c
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	4611      	mov	r1, r2
 80068f6:	461a      	mov	r2, r3
 80068f8:	460b      	mov	r3, r1
 80068fa:	80fb      	strh	r3, [r7, #6]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006900:	88bb      	ldrh	r3, [r7, #4]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	005a      	lsls	r2, r3, #1
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
 8006922:	e01b      	b.n	800695c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	3302      	adds	r3, #2
 8006930:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	3301      	adds	r3, #1
 800693e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b2da      	uxtb	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	3302      	adds	r3, #2
 8006954:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	3b01      	subs	r3, #1
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e0      	bne.n	8006924 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006962:	88bb      	ldrh	r3, [r7, #4]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	701a      	strb	r2, [r3, #0]
  }
}
 800697e:	bf00      	nop
 8006980:	372c      	adds	r7, #44	; 0x2c
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006994:	2304      	movs	r3, #4
 8006996:	2203      	movs	r2, #3
 8006998:	2181      	movs	r1, #129	; 0x81
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fc61 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80069a6:	2010      	movs	r0, #16
 80069a8:	f001 fd70 	bl	800848c <USBD_static_malloc>
 80069ac:	4602      	mov	r2, r0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80069be:	2302      	movs	r3, #2
 80069c0:	e005      	b.n	80069ce <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c8:	2200      	movs	r2, #0
 80069ca:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80069e2:	2181      	movs	r1, #129	; 0x81
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fc62 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 fd4f 	bl	80084a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d045      	beq.n	8006ad2 <USBD_HID_Setup+0xba>
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	f040 80d3 	bne.w	8006bf2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	3b02      	subs	r3, #2
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d835      	bhi.n	8006ac2 <USBD_HID_Setup+0xaa>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <USBD_HID_Setup+0x44>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006ab3 	.word	0x08006ab3
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006ac3 	.word	0x08006ac3
 8006a68:	08006ac3 	.word	0x08006ac3
 8006a6c:	08006ac3 	.word	0x08006ac3
 8006a70:	08006ac3 	.word	0x08006ac3
 8006a74:	08006ac3 	.word	0x08006ac3
 8006a78:	08006ac3 	.word	0x08006ac3
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006a85 	.word	0x08006a85
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	885b      	ldrh	r3, [r3, #2]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	601a      	str	r2, [r3, #0]
          break;
 8006a90:	e01e      	b.n	8006ad0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2201      	movs	r2, #1
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f922 	bl	8007ce2 <USBD_CtlSendData>
          break;
 8006a9e:	e017      	b.n	8006ad0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]
          break;
 8006ab0:	e00e      	b.n	8006ad0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 f911 	bl	8007ce2 <USBD_CtlSendData>
          break;
 8006ac0:	e006      	b.n	8006ad0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f8a2 	bl	8007c0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	bf00      	nop
      }
      break;
 8006ad0:	e096      	b.n	8006c00 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b0b      	cmp	r3, #11
 8006ad8:	f200 8083 	bhi.w	8006be2 <USBD_HID_Setup+0x1ca>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <USBD_HID_Setup+0xcc>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b15 	.word	0x08006b15
 8006ae8:	08006be3 	.word	0x08006be3
 8006aec:	08006be3 	.word	0x08006be3
 8006af0:	08006be3 	.word	0x08006be3
 8006af4:	08006be3 	.word	0x08006be3
 8006af8:	08006be3 	.word	0x08006be3
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006be3 	.word	0x08006be3
 8006b04:	08006be3 	.word	0x08006be3
 8006b08:	08006be3 	.word	0x08006be3
 8006b0c:	08006b95 	.word	0x08006b95
 8006b10:	08006bbd 	.word	0x08006bbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d107      	bne.n	8006b2e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b1e:	f107 030e 	add.w	r3, r7, #14
 8006b22:	2202      	movs	r2, #2
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f8db 	bl	8007ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b2c:	e060      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f86c 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b36:	2302      	movs	r3, #2
 8006b38:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3a:	e059      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	885b      	ldrh	r3, [r3, #2]
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b22      	cmp	r3, #34	; 0x22
 8006b46:	d108      	bne.n	8006b5a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	88db      	ldrh	r3, [r3, #6]
 8006b4c:	2b4a      	cmp	r3, #74	; 0x4a
 8006b4e:	bf28      	it	cs
 8006b50:	234a      	movcs	r3, #74	; 0x4a
 8006b52:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <USBD_HID_Setup+0x1f4>)
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e015      	b.n	8006b86 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b21      	cmp	r3, #33	; 0x21
 8006b64:	d108      	bne.n	8006b78 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <USBD_HID_Setup+0x1f8>)
 8006b68:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	bf28      	it	cs
 8006b72:	2309      	movcs	r3, #9
 8006b74:	83fb      	strh	r3, [r7, #30]
 8006b76:	e006      	b.n	8006b86 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f847 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b80:	2302      	movs	r3, #2
 8006b82:	75fb      	strb	r3, [r7, #23]
            break;
 8006b84:	e034      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006b86:	8bfb      	ldrh	r3, [r7, #30]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	69b9      	ldr	r1, [r7, #24]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f8a8 	bl	8007ce2 <USBD_CtlSendData>
          break;
 8006b92:	e02d      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d107      	bne.n	8006bae <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f89b 	bl	8007ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bac:	e020      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f82c 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bba:	e019      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d106      	bne.n	8006bd4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bd2:	e00d      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f819 	bl	8007c0e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	75fb      	strb	r3, [r7, #23]
          break;
 8006be0:	e006      	b.n	8006bf0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f812 	bl	8007c0e <USBD_CtlError>
          ret = USBD_FAIL;
 8006bea:	2302      	movs	r3, #2
 8006bec:	75fb      	strb	r3, [r7, #23]
          break;
 8006bee:	bf00      	nop
      }
      break;
 8006bf0:	e006      	b.n	8006c00 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f80a 	bl	8007c0e <USBD_CtlError>
      ret = USBD_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfe:	bf00      	nop
  }

  return ret;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200000fc 	.word	0x200000fc
 8006c10:	200000e4 	.word	0x200000e4

08006c14 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2222      	movs	r2, #34	; 0x22
 8006c20:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006c22:	4b03      	ldr	r3, [pc, #12]	; (8006c30 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000078 	.word	0x20000078

08006c34 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2222      	movs	r2, #34	; 0x22
 8006c40:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006c42:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	2000009c 	.word	0x2000009c

08006c54 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2222      	movs	r2, #34	; 0x22
 8006c60:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006c62:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	200000c0 	.word	0x200000c0

08006c74 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	2200      	movs	r2, #0
 8006c88:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
	...

08006c98 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	200000f0 	.word	0x200000f0

08006cb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e01a      	b.n	8006d06 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	79fa      	ldrb	r2, [r7, #7]
 8006cfc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f001 fa4c 	bl	800819c <USBD_LL_Init>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e001      	b.n	8006d34 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fa6f 	bl	800822c <USBD_LL_Start>

  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr

08006d6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	4611      	mov	r1, r2
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3

  return USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fed7 	bl	8007b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d016      	beq.n	8006e3a <USBD_LL_SetupStage+0x6a>
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d81c      	bhi.n	8006e4a <USBD_LL_SetupStage+0x7a>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <USBD_LL_SetupStage+0x4a>
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d008      	beq.n	8006e2a <USBD_LL_SetupStage+0x5a>
 8006e18:	e017      	b.n	8006e4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f9ca 	bl	80071bc <USBD_StdDevReq>
      break;
 8006e28:	e01a      	b.n	8006e60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa2c 	bl	8007290 <USBD_StdItfReq>
      break;
 8006e38:	e012      	b.n	8006e60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa6c 	bl	8007320 <USBD_StdEPReq>
      break;
 8006e48:	e00a      	b.n	8006e60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fa47 	bl	80082ec <USBD_LL_StallEP>
      break;
 8006e5e:	bf00      	nop
  }

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	460b      	mov	r3, r1
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d14b      	bne.n	8006f16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d134      	bne.n	8006efa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d919      	bls.n	8006ed0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d203      	bcs.n	8006ebe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	e002      	b.n	8006ec4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 ff38 	bl	8007d3e <USBD_CtlContinueRx>
 8006ece:	e038      	b.n	8006f42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d105      	bne.n	8006ef2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 ff35 	bl	8007d62 <USBD_CtlSendStatus>
 8006ef8:	e023      	b.n	8006f42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d11e      	bne.n	8006f42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f001 f9ec 	bl	80082ec <USBD_LL_StallEP>
 8006f14:	e015      	b.n	8006f42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d108      	bne.n	8006f3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	7afa      	ldrb	r2, [r7, #11]
 8006f36:	4611      	mov	r1, r2
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	4798      	blx	r3
 8006f3c:	e001      	b.n	8006f42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e000      	b.n	8006f44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	460b      	mov	r3, r1
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d17f      	bne.n	8007060 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3314      	adds	r3, #20
 8006f64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d15c      	bne.n	800702a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d915      	bls.n	8006fa8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fec0 	bl	8007d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fa4f 	bl	8008444 <USBD_LL_PrepareReceive>
 8006fa6:	e04e      	b.n	8007046 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	6912      	ldr	r2, [r2, #16]
 8006fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb4:	fb01 f202 	mul.w	r2, r1, r2
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d11c      	bne.n	8006ff8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d316      	bcc.n	8006ff8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d20f      	bcs.n	8006ff8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2100      	movs	r1, #0
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fe9c 	bl	8007d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fa27 	bl	8008444 <USBD_LL_PrepareReceive>
 8006ff6:	e026      	b.n	8007046 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800700a:	2b03      	cmp	r3, #3
 800700c:	d105      	bne.n	800701a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 f965 	bl	80082ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 feb0 	bl	8007d88 <USBD_CtlReceiveStatus>
 8007028:	e00d      	b.n	8007046 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007030:	2b04      	cmp	r3, #4
 8007032:	d004      	beq.n	800703e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 f953 	bl	80082ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800704c:	2b01      	cmp	r3, #1
 800704e:	d11d      	bne.n	800708c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff fe81 	bl	8006d58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800705e:	e015      	b.n	800708c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007072:	2b03      	cmp	r3, #3
 8007074:	d108      	bne.n	8007088 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	7afa      	ldrb	r2, [r7, #11]
 8007080:	4611      	mov	r1, r2
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	4798      	blx	r3
 8007086:	e001      	b.n	800708c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	e000      	b.n	800708e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800709e:	2340      	movs	r3, #64	; 0x40
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f8dc 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	2200      	movs	r2, #0
 80070be:	2180      	movs	r1, #128	; 0x80
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f8ce 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2240      	movs	r2, #64	; 0x40
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6852      	ldr	r2, [r2, #4]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
  }

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr

08007136 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2204      	movs	r2, #4
 800714e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716c:	2b04      	cmp	r3, #4
 800716e:	d105      	bne.n	800717c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr

08007188 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007196:	2b03      	cmp	r3, #3
 8007198:	d10b      	bne.n	80071b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d005      	beq.n	80071e2 <USBD_StdDevReq+0x26>
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d84f      	bhi.n	800727a <USBD_StdDevReq+0xbe>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <USBD_StdDevReq+0x36>
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d14b      	bne.n	800727a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
      break;
 80071f0:	e048      	b.n	8007284 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	2b09      	cmp	r3, #9
 80071f8:	d839      	bhi.n	800726e <USBD_StdDevReq+0xb2>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USBD_StdDevReq+0x44>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007251 	.word	0x08007251
 8007204:	08007265 	.word	0x08007265
 8007208:	0800726f 	.word	0x0800726f
 800720c:	0800725b 	.word	0x0800725b
 8007210:	0800726f 	.word	0x0800726f
 8007214:	08007233 	.word	0x08007233
 8007218:	08007229 	.word	0x08007229
 800721c:	0800726f 	.word	0x0800726f
 8007220:	08007247 	.word	0x08007247
 8007224:	0800723d 	.word	0x0800723d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9dc 	bl	80075e8 <USBD_GetDescriptor>
          break;
 8007230:	e022      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb3f 	bl	80078b8 <USBD_SetAddress>
          break;
 800723a:	e01d      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb7e 	bl	8007940 <USBD_SetConfig>
          break;
 8007244:	e018      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc07 	bl	8007a5c <USBD_GetConfig>
          break;
 800724e:	e013      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc37 	bl	8007ac6 <USBD_GetStatus>
          break;
 8007258:	e00e      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc65 	bl	8007b2c <USBD_SetFeature>
          break;
 8007262:	e009      	b.n	8007278 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc74 	bl	8007b54 <USBD_ClrFeature>
          break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fccc 	bl	8007c0e <USBD_CtlError>
          break;
 8007276:	bf00      	nop
      }
      break;
 8007278:	e004      	b.n	8007284 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fcc6 	bl	8007c0e <USBD_CtlError>
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d005      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d82e      	bhi.n	800730c <USBD_StdItfReq+0x7c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <USBD_StdItfReq+0x26>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d12a      	bne.n	800730c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d81d      	bhi.n	80072fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	889b      	ldrh	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d813      	bhi.n	80072f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <USBD_StdItfReq+0x78>
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd38 	bl	8007d62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072f2:	e009      	b.n	8007308 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc89 	bl	8007c0e <USBD_CtlError>
          break;
 80072fc:	e004      	b.n	8007308 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc84 	bl	8007c0e <USBD_CtlError>
          break;
 8007306:	e000      	b.n	800730a <USBD_StdItfReq+0x7a>
          break;
 8007308:	bf00      	nop
      }
      break;
 800730a:	e004      	b.n	8007316 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc7d 	bl	8007c0e <USBD_CtlError>
      break;
 8007314:	bf00      	nop
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d007      	beq.n	8007350 <USBD_StdEPReq+0x30>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	f200 8146 	bhi.w	80075d2 <USBD_StdEPReq+0x2b2>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <USBD_StdEPReq+0x40>
 800734a:	2b20      	cmp	r3, #32
 800734c:	f040 8141 	bne.w	80075d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
      break;
 800735e:	e13d      	b.n	80075dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007368:	2b20      	cmp	r3, #32
 800736a:	d10a      	bne.n	8007382 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	e12d      	b.n	80075de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d007      	beq.n	800739a <USBD_StdEPReq+0x7a>
 800738a:	2b03      	cmp	r3, #3
 800738c:	f300 811b 	bgt.w	80075c6 <USBD_StdEPReq+0x2a6>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d072      	beq.n	800747a <USBD_StdEPReq+0x15a>
 8007394:	2b01      	cmp	r3, #1
 8007396:	d03a      	beq.n	800740e <USBD_StdEPReq+0xee>
 8007398:	e115      	b.n	80075c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d002      	beq.n	80073aa <USBD_StdEPReq+0x8a>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d015      	beq.n	80073d4 <USBD_StdEPReq+0xb4>
 80073a8:	e02b      	b.n	8007402 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <USBD_StdEPReq+0xaa>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d009      	beq.n	80073ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 ff96 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 ff92 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c8:	e020      	b.n	800740c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc1e 	bl	8007c0e <USBD_CtlError>
              break;
 80073d2:	e01b      	b.n	800740c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	885b      	ldrh	r3, [r3, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10e      	bne.n	80073fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <USBD_StdEPReq+0xda>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d008      	beq.n	80073fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	88db      	ldrh	r3, [r3, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 ff79 	bl	80082ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fcb1 	bl	8007d62 <USBD_CtlSendStatus>

              break;
 8007400:	e004      	b.n	800740c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc02 	bl	8007c0e <USBD_CtlError>
              break;
 800740a:	bf00      	nop
          }
          break;
 800740c:	e0e0      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	2b02      	cmp	r3, #2
 8007416:	d002      	beq.n	800741e <USBD_StdEPReq+0xfe>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d015      	beq.n	8007448 <USBD_StdEPReq+0x128>
 800741c:	e026      	b.n	800746c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <USBD_StdEPReq+0x11e>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d009      	beq.n	800743e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 ff5c 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 ff58 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800743c:	e01c      	b.n	8007478 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fbe4 	bl	8007c0e <USBD_CtlError>
              break;
 8007446:	e017      	b.n	8007478 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 ff63 	bl	800832a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc7c 	bl	8007d62 <USBD_CtlSendStatus>
              }
              break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fbcd 	bl	8007c0e <USBD_CtlError>
              break;
 8007474:	e000      	b.n	8007478 <USBD_StdEPReq+0x158>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e0aa      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	2b02      	cmp	r3, #2
 8007482:	d002      	beq.n	800748a <USBD_StdEPReq+0x16a>
 8007484:	2b03      	cmp	r3, #3
 8007486:	d032      	beq.n	80074ee <USBD_StdEPReq+0x1ce>
 8007488:	e097      	b.n	80075ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <USBD_StdEPReq+0x180>
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d004      	beq.n	80074a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fbb8 	bl	8007c0e <USBD_CtlError>
                break;
 800749e:	e091      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da0b      	bge.n	80074c0 <USBD_StdEPReq+0x1a0>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	3310      	adds	r3, #16
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	e00b      	b.n	80074d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2202      	movs	r2, #2
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fbfb 	bl	8007ce2 <USBD_CtlSendData>
              break;
 80074ec:	e06a      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da11      	bge.n	800751a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	3318      	adds	r3, #24
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d117      	bne.n	8007540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb7b 	bl	8007c0e <USBD_CtlError>
                  break;
 8007518:	e054      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	f003 020f 	and.w	r2, r3, #15
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb68 	bl	8007c0e <USBD_CtlError>
                  break;
 800753e:	e041      	b.n	80075c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da0b      	bge.n	8007560 <USBD_StdEPReq+0x240>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	3310      	adds	r3, #16
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	e00b      	b.n	8007578 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <USBD_StdEPReq+0x266>
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d103      	bne.n	800758e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e00e      	b.n	80075ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fee8 	bl	8008368 <USBD_LL_IsStallEP>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2201      	movs	r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e002      	b.n	80075ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2202      	movs	r2, #2
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb95 	bl	8007ce2 <USBD_CtlSendData>
              break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb26 	bl	8007c0e <USBD_CtlError>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb20 	bl	8007c0e <USBD_CtlError>
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e004      	b.n	80075dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb1a 	bl	8007c0e <USBD_CtlError>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	2b06      	cmp	r3, #6
 800760a:	f200 8128 	bhi.w	800785e <USBD_GetDescriptor+0x276>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <USBD_GetDescriptor+0x2c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007631 	.word	0x08007631
 8007618:	08007649 	.word	0x08007649
 800761c:	08007689 	.word	0x08007689
 8007620:	0800785f 	.word	0x0800785f
 8007624:	0800785f 	.word	0x0800785f
 8007628:	080077ff 	.word	0x080077ff
 800762c:	0800782b 	.word	0x0800782b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
      break;
 8007646:	e112      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7c1b      	ldrb	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f107 0208 	add.w	r2, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3301      	adds	r3, #1
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800766a:	e100      	b.n	800786e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	2202      	movs	r2, #2
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e0f2      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	885b      	ldrh	r3, [r3, #2]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b05      	cmp	r3, #5
 8007690:	f200 80ac 	bhi.w	80077ec <USBD_GetDescriptor+0x204>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_GetDescriptor+0xb4>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	08007751 	.word	0x08007751
 80076ac:	08007785 	.word	0x08007785
 80076b0:	080077b9 	.word	0x080077b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7c12      	ldrb	r2, [r2, #16]
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d6:	e091      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa97 	bl	8007c0e <USBD_CtlError>
            err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
          break;
 80076e6:	e089      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770a:	e077      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa7d 	bl	8007c0e <USBD_CtlError>
            err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
          break;
 800771a:	e06f      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773e:	e05d      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa63 	bl	8007c0e <USBD_CtlError>
            err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
          break;
 800774e:	e055      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007772:	e043      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa49 	bl	8007c0e <USBD_CtlError>
            err++;
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	3301      	adds	r3, #1
 8007780:	72fb      	strb	r3, [r7, #11]
          break;
 8007782:	e03b      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7c12      	ldrb	r2, [r2, #16]
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
 80077a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a6:	e029      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa2f 	bl	8007c0e <USBD_CtlError>
            err++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	3301      	adds	r3, #1
 80077b4:	72fb      	strb	r3, [r7, #11]
          break;
 80077b6:	e021      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e00f      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa15 	bl	8007c0e <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e007      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa0d 	bl	8007c0e <USBD_CtlError>
          err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077fa:	e038      	b.n	800786e <USBD_GetDescriptor+0x286>
 80077fc:	e037      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7c1b      	ldrb	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	4610      	mov	r0, r2
 8007814:	4798      	blx	r3
 8007816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007818:	e029      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9f6 	bl	8007c0e <USBD_CtlError>
        err++;
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	3301      	adds	r3, #1
 8007826:	72fb      	strb	r3, [r7, #11]
      break;
 8007828:	e021      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c1b      	ldrb	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10d      	bne.n	800784e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
 8007842:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	2207      	movs	r2, #7
 800784a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800784c:	e00f      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9dc 	bl	8007c0e <USBD_CtlError>
        err++;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	3301      	adds	r3, #1
 800785a:	72fb      	strb	r3, [r7, #11]
      break;
 800785c:	e007      	b.n	800786e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9d4 	bl	8007c0e <USBD_CtlError>
      err++;
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	3301      	adds	r3, #1
 800786a:	72fb      	strb	r3, [r7, #11]
      break;
 800786c:	bf00      	nop
  }

  if (err != 0U)
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11c      	bne.n	80078ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <USBD_GetDescriptor+0x2b6>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00d      	beq.n	800789e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88da      	ldrh	r2, [r3, #6]
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	4293      	cmp	r3, r2
 800788a:	bf28      	it	cs
 800788c:	4613      	movcs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	461a      	mov	r2, r3
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa22 	bl	8007ce2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa5b 	bl	8007d62 <USBD_CtlSendStatus>
 80078ac:	e000      	b.n	80078b0 <USBD_GetDescriptor+0x2c8>
    return;
 80078ae:	bf00      	nop
    }
  }
}
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop

080078b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889b      	ldrh	r3, [r3, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d130      	bne.n	800792c <USBD_SetAddress+0x74>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	88db      	ldrh	r3, [r3, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d12c      	bne.n	800792c <USBD_SetAddress+0x74>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	885b      	ldrh	r3, [r3, #2]
 80078d6:	2b7f      	cmp	r3, #127	; 0x7f
 80078d8:	d828      	bhi.n	800792c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d104      	bne.n	80078fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f98b 	bl	8007c0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f8:	e01d      	b.n	8007936 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7bfa      	ldrb	r2, [r7, #15]
 80078fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fd5a 	bl	80083c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa28 	bl	8007d62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007920:	e009      	b.n	8007936 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	e004      	b.n	8007936 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f96d 	bl	8007c0e <USBD_CtlError>
  }
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <USBD_SetConfig+0x118>)
 8007952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <USBD_SetConfig+0x118>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d904      	bls.n	8007966 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f955 	bl	8007c0e <USBD_CtlError>
 8007964:	e075      	b.n	8007a52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	2b02      	cmp	r3, #2
 800796e:	d002      	beq.n	8007976 <USBD_SetConfig+0x36>
 8007970:	2b03      	cmp	r3, #3
 8007972:	d023      	beq.n	80079bc <USBD_SetConfig+0x7c>
 8007974:	e062      	b.n	8007a3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007976:	4b38      	ldr	r3, [pc, #224]	; (8007a58 <USBD_SetConfig+0x118>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01a      	beq.n	80079b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <USBD_SetConfig+0x118>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2203      	movs	r2, #3
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <USBD_SetConfig+0x118>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff f9e8 	bl	8006d6c <USBD_SetClassConfig>
 800799c:	4603      	mov	r3, r0
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d104      	bne.n	80079ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f932 	bl	8007c0e <USBD_CtlError>
            return;
 80079aa:	e052      	b.n	8007a52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f9d8 	bl	8007d62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079b2:	e04e      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9d4 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 80079ba:	e04a      	b.n	8007a52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <USBD_SetConfig+0x118>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d112      	bne.n	80079ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079cc:	4b22      	ldr	r3, [pc, #136]	; (8007a58 <USBD_SetConfig+0x118>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <USBD_SetConfig+0x118>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f9e4 	bl	8006daa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9bd 	bl	8007d62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079e8:	e033      	b.n	8007a52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <USBD_SetConfig+0x118>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d01d      	beq.n	8007a34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff f9d2 	bl	8006daa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff f9a8 	bl	8006d6c <USBD_SetClassConfig>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d104      	bne.n	8007a2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8f2 	bl	8007c0e <USBD_CtlError>
            return;
 8007a2a:	e012      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f998 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 8007a32:	e00e      	b.n	8007a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f994 	bl	8007d62 <USBD_CtlSendStatus>
        break;
 8007a3a:	e00a      	b.n	8007a52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f8e5 	bl	8007c0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <USBD_SetConfig+0x118>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff f9ad 	bl	8006daa <USBD_ClrClassConfig>
        break;
 8007a50:	bf00      	nop
    }
  }
}
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000638 	.word	0x20000638

08007a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d004      	beq.n	8007a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8cc 	bl	8007c0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a76:	e022      	b.n	8007abe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dc02      	bgt.n	8007a88 <USBD_GetConfig+0x2c>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc03      	bgt.n	8007a8e <USBD_GetConfig+0x32>
 8007a86:	e015      	b.n	8007ab4 <USBD_GetConfig+0x58>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetConfig+0x48>
 8007a8c:	e012      	b.n	8007ab4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3308      	adds	r3, #8
 8007a98:	2201      	movs	r2, #1
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f920 	bl	8007ce2 <USBD_CtlSendData>
        break;
 8007aa2:	e00c      	b.n	8007abe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f918 	bl	8007ce2 <USBD_CtlSendData>
        break;
 8007ab2:	e004      	b.n	8007abe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8a9 	bl	8007c0e <USBD_CtlError>
        break;
 8007abc:	bf00      	nop
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d81e      	bhi.n	8007b1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	88db      	ldrh	r3, [r3, #6]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d004      	beq.n	8007aee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f891 	bl	8007c0e <USBD_CtlError>
        break;
 8007aec:	e01a      	b.n	8007b24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f043 0202 	orr.w	r2, r3, #2
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	2202      	movs	r2, #2
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8e5 	bl	8007ce2 <USBD_CtlSendData>
      break;
 8007b18:	e004      	b.n	8007b24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f876 	bl	8007c0e <USBD_CtlError>
      break;
 8007b22:	bf00      	nop
  }
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d106      	bne.n	8007b4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f90b 	bl	8007d62 <USBD_CtlSendStatus>
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	3b01      	subs	r3, #1
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d80b      	bhi.n	8007b82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10c      	bne.n	8007b8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8f1 	bl	8007d62 <USBD_CtlSendStatus>
      }
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f842 	bl	8007c0e <USBD_CtlError>
      break;
 8007b8a:	e000      	b.n	8007b8e <USBD_ClrFeature+0x3a>
      break;
 8007b8c:	bf00      	nop
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3305      	adds	r3, #5
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3306      	adds	r3, #6
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3307      	adds	r3, #7
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	80da      	strh	r2, [r3, #6]

}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr

08007c0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c18:	2180      	movs	r1, #128	; 0x80
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb66 	bl	80082ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb62 	bl	80082ec <USBD_LL_StallEP>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d032      	beq.n	8007cac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f834 	bl	8007cb4 <USBD_GetLen>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	75fa      	strb	r2, [r7, #23]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4413      	add	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	7812      	ldrb	r2, [r2, #0]
 8007c6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	75fa      	strb	r2, [r7, #23]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4413      	add	r3, r2
 8007c78:	2203      	movs	r2, #3
 8007c7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c7c:	e012      	b.n	8007ca4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	60fa      	str	r2, [r7, #12]
 8007c84:	7dfa      	ldrb	r2, [r7, #23]
 8007c86:	1c51      	adds	r1, r2, #1
 8007c88:	75f9      	strb	r1, [r7, #23]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	440a      	add	r2, r1
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	75fa      	strb	r2, [r7, #23]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e8      	bne.n	8007c7e <USBD_GetString+0x4e>
    }
  }
}
 8007cac:	bf00      	nop
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cc0:	e005      	b.n	8007cce <USBD_GetLen+0x1a>
  {
    len++;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f5      	bne.n	8007cc2 <USBD_GetLen+0xe>
  }

  return len;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fb77 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fb65 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	2100      	movs	r1, #0
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fb76 	bl	8008444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb40 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fb50 	bl	8008444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007db4:	2200      	movs	r2, #0
 8007db6:	490e      	ldr	r1, [pc, #56]	; (8007df0 <MX_USB_DEVICE_Init+0x40>)
 8007db8:	480e      	ldr	r0, [pc, #56]	; (8007df4 <MX_USB_DEVICE_Init+0x44>)
 8007dba:	f7fe ff7d 	bl	8006cb8 <USBD_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dc4:	f7f8 fab8 	bl	8000338 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007dc8:	490b      	ldr	r1, [pc, #44]	; (8007df8 <MX_USB_DEVICE_Init+0x48>)
 8007dca:	480a      	ldr	r0, [pc, #40]	; (8007df4 <MX_USB_DEVICE_Init+0x44>)
 8007dcc:	f7fe ff9f 	bl	8006d0e <USBD_RegisterClass>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dd6:	f7f8 faaf 	bl	8000338 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007dda:	4806      	ldr	r0, [pc, #24]	; (8007df4 <MX_USB_DEVICE_Init+0x44>)
 8007ddc:	f7fe ffb0 	bl	8006d40 <USBD_Start>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007de6:	f7f8 faa7 	bl	8000338 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000148 	.word	0x20000148
 8007df4:	2000063c 	.word	0x2000063c
 8007df8:	20000040 	.word	0x20000040

08007dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2212      	movs	r2, #18
 8007e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000164 	.word	0x20000164

08007e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2204      	movs	r2, #4
 8007e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000178 	.word	0x20000178

08007e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4907      	ldr	r1, [pc, #28]	; (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e5a:	4808      	ldr	r0, [pc, #32]	; (8007e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e5c:	f7ff fee8 	bl	8007c30 <USBD_GetString>
 8007e60:	e004      	b.n	8007e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4904      	ldr	r1, [pc, #16]	; (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e66:	4805      	ldr	r0, [pc, #20]	; (8007e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e68:	f7ff fee2 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000900 	.word	0x20000900
 8007e7c:	080085bc 	.word	0x080085bc

08007e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	4904      	ldr	r1, [pc, #16]	; (8007ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e90:	4804      	ldr	r0, [pc, #16]	; (8007ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e92:	f7ff fecd 	bl	8007c30 <USBD_GetString>
  return USBD_StrDesc;
 8007e96:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000900 	.word	0x20000900
 8007ea4:	080085c8 	.word	0x080085c8

08007ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	221a      	movs	r2, #26
 8007eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eba:	f000 f843 	bl	8007f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ebe:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	2000017c 	.word	0x2000017c

08007ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4907      	ldr	r1, [pc, #28]	; (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ee2:	4808      	ldr	r0, [pc, #32]	; (8007f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ee4:	f7ff fea4 	bl	8007c30 <USBD_GetString>
 8007ee8:	e004      	b.n	8007ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4904      	ldr	r1, [pc, #16]	; (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eee:	4805      	ldr	r0, [pc, #20]	; (8007f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ef0:	f7ff fe9e 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef4:	4b02      	ldr	r3, [pc, #8]	; (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000900 	.word	0x20000900
 8007f04:	080085dc 	.word	0x080085dc

08007f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f1e:	4808      	ldr	r0, [pc, #32]	; (8007f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f20:	f7ff fe86 	bl	8007c30 <USBD_GetString>
 8007f24:	e004      	b.n	8007f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4904      	ldr	r1, [pc, #16]	; (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f2a:	4805      	ldr	r0, [pc, #20]	; (8007f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f2c:	f7ff fe80 	bl	8007c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000900 	.word	0x20000900
 8007f40:	080085e8 	.word	0x080085e8

08007f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f4a:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <Get_SerialNum+0x44>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <Get_SerialNum+0x48>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f56:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <Get_SerialNum+0x4c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	4909      	ldr	r1, [pc, #36]	; (8007f94 <Get_SerialNum+0x50>)
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f814 	bl	8007f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f74:	2204      	movs	r2, #4
 8007f76:	4908      	ldr	r1, [pc, #32]	; (8007f98 <Get_SerialNum+0x54>)
 8007f78:	68b8      	ldr	r0, [r7, #8]
 8007f7a:	f000 f80f 	bl	8007f9c <IntToUnicode>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	1ffff7e8 	.word	0x1ffff7e8
 8007f8c:	1ffff7ec 	.word	0x1ffff7ec
 8007f90:	1ffff7f0 	.word	0x1ffff7f0
 8007f94:	2000017e 	.word	0x2000017e
 8007f98:	2000018e 	.word	0x2000018e

08007f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75fb      	strb	r3, [r7, #23]
 8007fb2:	e027      	b.n	8008004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	0f1b      	lsrs	r3, r3, #28
 8007fb8:	2b09      	cmp	r3, #9
 8007fba:	d80b      	bhi.n	8007fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	0f1b      	lsrs	r3, r3, #28
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	440b      	add	r3, r1
 8007fcc:	3230      	adds	r2, #48	; 0x30
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	e00a      	b.n	8007fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0f1b      	lsrs	r3, r3, #28
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3237      	adds	r2, #55	; 0x37
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	3301      	adds	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
 8008004:	7dfa      	ldrb	r2, [r7, #23]
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	429a      	cmp	r2, r3
 800800a:	d3d3      	bcc.n	8007fb4 <IntToUnicode+0x18>
  }
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a0d      	ldr	r2, [pc, #52]	; (800805c <HAL_PCD_MspInit+0x44>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d113      	bne.n	8008052 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <HAL_PCD_MspInit+0x48>)
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <HAL_PCD_MspInit+0x48>)
 8008030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008034:	61d3      	str	r3, [r2, #28]
 8008036:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <HAL_PCD_MspInit+0x48>)
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008042:	2200      	movs	r2, #0
 8008044:	2100      	movs	r1, #0
 8008046:	2014      	movs	r0, #20
 8008048:	f7f8 ff25 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800804c:	2014      	movs	r0, #20
 800804e:	f7f8 ff3e 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40005c00 	.word	0x40005c00
 8008060:	40021000 	.word	0x40021000

08008064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fe fea8 	bl	8006dd0 <USBD_LL_SetupStage>
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800809a:	78fa      	ldrb	r2, [r7, #3]
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	440b      	add	r3, r1
 80080a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	4619      	mov	r1, r3
 80080b2:	f7fe feda 	bl	8006e6a <USBD_LL_DataOutStage>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	440b      	add	r3, r1
 80080de:	333c      	adds	r3, #60	; 0x3c
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	4619      	mov	r1, r3
 80080e6:	f7fe ff31 	bl	8006f4c <USBD_LL_DataInStage>
}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff f841 	bl	8007188 <USBD_LL_SOF>
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008116:	2301      	movs	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d001      	beq.n	8008126 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008122:	f7f8 f909 	bl	8000338 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800812c:	7bfa      	ldrb	r2, [r7, #15]
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fff1 	bl	8007118 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe ffaa 	bl	8007096 <USBD_LL_Reset>
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe ffeb 	bl	8007136 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <HAL_PCD_SuspendCallback+0x30>)
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	4a03      	ldr	r2, [pc, #12]	; (800817c <HAL_PCD_SuspendCallback+0x30>)
 800816e:	f043 0306 	orr.w	r3, r3, #6
 8008172:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	e000ed00 	.word	0xe000ed00

08008180 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe ffe5 	bl	800715e <USBD_LL_Resume>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <USBD_LL_Init+0x88>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <USBD_LL_Init+0x88>)
 80081b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <USBD_LL_Init+0x88>)
 80081b6:	4a1c      	ldr	r2, [pc, #112]	; (8008228 <USBD_LL_Init+0x8c>)
 80081b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081ba:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <USBD_LL_Init+0x88>)
 80081bc:	2208      	movs	r2, #8
 80081be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081c0:	4b18      	ldr	r3, [pc, #96]	; (8008224 <USBD_LL_Init+0x88>)
 80081c2:	2202      	movs	r2, #2
 80081c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081c6:	4b17      	ldr	r3, [pc, #92]	; (8008224 <USBD_LL_Init+0x88>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081cc:	4b15      	ldr	r3, [pc, #84]	; (8008224 <USBD_LL_Init+0x88>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081d2:	4b14      	ldr	r3, [pc, #80]	; (8008224 <USBD_LL_Init+0x88>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081d8:	4812      	ldr	r0, [pc, #72]	; (8008224 <USBD_LL_Init+0x88>)
 80081da:	f7f9 fca1 	bl	8001b20 <HAL_PCD_Init>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80081e4:	f7f8 f8a8 	bl	8000338 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ee:	2318      	movs	r3, #24
 80081f0:	2200      	movs	r2, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	f7fb f8fe 	bl	80033f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081fe:	2358      	movs	r3, #88	; 0x58
 8008200:	2200      	movs	r2, #0
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	f7fb f8f6 	bl	80033f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800820e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008212:	2200      	movs	r2, #0
 8008214:	2181      	movs	r1, #129	; 0x81
 8008216:	f7fb f8ed 	bl	80033f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000b00 	.word	0x20000b00
 8008228:	40005c00 	.word	0x40005c00

0800822c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008242:	4618      	mov	r0, r3
 8008244:	f7f9 fd77 	bl	8001d36 <HAL_PCD_Start>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f93c 	bl	80084cc <USBD_Get_USB_Status>
 8008254:	4603      	mov	r3, r0
 8008256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008258:	7bbb      	ldrb	r3, [r7, #14]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	4603      	mov	r3, r0
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	460b      	mov	r3, r1
 8008276:	70bb      	strb	r3, [r7, #2]
 8008278:	4613      	mov	r3, r2
 800827a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800828a:	78bb      	ldrb	r3, [r7, #2]
 800828c:	883a      	ldrh	r2, [r7, #0]
 800828e:	78f9      	ldrb	r1, [r7, #3]
 8008290:	f7f9 feef 	bl	8002072 <HAL_PCD_EP_Open>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f916 	bl	80084cc <USBD_Get_USB_Status>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f9 ff36 	bl	800213e <HAL_PCD_EP_Close>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f8f7 	bl	80084cc <USBD_Get_USB_Status>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7f9 ffdf 	bl	80022ce <HAL_PCD_EP_SetStall>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f8d8 	bl	80084cc <USBD_Get_USB_Status>
 800831c:	4603      	mov	r3, r0
 800831e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008320:	7bbb      	ldrb	r3, [r7, #14]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7fa f820 	bl	800238e <HAL_PCD_EP_ClrStall>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f8b9 	bl	80084cc <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800837c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da0c      	bge.n	800839e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	440b      	add	r3, r1
 8008398:	3302      	adds	r3, #2
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	e00b      	b.n	80083b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a4:	68f9      	ldr	r1, [r7, #12]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	440b      	add	r3, r1
 80083b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80083b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr

080083c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f9 fe22 	bl	8002028 <HAL_PCD_SetAddress>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f86e 	bl	80084cc <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	461a      	mov	r2, r3
 800840a:	460b      	mov	r3, r1
 800840c:	72fb      	strb	r3, [r7, #11]
 800840e:	4613      	mov	r3, r2
 8008410:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	7af9      	ldrb	r1, [r7, #11]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	f7f9 ff0f 	bl	8002248 <HAL_PCD_EP_Transmit>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f84b 	bl	80084cc <USBD_Get_USB_Status>
 8008436:	4603      	mov	r3, r0
 8008438:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800843a:	7dbb      	ldrb	r3, [r7, #22]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	72fb      	strb	r3, [r7, #11]
 8008454:	4613      	mov	r3, r2
 8008456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008466:	893b      	ldrh	r3, [r7, #8]
 8008468:	7af9      	ldrb	r1, [r7, #11]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	f7f9 feaf 	bl	80021ce <HAL_PCD_EP_Receive>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f828 	bl	80084cc <USBD_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008480:	7dbb      	ldrb	r3, [r7, #22]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_static_malloc+0x14>)
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20000dec 	.word	0x20000dec

080084a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d817      	bhi.n	8008510 <USBD_Get_USB_Status+0x44>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_Get_USB_Status+0x1c>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	080084ff 	.word	0x080084ff
 80084f0:	08008505 	.word	0x08008505
 80084f4:	0800850b 	.word	0x0800850b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
    break;
 80084fc:	e00b      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084fe:	2302      	movs	r3, #2
 8008500:	73fb      	strb	r3, [r7, #15]
    break;
 8008502:	e008      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008504:	2301      	movs	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
    break;
 8008508:	e005      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800850a:	2302      	movs	r3, #2
 800850c:	73fb      	strb	r3, [r7, #15]
    break;
 800850e:	e002      	b.n	8008516 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008510:	2302      	movs	r3, #2
 8008512:	73fb      	strb	r3, [r7, #15]
    break;
 8008514:	bf00      	nop
  }
  return usb_status;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <__libc_init_array>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	2600      	movs	r6, #0
 8008528:	4d0c      	ldr	r5, [pc, #48]	; (800855c <__libc_init_array+0x38>)
 800852a:	4c0d      	ldr	r4, [pc, #52]	; (8008560 <__libc_init_array+0x3c>)
 800852c:	1b64      	subs	r4, r4, r5
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	42a6      	cmp	r6, r4
 8008532:	d109      	bne.n	8008548 <__libc_init_array+0x24>
 8008534:	f000 f822 	bl	800857c <_init>
 8008538:	2600      	movs	r6, #0
 800853a:	4d0a      	ldr	r5, [pc, #40]	; (8008564 <__libc_init_array+0x40>)
 800853c:	4c0a      	ldr	r4, [pc, #40]	; (8008568 <__libc_init_array+0x44>)
 800853e:	1b64      	subs	r4, r4, r5
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	42a6      	cmp	r6, r4
 8008544:	d105      	bne.n	8008552 <__libc_init_array+0x2e>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	f855 3b04 	ldr.w	r3, [r5], #4
 800854c:	4798      	blx	r3
 800854e:	3601      	adds	r6, #1
 8008550:	e7ee      	b.n	8008530 <__libc_init_array+0xc>
 8008552:	f855 3b04 	ldr.w	r3, [r5], #4
 8008556:	4798      	blx	r3
 8008558:	3601      	adds	r6, #1
 800855a:	e7f2      	b.n	8008542 <__libc_init_array+0x1e>
 800855c:	0800936c 	.word	0x0800936c
 8008560:	0800936c 	.word	0x0800936c
 8008564:	0800936c 	.word	0x0800936c
 8008568:	08009370 	.word	0x08009370

0800856c <memset>:
 800856c:	4603      	mov	r3, r0
 800856e:	4402      	add	r2, r0
 8008570:	4293      	cmp	r3, r2
 8008572:	d100      	bne.n	8008576 <memset+0xa>
 8008574:	4770      	bx	lr
 8008576:	f803 1b01 	strb.w	r1, [r3], #1
 800857a:	e7f9      	b.n	8008570 <memset+0x4>

0800857c <_init>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr

08008588 <_fini>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr
