
macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  080091d0  080091d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a024  0800a024  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800a024  0800a024  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a024  0800a024  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800a02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec0  20000198  0800a1c4  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  0800a1c4  00021058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dea  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003339  00000000  00000000  00031fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000352e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00036190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a175  00000000  00000000  00036ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013518  00000000  00000000  00051045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008795a  00000000  00000000  0006455d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebeb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  000ebf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	080091b8 	.word	0x080091b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	080091b8 	.word	0x080091b8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 fb38 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80b 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f892 	bl	8000294 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000170:	f008 fc34 	bl	80089dc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000174:	f000 f860 	bl	8000238 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  systemInit();
 8000178:	f000 f930 	bl	80003dc <systemInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  systemControl();
 800017c:	f000 f974 	bl	8000468 <systemControl>
 8000180:	e7fc      	b.n	800017c <main+0x1c>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b094      	sub	sp, #80	; 0x50
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018c:	2228      	movs	r2, #40	; 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f009 f801 	bl	8009198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	f107 0314 	add.w	r3, r7, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d8:	4618      	mov	r0, r3
 80001da:	f003 ff63 	bl	80040a4 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e4:	f000 f99a 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f004 f9ce 	bl	80045a8 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000212:	f000 f983 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000216:	2310      	movs	r3, #16
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f004 fb45 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800022c:	f000 f976 	bl	800051c <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	; 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_I2C1_Init+0x50>)
 800023e:	4a13      	ldr	r2, [pc, #76]	; (800028c <MX_I2C1_Init+0x54>)
 8000240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_I2C1_Init+0x50>)
 8000244:	4a12      	ldr	r2, [pc, #72]	; (8000290 <MX_I2C1_Init+0x58>)
 8000246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_I2C1_Init+0x50>)
 8000256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_I2C1_Init+0x50>)
 8000276:	f001 fe0f 	bl	8001e98 <HAL_I2C_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 f94c 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000674 	.word	0x20000674
 800028c:	40005400 	.word	0x40005400
 8000290:	000186a0 	.word	0x000186a0

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a8:	4b48      	ldr	r3, [pc, #288]	; (80003cc <MX_GPIO_Init+0x138>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <MX_GPIO_Init+0x138>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b45      	ldr	r3, [pc, #276]	; (80003cc <MX_GPIO_Init+0x138>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b42      	ldr	r3, [pc, #264]	; (80003cc <MX_GPIO_Init+0x138>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a41      	ldr	r2, [pc, #260]	; (80003cc <MX_GPIO_Init+0x138>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <MX_GPIO_Init+0x138>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d8:	4b3c      	ldr	r3, [pc, #240]	; (80003cc <MX_GPIO_Init+0x138>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a3b      	ldr	r2, [pc, #236]	; (80003cc <MX_GPIO_Init+0x138>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b39      	ldr	r3, [pc, #228]	; (80003cc <MX_GPIO_Init+0x138>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0308 	and.w	r3, r3, #8
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	21c0      	movs	r1, #192	; 0xc0
 80002f4:	4836      	ldr	r0, [pc, #216]	; (80003d0 <MX_GPIO_Init+0x13c>)
 80002f6:	f001 fd9e 	bl	8001e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	4835      	ldr	r0, [pc, #212]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000300:	f001 fd99 	bl	8001e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000304:	23c0      	movs	r3, #192	; 0xc0
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	482d      	ldr	r0, [pc, #180]	; (80003d0 <MX_GPIO_Init+0x13c>)
 800031c:	f001 fbf0 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000320:	2303      	movs	r3, #3
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000328:	2302      	movs	r3, #2
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4827      	ldr	r0, [pc, #156]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000338:	f001 fbe2 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800033c:	f640 4304 	movw	r3, #3076	; 0xc04
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4820      	ldr	r0, [pc, #128]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000352:	f001 fbd5 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x144>)
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	481a      	ldr	r0, [pc, #104]	; (80003d4 <MX_GPIO_Init+0x140>)
 800036c:	f001 fbc8 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x144>)
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4812      	ldr	r0, [pc, #72]	; (80003d0 <MX_GPIO_Init+0x13c>)
 8000386:	f001 fbbb 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800038a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x13c>)
 80003a0:	f001 fbae 	bl	8001b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2017      	movs	r0, #23
 80003aa:	f001 fb72 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003ae:	2017      	movs	r0, #23
 80003b0:	f001 fb8b 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2028      	movs	r0, #40	; 0x28
 80003ba:	f001 fb6a 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f001 fb83 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	10110000 	.word	0x10110000

080003dc <systemInit>:

/* USER CODE BEGIN 4 */
void systemInit()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	  ssd1306_Init(&hi2cScreen);
 80003e0:	4815      	ldr	r0, [pc, #84]	; (8000438 <systemInit+0x5c>)
 80003e2:	f000 ff57 	bl	8001294 <ssd1306_Init>
	  ssd1306_Fill(Black);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f001 f874 	bl	80014d4 <ssd1306_Fill>
	  ssd1306_UpdateScreen(&hi2cScreen);
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <systemInit+0x5c>)
 80003ee:	f001 f893 	bl	8001518 <ssd1306_UpdateScreen>
	  cursorPosition 	 = 1;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <systemInit+0x60>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	  topMenuPosition 	 = 1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <systemInit+0x64>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
	  bottomMenuPosition = 3;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <systemInit+0x68>)
 8000400:	2203      	movs	r2, #3
 8000402:	701a      	strb	r2, [r3, #0]
	  Button		 	 = 0;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <systemInit+0x6c>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	  rotary1Counter	 = 0;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <systemInit+0x70>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
	  rotary2Counter	 = 0;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <systemInit+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
	  lastDebounceTime = 0;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <systemInit+0x78>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
	  nodeTransition = idleE;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <systemInit+0x7c>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
	  DisplayOption = DisplayAll;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <systemInit+0x80>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	  InitMenu();
 8000428:	f000 fa36 	bl	8000898 <InitMenu>
	  currentM=&buttonM;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <systemInit+0x84>)
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <systemInit+0x88>)
 8000430:	601a      	str	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000674 	.word	0x20000674
 800043c:	20000755 	.word	0x20000755
 8000440:	200008a1 	.word	0x200008a1
 8000444:	200008a0 	.word	0x200008a0
 8000448:	200006f8 	.word	0x200006f8
 800044c:	200005f0 	.word	0x200005f0
 8000450:	20000700 	.word	0x20000700
 8000454:	20000780 	.word	0x20000780
 8000458:	200005f4 	.word	0x200005f4
 800045c:	200006fe 	.word	0x200006fe
 8000460:	200006f4 	.word	0x200006f4
 8000464:	20000758 	.word	0x20000758

08000468 <systemControl>:

void systemControl()
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	buttonControl();
 800046c:	f000 fe06 	bl	800107c <buttonControl>
	encoderControl();
 8000470:	f000 fe10 	bl	8001094 <encoderControl>
	displayControl();
 8000474:	f000 feaa 	bl	80011cc <displayControl>


}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	80fb      	strh	r3, [r7, #6]
	 uint32_t currentTime = HAL_GetTick();
 8000486:	f001 f9ff 	bl	8001888 <HAL_GetTick>
 800048a:	60f8      	str	r0, [r7, #12]

	  if (currentTime < lastDebounceTime + DEBOUNCE_TIME_MS)
 800048c:	4b1f      	ldr	r3, [pc, #124]	; (800050c <HAL_GPIO_EXTI_Callback+0x90>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3314      	adds	r3, #20
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d334      	bcc.n	8000502 <HAL_GPIO_EXTI_Callback+0x86>
	  {
	    // Debounce period not yet expired, so return without updating the count
	    return;
	  }

	  if (GPIO_Pin == GPIO_PIN_8)
 8000498:	88fb      	ldrh	r3, [r7, #6]
 800049a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800049e:	d115      	bne.n	80004cc <HAL_GPIO_EXTI_Callback+0x50>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 80004a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a4:	481a      	ldr	r0, [pc, #104]	; (8000510 <HAL_GPIO_EXTI_Callback+0x94>)
 80004a6:	f001 fcaf 	bl	8001e08 <HAL_GPIO_ReadPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d105      	bne.n	80004bc <HAL_GPIO_EXTI_Callback+0x40>
	    {
	    	rotary1Counter--;
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <HAL_GPIO_EXTI_Callback+0x98>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a17      	ldr	r2, [pc, #92]	; (8000514 <HAL_GPIO_EXTI_Callback+0x98>)
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e004      	b.n	80004c6 <HAL_GPIO_EXTI_Callback+0x4a>
	    }
	    else
	    {
	    	rotary1Counter++;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_GPIO_EXTI_Callback+0x98>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_GPIO_EXTI_Callback+0x98>)
 80004c4:	6013      	str	r3, [r2, #0]
	    }

	   lastDebounceTime = currentTime;
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <HAL_GPIO_EXTI_Callback+0x90>)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	6013      	str	r3, [r2, #0]
	  }

	  if (GPIO_Pin == GPIO_PIN_14)
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004d2:	d117      	bne.n	8000504 <HAL_GPIO_EXTI_Callback+0x88>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <HAL_GPIO_EXTI_Callback+0x94>)
 80004da:	f001 fc95 	bl	8001e08 <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d105      	bne.n	80004f0 <HAL_GPIO_EXTI_Callback+0x74>
	    {
	    	rotary2Counter--;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_GPIO_EXTI_Callback+0x9c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_GPIO_EXTI_Callback+0x9c>)
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	e004      	b.n	80004fa <HAL_GPIO_EXTI_Callback+0x7e>
	    }
	    else
	    {
	    	rotary2Counter++;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_GPIO_EXTI_Callback+0x9c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_GPIO_EXTI_Callback+0x9c>)
 80004f8:	6013      	str	r3, [r2, #0]
	    }

	   lastDebounceTime = currentTime;
 80004fa:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_GPIO_EXTI_Callback+0x90>)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	e000      	b.n	8000504 <HAL_GPIO_EXTI_Callback+0x88>
	    return;
 8000502:	bf00      	nop
	  }


}
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000780 	.word	0x20000780
 8000510:	40010c00 	.word	0x40010c00
 8000514:	200005f0 	.word	0x200005f0
 8000518:	20000700 	.word	0x20000700

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1d      	ldr	r2, [pc, #116]	; (800061c <HAL_I2C_MspInit+0x90>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d132      	bne.n	8000612 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <HAL_I2C_MspInit+0x94>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <HAL_I2C_MspInit+0x94>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <HAL_I2C_MspInit+0x94>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ca:	2312      	movs	r3, #18
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <HAL_I2C_MspInit+0x98>)
 80005da:	f001 fa91 	bl	8001b00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_I2C_MspInit+0x9c>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <HAL_I2C_MspInit+0x9c>)
 80005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_I2C_MspInit+0x94>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <HAL_I2C_MspInit+0x94>)
 8000600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_I2C_MspInit+0x94>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40005400 	.word	0x40005400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010c00 	.word	0x40010c00
 8000628:	40010000 	.word	0x40010000

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <NMI_Handler+0x4>

08000632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>

0800063e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <UsageFault_Handler+0x4>

0800064a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f001 f8f7 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000682:	f002 f994 	bl	80029ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000d6c 	.word	0x20000d6c

08000690 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000694:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000698:	f001 fbe6 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a8:	f001 fbde 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80006ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006b0:	f001 fbda 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80006b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006b8:	f001 fbd6 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffe5 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f008 fd2b 	bl	8009150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fd31 	bl	8000160 <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8000708:	0800a02c 	.word	0x0800a02c
  ldr r2, =_sbss
 800070c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8000710:	20001058 	.word	0x20001058

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <rowread>:





GPIO_PinState rowread(uint8_t rowNumber){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(rowPort[rowNumber],rowPin[rowNumber]);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <rowread+0x2c>)
 8000726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <rowread+0x30>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	4619      	mov	r1, r3
 8000734:	4610      	mov	r0, r2
 8000736:	f001 fb67 	bl	8001e08 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000001c 	.word	0x2000001c
 8000748:	2000000c 	.word	0x2000000c

0800074c <setcolumn>:

void setcolumn(uint8_t columnNumber){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_SET);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <setcolumn+0x78>)
 800075a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <setcolumn+0x7c>)
 8000762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f001 fb64 	bl	8001e36 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e01e      	b.n	80007b2 <setcolumn+0x66>
		HAL_GPIO_WritePin(columnPort[(columnNumber+i)%columnNumber],columnPin[(columnNumber+i)%columnNumber], GPIO_PIN_RESET);
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000780:	fb01 f202 	mul.w	r2, r1, r2
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <setcolumn+0x78>)
 8000788:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	fb93 f1f2 	sdiv	r1, r3, r2
 8000798:	fb01 f202 	mul.w	r2, r1, r2
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <setcolumn+0x7c>)
 80007a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f001 fb45 	bl	8001e36 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbdc      	blt.n	8000774 <setcolumn+0x28>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000028 	.word	0x20000028
 80007c8:	20000014 	.word	0x20000014

080007cc <resetcolumn>:

void resetcolumn(uint8_t columnNumber){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_RESET);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <resetcolumn+0x2c>)
 80007da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <resetcolumn+0x30>)
 80007e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 fb24 	bl	8001e36 <HAL_GPIO_WritePin>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	20000014 	.word	0x20000014

08000800 <scan>:

uint8_t scan(){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
	uint8_t pressedButton=0;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]

	for(int i=0; i<ColumnNumber;i++)
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	e03a      	b.n	8000886 <scan+0x86>
	{

		HAL_Delay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f001 f843 	bl	800189c <HAL_Delay>
		setcolumn(i);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff96 	bl	800074c <setcolumn>
		for(int j=0;j<RowNumber;j++)
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e024      	b.n	8000870 <scan+0x70>
		{
			if(rowread(j)==GPIO_PIN_SET)
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff74 	bl	8000718 <rowread>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d110      	bne.n	8000858 <scan+0x58>
			{
				pressedButton=j*4+i+1;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	b2da      	uxtb	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	3301      	adds	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
				resetcolumn(i);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffbc 	bl	80007cc <resetcolumn>
				return pressedButton;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	e01a      	b.n	800088e <scan+0x8e>

			}

			for(volatile int i=0; i<100;i++);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	e002      	b.n	8000864 <scan+0x64>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b63      	cmp	r3, #99	; 0x63
 8000868:	ddf9      	ble.n	800085e <scan+0x5e>
		for(int j=0;j<RowNumber;j++)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	2b02      	cmp	r3, #2
 8000874:	ddd7      	ble.n	8000826 <scan+0x26>
		}
		resetcolumn(i);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffa6 	bl	80007cc <resetcolumn>
	for(int i=0; i<ColumnNumber;i++)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b03      	cmp	r3, #3
 800088a:	ddc1      	ble.n	8000810 <scan+0x10>
	}
	return pressedButton;
 800088c:	79fb      	ldrb	r3, [r7, #7]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <InitMenu>:





void InitMenu(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af04      	add	r7, sp, #16


	/*Prev Next Up Down*/
	BuildMenu(&mainM, "Main", 1, executeMain, 0, &buttonM, 0, 0);
 800089e:	2300      	movs	r3, #0
 80008a0:	9303      	str	r3, [sp, #12]
 80008a2:	2300      	movs	r3, #0
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	4b63      	ldr	r3, [pc, #396]	; (8000a34 <InitMenu+0x19c>)
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	4b62      	ldr	r3, [pc, #392]	; (8000a38 <InitMenu+0x1a0>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	4962      	ldr	r1, [pc, #392]	; (8000a3c <InitMenu+0x1a4>)
 80008b4:	4862      	ldr	r0, [pc, #392]	; (8000a40 <InitMenu+0x1a8>)
 80008b6:	f000 f99d 	bl	8000bf4 <BuildMenu>
	BuildMenu(&buttonM, "Button", 2, executeButton, &mainM, &displayM, 0, &scrollM);
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <InitMenu+0x1ac>)
 80008bc:	9303      	str	r3, [sp, #12]
 80008be:	2300      	movs	r3, #0
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <InitMenu+0x1b0>)
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <InitMenu+0x1a8>)
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	4b60      	ldr	r3, [pc, #384]	; (8000a4c <InitMenu+0x1b4>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	4960      	ldr	r1, [pc, #384]	; (8000a50 <InitMenu+0x1b8>)
 80008d0:	4858      	ldr	r0, [pc, #352]	; (8000a34 <InitMenu+0x19c>)
 80008d2:	f000 f98f 	bl	8000bf4 <BuildMenu>
	BuildMenu(&scrollM, "Scroll",  2, executeScroll, &mainM, 0, &buttonM, 0);
 80008d6:	2300      	movs	r3, #0
 80008d8:	9303      	str	r3, [sp, #12]
 80008da:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <InitMenu+0x19c>)
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2300      	movs	r3, #0
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <InitMenu+0x1a8>)
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	4b5b      	ldr	r3, [pc, #364]	; (8000a54 <InitMenu+0x1bc>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	495b      	ldr	r1, [pc, #364]	; (8000a58 <InitMenu+0x1c0>)
 80008ec:	4855      	ldr	r0, [pc, #340]	; (8000a44 <InitMenu+0x1ac>)
 80008ee:	f000 f981 	bl	8000bf4 <BuildMenu>
	BuildMenu(&displayM, "Display", 2, executeDisplay, &buttonM, &allM, 0, &modeM);
 80008f2:	4b5a      	ldr	r3, [pc, #360]	; (8000a5c <InitMenu+0x1c4>)
 80008f4:	9303      	str	r3, [sp, #12]
 80008f6:	2300      	movs	r3, #0
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <InitMenu+0x1c8>)
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <InitMenu+0x19c>)
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <InitMenu+0x1cc>)
 8000904:	2202      	movs	r2, #2
 8000906:	4958      	ldr	r1, [pc, #352]	; (8000a68 <InitMenu+0x1d0>)
 8000908:	484f      	ldr	r0, [pc, #316]	; (8000a48 <InitMenu+0x1b0>)
 800090a:	f000 f973 	bl	8000bf4 <BuildMenu>
	BuildMenu(&modeM, 	"Mode", 2, executeMode, &buttonM, &eagleM, &displayM, 0);
 800090e:	2300      	movs	r3, #0
 8000910:	9303      	str	r3, [sp, #12]
 8000912:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <InitMenu+0x1b0>)
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <InitMenu+0x1d4>)
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <InitMenu+0x19c>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	4b54      	ldr	r3, [pc, #336]	; (8000a70 <InitMenu+0x1d8>)
 8000920:	2202      	movs	r2, #2
 8000922:	4954      	ldr	r1, [pc, #336]	; (8000a74 <InitMenu+0x1dc>)
 8000924:	484d      	ldr	r0, [pc, #308]	; (8000a5c <InitMenu+0x1c4>)
 8000926:	f000 f965 	bl	8000bf4 <BuildMenu>
	BuildMenu(&allM, "All", 2, executeAll, &displayM, 0, 0, &pressedM);
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <InitMenu+0x1e0>)
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	2300      	movs	r3, #0
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2300      	movs	r3, #0
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <InitMenu+0x1b0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <InitMenu+0x1e4>)
 800093c:	2202      	movs	r2, #2
 800093e:	4950      	ldr	r1, [pc, #320]	; (8000a80 <InitMenu+0x1e8>)
 8000940:	4847      	ldr	r0, [pc, #284]	; (8000a60 <InitMenu+0x1c8>)
 8000942:	f000 f957 	bl	8000bf4 <BuildMenu>
	BuildMenu(&pressedM, "Pressed", 2, executePressed, &displayM, 0, &allM, 0);
 8000946:	2300      	movs	r3, #0
 8000948:	9303      	str	r3, [sp, #12]
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <InitMenu+0x1c8>)
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2300      	movs	r3, #0
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <InitMenu+0x1b0>)
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <InitMenu+0x1ec>)
 8000958:	2202      	movs	r2, #2
 800095a:	494b      	ldr	r1, [pc, #300]	; (8000a88 <InitMenu+0x1f0>)
 800095c:	4846      	ldr	r0, [pc, #280]	; (8000a78 <InitMenu+0x1e0>)
 800095e:	f000 f949 	bl	8000bf4 <BuildMenu>
	BuildMenu(&eagleM, "Eagle", 7, executeEagle, &modeM, 0, 0, &kicadM);
 8000962:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <InitMenu+0x1f4>)
 8000964:	9303      	str	r3, [sp, #12]
 8000966:	2300      	movs	r3, #0
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	2300      	movs	r3, #0
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <InitMenu+0x1c4>)
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <InitMenu+0x1f8>)
 8000974:	2207      	movs	r2, #7
 8000976:	4947      	ldr	r1, [pc, #284]	; (8000a94 <InitMenu+0x1fc>)
 8000978:	483c      	ldr	r0, [pc, #240]	; (8000a6c <InitMenu+0x1d4>)
 800097a:	f000 f93b 	bl	8000bf4 <BuildMenu>
	BuildMenu(&kicadM, "Kicad", 7, executeKicad, &modeM, 0, &eagleM, &photosopM);
 800097e:	4b46      	ldr	r3, [pc, #280]	; (8000a98 <InitMenu+0x200>)
 8000980:	9303      	str	r3, [sp, #12]
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <InitMenu+0x1d4>)
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2300      	movs	r3, #0
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <InitMenu+0x1c4>)
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <InitMenu+0x204>)
 8000990:	2207      	movs	r2, #7
 8000992:	4943      	ldr	r1, [pc, #268]	; (8000aa0 <InitMenu+0x208>)
 8000994:	483d      	ldr	r0, [pc, #244]	; (8000a8c <InitMenu+0x1f4>)
 8000996:	f000 f92d 	bl	8000bf4 <BuildMenu>
	BuildMenu(&photosopM, "Photoshop", 7, executePhotoshop, &modeM, 0, &kicadM, &premiereM);
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <InitMenu+0x20c>)
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <InitMenu+0x1f4>)
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <InitMenu+0x1c4>)
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <InitMenu+0x210>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	493f      	ldr	r1, [pc, #252]	; (8000aac <InitMenu+0x214>)
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <InitMenu+0x200>)
 80009b2:	f000 f91f 	bl	8000bf4 <BuildMenu>
	BuildMenu(&premiereM, "Premiere", 7, executePremiere, &modeM, 0, &photosopM, &custom1);
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <InitMenu+0x218>)
 80009b8:	9303      	str	r3, [sp, #12]
 80009ba:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <InitMenu+0x200>)
 80009bc:	9302      	str	r3, [sp, #8]
 80009be:	2300      	movs	r3, #0
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <InitMenu+0x1c4>)
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <InitMenu+0x21c>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	493b      	ldr	r1, [pc, #236]	; (8000ab8 <InitMenu+0x220>)
 80009cc:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <InitMenu+0x20c>)
 80009ce:	f000 f911 	bl	8000bf4 <BuildMenu>
	BuildMenu(&custom1, "Custom 1", 7, executeCustom1,	&modeM, 0, &premiereM, &custom2);
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <InitMenu+0x224>)
 80009d4:	9303      	str	r3, [sp, #12]
 80009d6:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <InitMenu+0x20c>)
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <InitMenu+0x1c4>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <InitMenu+0x228>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	4937      	ldr	r1, [pc, #220]	; (8000ac4 <InitMenu+0x22c>)
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <InitMenu+0x218>)
 80009ea:	f000 f903 	bl	8000bf4 <BuildMenu>
	BuildMenu(&custom2, "Custom 2", 7, executeCustom2,	&modeM, 0, &custom1, &custom3);
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <InitMenu+0x230>)
 80009f0:	9303      	str	r3, [sp, #12]
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <InitMenu+0x218>)
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2300      	movs	r3, #0
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <InitMenu+0x1c4>)
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <InitMenu+0x234>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	4933      	ldr	r1, [pc, #204]	; (8000ad0 <InitMenu+0x238>)
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <InitMenu+0x224>)
 8000a06:	f000 f8f5 	bl	8000bf4 <BuildMenu>
	BuildMenu(&custom3, "Custom 3", 7, executeCustom3,	&modeM, 0, &custom2, 0);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9303      	str	r3, [sp, #12]
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <InitMenu+0x224>)
 8000a10:	9302      	str	r3, [sp, #8]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <InitMenu+0x1c4>)
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <InitMenu+0x23c>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	492e      	ldr	r1, [pc, #184]	; (8000ad8 <InitMenu+0x240>)
 8000a20:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <InitMenu+0x230>)
 8000a22:	f000 f8e7 	bl	8000bf4 <BuildMenu>
	currentM=&mainM;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <InitMenu+0x244>)
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <InitMenu+0x1a8>)
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000758 	.word	0x20000758
 8000a38:	08000ae1 	.word	0x08000ae1
 8000a3c:	080091d0 	.word	0x080091d0
 8000a40:	20000800 	.word	0x20000800
 8000a44:	20000704 	.word	0x20000704
 8000a48:	200007b0 	.word	0x200007b0
 8000a4c:	08000aed 	.word	0x08000aed
 8000a50:	080091d8 	.word	0x080091d8
 8000a54:	08000af9 	.word	0x08000af9
 8000a58:	080091e0 	.word	0x080091e0
 8000a5c:	20000878 	.word	0x20000878
 8000a60:	200006cc 	.word	0x200006cc
 8000a64:	08000b05 	.word	0x08000b05
 8000a68:	080091e8 	.word	0x080091e8
 8000a6c:	20000828 	.word	0x20000828
 8000a70:	08000b11 	.word	0x08000b11
 8000a74:	080091f0 	.word	0x080091f0
 8000a78:	2000072c 	.word	0x2000072c
 8000a7c:	08000b1d 	.word	0x08000b1d
 8000a80:	080091f8 	.word	0x080091f8
 8000a84:	08000b35 	.word	0x08000b35
 8000a88:	080091fc 	.word	0x080091fc
 8000a8c:	20000648 	.word	0x20000648
 8000a90:	08000b4d 	.word	0x08000b4d
 8000a94:	08009204 	.word	0x08009204
 8000a98:	200007d8 	.word	0x200007d8
 8000a9c:	08000b65 	.word	0x08000b65
 8000aa0:	0800920c 	.word	0x0800920c
 8000aa4:	20000784 	.word	0x20000784
 8000aa8:	08000b7d 	.word	0x08000b7d
 8000aac:	08009214 	.word	0x08009214
 8000ab0:	200005f8 	.word	0x200005f8
 8000ab4:	08000b95 	.word	0x08000b95
 8000ab8:	08009220 	.word	0x08009220
 8000abc:	20000620 	.word	0x20000620
 8000ac0:	08000bad 	.word	0x08000bad
 8000ac4:	0800922c 	.word	0x0800922c
 8000ac8:	20000850 	.word	0x20000850
 8000acc:	08000bc5 	.word	0x08000bc5
 8000ad0:	08009238 	.word	0x08009238
 8000ad4:	08000bdd 	.word	0x08000bdd
 8000ad8:	08009244 	.word	0x08009244
 8000adc:	200006f4 	.word	0x200006f4

08000ae0 <executeMain>:

/*------------------------------------------------------------------------------------*/
void executeMain(){
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	//Print Buttons
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <executeButton>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeButton(){
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	//Write Button To screen
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <executeScroll>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeScroll(){
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <executeDisplay>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeDisplay(){
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <executeMode>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeMode(){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <executeAll>:

/*------------------------------------------------------------------------------------*/
void executeAll()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	DisplayOption = DisplayAll;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <executeAll+0x14>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b26:	f000 fb7b 	bl	8001220 <DisplaySaved>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200006fe 	.word	0x200006fe

08000b34 <executePressed>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePressed()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	DisplayOption = DisplayPressed;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <executePressed+0x14>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b3e:	f000 fb6f 	bl	8001220 <DisplaySaved>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200006fe 	.word	0x200006fe

08000b4c <executeEagle>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeEagle()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	ButtonMode = ModeEagle;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <executeEagle+0x14>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b56:	f000 fb63 	bl	8001220 <DisplaySaved>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200006c8 	.word	0x200006c8

08000b64 <executeKicad>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeKicad()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	ButtonMode = ModeKicad;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <executeKicad+0x14>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b6e:	f000 fb57 	bl	8001220 <DisplaySaved>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200006c8 	.word	0x200006c8

08000b7c <executePhotoshop>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePhotoshop()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	ButtonMode = ModePhotoshop;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <executePhotoshop+0x14>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b86:	f000 fb4b 	bl	8001220 <DisplaySaved>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200006c8 	.word	0x200006c8

08000b94 <executePremiere>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePremiere()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	ButtonMode = ModePremiere;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <executePremiere+0x14>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000b9e:	f000 fb3f 	bl	8001220 <DisplaySaved>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200006c8 	.word	0x200006c8

08000bac <executeCustom1>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom1()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom1;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <executeCustom1+0x14>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000bb6:	f000 fb33 	bl	8001220 <DisplaySaved>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200006c8 	.word	0x200006c8

08000bc4 <executeCustom2>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom2()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom2;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <executeCustom2+0x14>)
 8000bca:	2205      	movs	r2, #5
 8000bcc:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000bce:	f000 fb27 	bl	8001220 <DisplaySaved>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200006c8 	.word	0x200006c8

08000bdc <executeCustom3>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom3()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom2;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <executeCustom3+0x14>)
 8000be2:	2205      	movs	r2, #5
 8000be4:	701a      	strb	r2, [r3, #0]
	DisplaySaved();
 8000be6:	f000 fb1b 	bl	8001220 <DisplaySaved>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200006c8 	.word	0x200006c8

08000bf4 <BuildMenu>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void BuildMenu(struct level *currentNode, char name[16], uint8_t numberOfSiblings, void (*execute)(void) , struct level *prevNode, struct level *nextNode,struct level *upNode,struct level *downNode)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71fb      	strb	r3, [r7, #7]
    strcpy(currentNode->name, name);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f008 facd 	bl	80091a8 <strcpy>

   	currentNode->numberOfSiblings=numberOfSiblings;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	741a      	strb	r2, [r3, #16]
    currentNode->prev = prevNode;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	619a      	str	r2, [r3, #24]
    currentNode->next = nextNode;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	615a      	str	r2, [r3, #20]
    currentNode->up = upNode;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6a3a      	ldr	r2, [r7, #32]
 8000c24:	621a      	str	r2, [r3, #32]
    currentNode->down = downNode;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2a:	61da      	str	r2, [r3, #28]
    currentNode->execute = execute;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <Up>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Up(struct level **currentNode)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->up != 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <Up+0x1c>
  (*currentNode) = (*currentNode)->up;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a1a      	ldr	r2, [r3, #32]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Down>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Down(struct level **currentNode)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->down != 0)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <Down+0x20>
  {
	(*currentNode) = (*currentNode)->down;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	69da      	ldr	r2, [r3, #28]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
	setCursorPosition();
 8000c7c:	f000 f976 	bl	8000f6c <setCursorPosition>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Next>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Next(struct level **currentNode)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if((*currentNode)->execute != 0)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <Next+0x1a>
	{
		(*currentNode)->execute();
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	4798      	blx	r3
	}
	if((*currentNode)->next != 0)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <Next+0x32>
	{
		(*currentNode) = (*currentNode)->next;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]

		setCursorPosition();
 8000cb6:	f000 f959 	bl	8000f6c <setCursorPosition>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <Prev>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Prev(struct level **currentNode)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->prev != 0)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <Prev+0x1c>
  (*currentNode) = (*currentNode)->prev;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <MenuTransition>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void MenuTransition(uint8_t *task){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]



	switch(*task)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d862      	bhi.n	8000dbe <MenuTransition+0xd6>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <MenuTransition+0x18>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000dbf 	.word	0x08000dbf
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d3d 	.word	0x08000d3d
 8000d0c:	08000d65 	.word	0x08000d65
 8000d10:	08000d83 	.word	0x08000d83
	{
		case idleE:

			break;
		case upE:
			Up(&currentM);
 8000d14:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <MenuTransition+0xe0>)
 8000d16:	f7ff ff90 	bl	8000c3a <Up>
			upMenuItem(currentM);
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MenuTransition+0xe0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f97a 	bl	8001018 <upMenuItem>
			drawMenu(currentM, cursorPosition);
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MenuTransition+0xe0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <MenuTransition+0xe4>)
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f88e 	bl	8000e50 <drawMenu>
			*task=idleE;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
			break;
 8000d3a:	e041      	b.n	8000dc0 <MenuTransition+0xd8>
		case downE:
			Down(&currentM);
 8000d3c:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <MenuTransition+0xe0>)
 8000d3e:	f7ff ff8f 	bl	8000c60 <Down>
			downMenuItem(currentM);
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MenuTransition+0xe0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f92e 	bl	8000fa8 <downMenuItem>
			drawMenu(currentM, cursorPosition);
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MenuTransition+0xe0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <MenuTransition+0xe4>)
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f87a 	bl	8000e50 <drawMenu>
			*task=idleE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
			break;
 8000d62:	e02d      	b.n	8000dc0 <MenuTransition+0xd8>
		case nextE:
			Next(&currentM);
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MenuTransition+0xe0>)
 8000d66:	f7ff ff8f 	bl	8000c88 <Next>
			drawMenu(currentM, cursorPosition);
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MenuTransition+0xe0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <MenuTransition+0xe4>)
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f86b 	bl	8000e50 <drawMenu>
			*task=idleE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			break;
 8000d80:	e01e      	b.n	8000dc0 <MenuTransition+0xd8>
		case prevE:
			Prev(&currentM);
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MenuTransition+0xe0>)
 8000d84:	f7ff ff9d 	bl	8000cc2 <Prev>
			if(strcmp(currentM->name,"Main") == 0){
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MenuTransition+0xe0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <MenuTransition+0xe8>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff f9dc 	bl	800014c <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <MenuTransition+0xba>
				menuFlag = 0;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MenuTransition+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e009      	b.n	8000db6 <MenuTransition+0xce>

			}else
			{
			  setCursorPosition();
 8000da2:	f000 f8e3 	bl	8000f6c <setCursorPosition>
			  drawMenu(currentM, cursorPosition);
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MenuTransition+0xe0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <MenuTransition+0xe4>)
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f84d 	bl	8000e50 <drawMenu>
			}
			*task=idleE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			break;
 8000dbc:	e000      	b.n	8000dc0 <MenuTransition+0xd8>
		default:
			break;
 8000dbe:	bf00      	nop

	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200006f4 	.word	0x200006f4
 8000dcc:	20000755 	.word	0x20000755
 8000dd0:	080091d0 	.word	0x080091d0
 8000dd4:	200006fc 	.word	0x200006fc

08000dd8 <drawMenuItem>:

/*------------------------------------------------------------------------------------*/


void drawMenuItem(char *str, uint8_t line,uint8_t invert)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
 8000de4:	4613      	mov	r3, r2
 8000de6:	70bb      	strb	r3, [r7, #2]
	ssd1306_SetCursor(10, (line-1)*19+2);
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	461a      	mov	r2, r3
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	441a      	add	r2, r3
 8000df0:	0052      	lsls	r2, r2, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	3b11      	subs	r3, #17
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f000 fcd1 	bl	80017a4 <ssd1306_SetCursor>
	ssd1306_WriteString("          ", Font_11x18,White);
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <drawMenuItem+0x70>)
 8000e04:	2301      	movs	r3, #1
 8000e06:	ca06      	ldmia	r2, {r1, r2}
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <drawMenuItem+0x74>)
 8000e0a:	f000 fca5 	bl	8001758 <ssd1306_WriteString>
	ssd1306_SetCursor(10, (line-1)*19+2);
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	461a      	mov	r2, r3
 8000e12:	00d2      	lsls	r2, r2, #3
 8000e14:	441a      	add	r2, r3
 8000e16:	0052      	lsls	r2, r2, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	3b11      	subs	r3, #17
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	200a      	movs	r0, #10
 8000e24:	f000 fcbe 	bl	80017a4 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, invert==0 ? White : Black);
 8000e28:	78bb      	ldrb	r3, [r7, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2301      	moveq	r3, #1
 8000e30:	2300      	movne	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <drawMenuItem+0x70>)
 8000e36:	ca06      	ldmia	r2, {r1, r2}
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fc8d 	bl	8001758 <ssd1306_WriteString>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	08009250 	.word	0x08009250

08000e50 <drawMenu>:
void drawMenu(struct level *currentNode, uint8_t selectedItem){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	ssd1306_Fill(Black);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fb39 	bl	80014d4 <ssd1306_Fill>



	if(cursorPosition == topMenuPosition)
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <drawMenu+0x108>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <drawMenu+0x10c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d126      	bne.n	8000ebc <drawMenu+0x6c>
	{
		drawMenuItem(currentM->name, 1, White);
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <drawMenu+0x110>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2201      	movs	r2, #1
 8000e74:	2101      	movs	r1, #1
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffae 	bl	8000dd8 <drawMenuItem>
		if(bottomMenuPosition >= topMenuPosition + 1)
 8000e7c:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <drawMenu+0x10c>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <drawMenu+0x114>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <drawMenu+0x48>
		drawMenuItem(currentM->down->name, 2, Black);
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <drawMenu+0x110>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2102      	movs	r1, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa0 	bl	8000dd8 <drawMenuItem>
		if(bottomMenuPosition == topMenuPosition + 2)
 8000e98:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <drawMenu+0x114>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <drawMenu+0x10c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d14f      	bne.n	8000f48 <drawMenu+0xf8>
		drawMenuItem(currentM->down->down->name, 3, Black);
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <drawMenu+0x110>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff8f 	bl	8000dd8 <drawMenuItem>
 8000eba:	e045      	b.n	8000f48 <drawMenu+0xf8>

	}else if(cursorPosition - 1 == topMenuPosition)
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <drawMenu+0x108>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <drawMenu+0x10c>)
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11f      	bne.n	8000f0a <drawMenu+0xba>
	{
		drawMenuItem(currentM->up->name, 1, Black);
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <drawMenu+0x110>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff7f 	bl	8000dd8 <drawMenuItem>
		drawMenuItem(currentM->name, 2, White);
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <drawMenu+0x110>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff78 	bl	8000dd8 <drawMenuItem>
		if(bottomMenuPosition == topMenuPosition + 2)
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <drawMenu+0x114>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <drawMenu+0x10c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d127      	bne.n	8000f48 <drawMenu+0xf8>
		drawMenuItem(currentM->down->name, 3, Black);
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <drawMenu+0x110>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	2200      	movs	r2, #0
 8000f00:	2103      	movs	r1, #3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff68 	bl	8000dd8 <drawMenuItem>
 8000f08:	e01e      	b.n	8000f48 <drawMenu+0xf8>
	}else if(cursorPosition - 2 == topMenuPosition)
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <drawMenu+0x108>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <drawMenu+0x10c>)
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d117      	bne.n	8000f48 <drawMenu+0xf8>
	{
		drawMenuItem(currentM->up->up->name, 1, Black);
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <drawMenu+0x110>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff57 	bl	8000dd8 <drawMenuItem>
		drawMenuItem(currentM->up->name, 2, Black);
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <drawMenu+0x110>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	2200      	movs	r2, #0
 8000f32:	2102      	movs	r1, #2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff4f 	bl	8000dd8 <drawMenuItem>
		drawMenuItem(currentM->name, 3, White);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <drawMenu+0x110>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2103      	movs	r1, #3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff48 	bl	8000dd8 <drawMenuItem>
	}
	ssd1306_UpdateScreen(&hi2cScreen);
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <drawMenu+0x118>)
 8000f4a:	f000 fae5 	bl	8001518 <ssd1306_UpdateScreen>

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000755 	.word	0x20000755
 8000f5c:	200008a1 	.word	0x200008a1
 8000f60:	200006f4 	.word	0x200006f4
 8000f64:	200008a0 	.word	0x200008a0
 8000f68:	20000674 	.word	0x20000674

08000f6c <setCursorPosition>:
/*------------------------------------------------------------------------------------*/

void setCursorPosition(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	topMenuPosition = 1;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <setCursorPosition+0x2c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	bottomMenuPosition = currentM->numberOfSiblings <=3 ? currentM->numberOfSiblings : 3;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <setCursorPosition+0x30>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	7c1b      	ldrb	r3, [r3, #16]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	bf28      	it	cs
 8000f80:	2303      	movcs	r3, #3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <setCursorPosition+0x34>)
 8000f86:	701a      	strb	r2, [r3, #0]
	cursorPosition = 1;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <setCursorPosition+0x38>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]

}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200008a1 	.word	0x200008a1
 8000f9c:	200006f4 	.word	0x200006f4
 8000fa0:	200008a0 	.word	0x200008a0
 8000fa4:	20000755 	.word	0x20000755

08000fa8 <downMenuItem>:

void downMenuItem(struct level *currentNode)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	cursorPosition++;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <downMenuItem+0x64>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <downMenuItem+0x64>)
 8000fba:	701a      	strb	r2, [r3, #0]
	if(cursorPosition>bottomMenuPosition && cursorPosition <= currentNode->numberOfSiblings)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <downMenuItem+0x64>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <downMenuItem+0x68>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d911      	bls.n	8000fec <downMenuItem+0x44>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c1a      	ldrb	r2, [r3, #16]
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <downMenuItem+0x64>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d30b      	bcc.n	8000fec <downMenuItem+0x44>
	{
		topMenuPosition++;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <downMenuItem+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <downMenuItem+0x6c>)
 8000fde:	701a      	strb	r2, [r3, #0]
		bottomMenuPosition++;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <downMenuItem+0x68>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <downMenuItem+0x68>)
 8000fea:	701a      	strb	r2, [r3, #0]
	}
	if(cursorPosition > currentNode->numberOfSiblings)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7c1a      	ldrb	r2, [r3, #16]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <downMenuItem+0x64>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d203      	bcs.n	8001000 <downMenuItem+0x58>
	{
		cursorPosition = currentNode->numberOfSiblings;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7c1a      	ldrb	r2, [r3, #16]
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <downMenuItem+0x64>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000755 	.word	0x20000755
 8001010:	200008a0 	.word	0x200008a0
 8001014:	200008a1 	.word	0x200008a1

08001018 <upMenuItem>:

void upMenuItem(struct level *currentNode){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	cursorPosition--;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <upMenuItem+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3b01      	subs	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <upMenuItem+0x58>)
 800102a:	701a      	strb	r2, [r3, #0]
	if(cursorPosition<topMenuPosition && cursorPosition>0)
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <upMenuItem+0x58>)
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <upMenuItem+0x5c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d20f      	bcs.n	8001058 <upMenuItem+0x40>
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <upMenuItem+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <upMenuItem+0x40>
	{
		topMenuPosition--;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <upMenuItem+0x5c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <upMenuItem+0x5c>)
 800104a:	701a      	strb	r2, [r3, #0]
		bottomMenuPosition--;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <upMenuItem+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <upMenuItem+0x60>)
 8001056:	701a      	strb	r2, [r3, #0]
	}
	if(cursorPosition < 1)
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <upMenuItem+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <upMenuItem+0x4e>
	{
		cursorPosition = 1;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <upMenuItem+0x58>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	}
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	20000755 	.word	0x20000755
 8001074:	200008a1 	.word	0x200008a1
 8001078:	200008a0 	.word	0x200008a0

0800107c <buttonControl>:

void buttonControl()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	pressedButton = scan();
 8001080:	f7ff fbbe 	bl	8000800 <scan>
 8001084:	4603      	mov	r3, r0
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <buttonControl+0x14>)
 800108a:	701a      	strb	r2, [r3, #0]

	//keystroke(key, modifier);


}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200006fd 	.word	0x200006fd

08001094 <encoderControl>:

void encoderControl(){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if(menuFlag==0)
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <encoderControl+0x11c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d133      	bne.n	8001108 <encoderControl+0x74>
	{
		if(readRotary1Button==GPIO_PIN_RESET)
 80010a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a4:	4843      	ldr	r0, [pc, #268]	; (80011b4 <encoderControl+0x120>)
 80010a6:	f000 feaf 	bl	8001e08 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d125      	bne.n	80010fc <encoderControl+0x68>
		{
			if(HAL_GetTick() - menuEnterStartTime > menuDebounceTime)
 80010b0:	f000 fbea 	bl	8001888 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <encoderControl+0x124>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c0:	d973      	bls.n	80011aa <encoderControl+0x116>
			{
				menuFlag=1;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <encoderControl+0x11c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
				rotary1Counter=0x0FFFFFFF;
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <encoderControl+0x128>)
 80010ca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80010ce:	601a      	str	r2, [r3, #0]
				prevRotary1Counter=0x0FFFFFFF;
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <encoderControl+0x12c>)
 80010d2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80010d6:	601a      	str	r2, [r3, #0]
				setCursorPosition();
 80010d8:	f7ff ff48 	bl	8000f6c <setCursorPosition>
				drawMenu(currentM,1);
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <encoderControl+0x130>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff feb4 	bl	8000e50 <drawMenu>
				while(readRotary1Button==GPIO_PIN_RESET);
 80010e8:	bf00      	nop
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <encoderControl+0x120>)
 80010f0:	f000 fe8a 	bl	8001e08 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f7      	beq.n	80010ea <encoderControl+0x56>
			}
			prevRotary1Counter=rotary1Counter;


		}
}
 80010fa:	e056      	b.n	80011aa <encoderControl+0x116>
			menuEnterStartTime = HAL_GetTick();
 80010fc:	f000 fbc4 	bl	8001888 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <encoderControl+0x124>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	e050      	b.n	80011aa <encoderControl+0x116>
	else if(menuFlag==1)
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <encoderControl+0x11c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d14c      	bne.n	80011aa <encoderControl+0x116>
			MenuTransition(&nodeTransition);
 8001110:	482d      	ldr	r0, [pc, #180]	; (80011c8 <encoderControl+0x134>)
 8001112:	f7ff fde9 	bl	8000ce8 <MenuTransition>
			nodeTransition=0;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <encoderControl+0x134>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			if(prevRotary1Counter != rotary1Counter){
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <encoderControl+0x12c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <encoderControl+0x128>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d012      	beq.n	800114e <encoderControl+0xba>
				if(prevRotary1Counter > rotary1Counter)
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <encoderControl+0x12c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <encoderControl+0x128>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d903      	bls.n	800113c <encoderControl+0xa8>
					nodeTransition = downE;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <encoderControl+0x134>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e008      	b.n	800114e <encoderControl+0xba>
				}else if(prevRotary1Counter < rotary1Counter)
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <encoderControl+0x12c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <encoderControl+0x128>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d202      	bcs.n	800114e <encoderControl+0xba>
					nodeTransition = upE;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <encoderControl+0x134>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - menuEnterStartTime > ButtonDebounceTime)
 800114e:	f000 fb9b 	bl	8001888 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <encoderControl+0x124>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800115e:	d920      	bls.n	80011a2 <encoderControl+0x10e>
				if(readRotary1Button==GPIO_PIN_RESET)
 8001160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <encoderControl+0x120>)
 8001166:	f000 fe4f 	bl	8001e08 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d108      	bne.n	8001182 <encoderControl+0xee>
					nodeTransition = nextE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <encoderControl+0x134>)
 8001172:	2203      	movs	r2, #3
 8001174:	701a      	strb	r2, [r3, #0]
					menuEnterStartTime = HAL_GetTick();
 8001176:	f000 fb87 	bl	8001888 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <encoderControl+0x124>)
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e00f      	b.n	80011a2 <encoderControl+0x10e>
				}else if(readRotary2Button==GPIO_PIN_RESET)
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <encoderControl+0x120>)
 8001188:	f000 fe3e 	bl	8001e08 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d107      	bne.n	80011a2 <encoderControl+0x10e>
					nodeTransition = prevE;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <encoderControl+0x134>)
 8001194:	2204      	movs	r2, #4
 8001196:	701a      	strb	r2, [r3, #0]
					menuEnterStartTime = HAL_GetTick();
 8001198:	f000 fb76 	bl	8001888 <HAL_GetTick>
 800119c:	4603      	mov	r3, r0
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <encoderControl+0x124>)
 80011a0:	6013      	str	r3, [r2, #0]
			prevRotary1Counter=rotary1Counter;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <encoderControl+0x128>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <encoderControl+0x12c>)
 80011a8:	6013      	str	r3, [r2, #0]
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200006fc 	.word	0x200006fc
 80011b4:	40010800 	.word	0x40010800
 80011b8:	200007ac 	.word	0x200007ac
 80011bc:	200005f0 	.word	0x200005f0
 80011c0:	20000670 	.word	0x20000670
 80011c4:	200006f4 	.word	0x200006f4
 80011c8:	200005f4 	.word	0x200005f4

080011cc <displayControl>:

void displayControl()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if(menuFlag == 0){
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <displayControl+0x48>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d119      	bne.n	800120c <displayControl+0x40>
		if(DisplayOption == DisplayAll)
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <displayControl+0x4c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0

		}else if(DisplayOption == DisplayPressed)
		{

		}
		if(ButtonMode == ModeEagle)
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <displayControl+0x50>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d012      	beq.n	800120c <displayControl+0x40>
		{

		}else if(ButtonMode == ModeEagle)
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <displayControl+0x50>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00e      	beq.n	800120c <displayControl+0x40>
		{

		}else if(ButtonMode == ModePhotoshop)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <displayControl+0x50>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d00a      	beq.n	800120c <displayControl+0x40>
		{

		}else if(ButtonMode == ModePremiere)
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <displayControl+0x50>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d006      	beq.n	800120c <displayControl+0x40>
		{

		}else if(ButtonMode == ModeCustom1)
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <displayControl+0x50>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d002      	beq.n	800120c <displayControl+0x40>
		{

		}else if(ButtonMode == ModeCustom2)
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <displayControl+0x50>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b05      	cmp	r3, #5
		}else if(ButtonMode == ModeCustom3)
		{

		}
	}
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200006fc 	.word	0x200006fc
 8001218:	200006fe 	.word	0x200006fe
 800121c:	200006c8 	.word	0x200006c8

08001220 <DisplaySaved>:

void DisplaySaved(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8001224:	2000      	movs	r0, #0
 8001226:	f000 f955 	bl	80014d4 <ssd1306_Fill>
	ssd1306_SetCursor(30, 20);
 800122a:	2114      	movs	r1, #20
 800122c:	201e      	movs	r0, #30
 800122e:	f000 fab9 	bl	80017a4 <ssd1306_SetCursor>
	ssd1306_WriteString("Saved", Font_11x18, Black);
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <DisplaySaved+0x38>)
 8001234:	2300      	movs	r3, #0
 8001236:	ca06      	ldmia	r2, {r1, r2}
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <DisplaySaved+0x3c>)
 800123a:	f000 fa8d 	bl	8001758 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&hi2cScreen);
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <DisplaySaved+0x40>)
 8001240:	f000 f96a 	bl	8001518 <ssd1306_UpdateScreen>
	HAL_Delay(750);
 8001244:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001248:	f000 fb28 	bl	800189c <HAL_Delay>
	ssd1306_Fill(Black);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f941 	bl	80014d4 <ssd1306_Fill>

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000004 	.word	0x20000004
 800125c:	0800925c 	.word	0x0800925c
 8001260:	20000674 	.word	0x20000674

08001264 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001270:	230a      	movs	r3, #10
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	1cfb      	adds	r3, r7, #3
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2200      	movs	r2, #0
 8001280:	2178      	movs	r1, #120	; 0x78
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff4c 	bl	8002120 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f000 fafd 	bl	800189c <HAL_Delay>
    int status = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80012a6:	21ae      	movs	r1, #174	; 0xae
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffdb 	bl	8001264 <ssd1306_WriteCommand>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80012b8:	2120      	movs	r1, #32
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffd2 	bl	8001264 <ssd1306_WriteCommand>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012ca:	2110      	movs	r1, #16
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffc9 	bl	8001264 <ssd1306_WriteCommand>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80012dc:	21b0      	movs	r1, #176	; 0xb0
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffc0 	bl	8001264 <ssd1306_WriteCommand>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80012ee:	21c8      	movs	r1, #200	; 0xc8
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffb7 	bl	8001264 <ssd1306_WriteCommand>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffae 	bl	8001264 <ssd1306_WriteCommand>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001312:	2110      	movs	r1, #16
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ffa5 	bl	8001264 <ssd1306_WriteCommand>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff9c 	bl	8001264 <ssd1306_WriteCommand>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001336:	2181      	movs	r1, #129	; 0x81
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff93 	bl	8001264 <ssd1306_WriteCommand>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001348:	21ff      	movs	r1, #255	; 0xff
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff8a 	bl	8001264 <ssd1306_WriteCommand>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800135a:	21a1      	movs	r1, #161	; 0xa1
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff81 	bl	8001264 <ssd1306_WriteCommand>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4413      	add	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800136c:	21a6      	movs	r1, #166	; 0xa6
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff78 	bl	8001264 <ssd1306_WriteCommand>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800137e:	21a8      	movs	r1, #168	; 0xa8
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff6f 	bl	8001264 <ssd1306_WriteCommand>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001390:	213f      	movs	r1, #63	; 0x3f
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff66 	bl	8001264 <ssd1306_WriteCommand>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013a2:	21a4      	movs	r1, #164	; 0xa4
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff5d 	bl	8001264 <ssd1306_WriteCommand>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80013b4:	21d3      	movs	r1, #211	; 0xd3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff54 	bl	8001264 <ssd1306_WriteCommand>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80013c6:	2100      	movs	r1, #0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff4b 	bl	8001264 <ssd1306_WriteCommand>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80013d8:	21d5      	movs	r1, #213	; 0xd5
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff42 	bl	8001264 <ssd1306_WriteCommand>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80013ea:	21f0      	movs	r1, #240	; 0xf0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff39 	bl	8001264 <ssd1306_WriteCommand>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80013fc:	21d9      	movs	r1, #217	; 0xd9
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff30 	bl	8001264 <ssd1306_WriteCommand>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800140e:	2122      	movs	r1, #34	; 0x22
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff27 	bl	8001264 <ssd1306_WriteCommand>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001420:	21da      	movs	r1, #218	; 0xda
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff1e 	bl	8001264 <ssd1306_WriteCommand>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001432:	2112      	movs	r1, #18
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff15 	bl	8001264 <ssd1306_WriteCommand>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001444:	21db      	movs	r1, #219	; 0xdb
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff0c 	bl	8001264 <ssd1306_WriteCommand>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001456:	2120      	movs	r1, #32
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff03 	bl	8001264 <ssd1306_WriteCommand>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001468:	218d      	movs	r1, #141	; 0x8d
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fefa 	bl	8001264 <ssd1306_WriteCommand>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800147a:	2114      	movs	r1, #20
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fef1 	bl	8001264 <ssd1306_WriteCommand>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800148c:	21af      	movs	r1, #175	; 0xaf
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fee8 	bl	8001264 <ssd1306_WriteCommand>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <ssd1306_Init+0x214>
        return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e00f      	b.n	80014c8 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f813 	bl	80014d4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f832 	bl	8001518 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <ssd1306_Init+0x23c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <ssd1306_Init+0x23c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <ssd1306_Init+0x23c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	715a      	strb	r2, [r3, #5]

    return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200005d4 	.word	0x200005d4

080014d4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e00d      	b.n	8001500 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <ssd1306_Fill+0x1a>
 80014ea:	2100      	movs	r1, #0
 80014ec:	e000      	b.n	80014f0 <ssd1306_Fill+0x1c>
 80014ee:	21ff      	movs	r1, #255	; 0xff
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <ssd1306_Fill+0x40>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	460a      	mov	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001506:	d3ed      	bcc.n	80014e4 <ssd1306_Fill+0x10>
    }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	200001b4 	.word	0x200001b4

08001518 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af04      	add	r7, sp, #16
 800151e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e024      	b.n	8001570 <ssd1306_UpdateScreen+0x58>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3b50      	subs	r3, #80	; 0x50
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fe98 	bl	8001264 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001534:	2100      	movs	r1, #0
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fe94 	bl	8001264 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800153c:	2110      	movs	r1, #16
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe90 	bl	8001264 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	4613      	mov	r3, r2
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	461a      	mov	r2, r3
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <ssd1306_UpdateScreen+0x68>)
 8001552:	4413      	add	r3, r2
 8001554:	2264      	movs	r2, #100	; 0x64
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	2284      	movs	r2, #132	; 0x84
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	2178      	movs	r1, #120	; 0x78
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fddb 	bl	8002120 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b07      	cmp	r3, #7
 8001574:	d9d7      	bls.n	8001526 <ssd1306_UpdateScreen+0xe>
    }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200001b4 	.word	0x200001b4

08001584 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001584:	b490      	push	{r4, r7}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b83      	cmp	r3, #131	; 0x83
 800159a:	d854      	bhi.n	8001646 <ssd1306_DrawPixel+0xc2>
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b3f      	cmp	r3, #63	; 0x3f
 80015a0:	d851      	bhi.n	8001646 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <ssd1306_DrawPixel+0xcc>)
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d120      	bne.n	8001600 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	4601      	mov	r1, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	440b      	add	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <ssd1306_DrawPixel+0xd0>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b25c      	sxtb	r4, r3
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	4601      	mov	r1, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	015b      	lsls	r3, r3, #5
 80015f2:	440b      	add	r3, r1
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	b2e1      	uxtb	r1, r4
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <ssd1306_DrawPixel+0xd0>)
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	e023      	b.n	8001648 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	4601      	mov	r1, r0
 800160a:	460b      	mov	r3, r1
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	440b      	add	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <ssd1306_DrawPixel+0xd0>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	b25a      	sxtb	r2, r3
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	b25b      	sxtb	r3, r3
 800162c:	4013      	ands	r3, r2
 800162e:	b25c      	sxtb	r4, r3
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	4601      	mov	r1, r0
 8001634:	460b      	mov	r3, r1
 8001636:	015b      	lsls	r3, r3, #5
 8001638:	440b      	add	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	b2e1      	uxtb	r1, r4
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <ssd1306_DrawPixel+0xd0>)
 8001642:	54d1      	strb	r1, [r2, r3]
 8001644:	e000      	b.n	8001648 <ssd1306_DrawPixel+0xc4>
        return;
 8001646:	bf00      	nop
    }
}
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bc90      	pop	{r4, r7}
 800164e:	4770      	bx	lr
 8001650:	200005d4 	.word	0x200005d4
 8001654:	200001b4 	.word	0x200001b4

08001658 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4604      	mov	r4, r0
 8001660:	1d38      	adds	r0, r7, #4
 8001662:	e880 0006 	stmia.w	r0, {r1, r2}
 8001666:	461a      	mov	r2, r3
 8001668:	4623      	mov	r3, r4
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	4613      	mov	r3, r2
 800166e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <ssd1306_WriteChar+0xfc>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	2b83      	cmp	r3, #131	; 0x83
 800167c:	dc06      	bgt.n	800168c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <ssd1306_WriteChar+0xfc>)
 8001680:	885b      	ldrh	r3, [r3, #2]
 8001682:	461a      	mov	r2, r3
 8001684:	797b      	ldrb	r3, [r7, #5]
 8001686:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	dd01      	ble.n	8001690 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800168c:	2300      	movs	r3, #0
 800168e:	e05d      	b.n	800174c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	e04c      	b.n	8001730 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3b20      	subs	r3, #32
 800169c:	7979      	ldrb	r1, [r7, #5]
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	e034      	b.n	8001720 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <ssd1306_WriteChar+0xfc>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	b2d8      	uxtb	r0, r3
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <ssd1306_WriteChar+0xfc>)
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	7bba      	ldrb	r2, [r7, #14]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff ff4d 	bl	8001584 <ssd1306_DrawPixel>
 80016ea:	e016      	b.n	800171a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <ssd1306_WriteChar+0xfc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b2d8      	uxtb	r0, r3
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <ssd1306_WriteChar+0xfc>)
 80016fc:	885b      	ldrh	r3, [r3, #2]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	f7ff ff35 	bl	8001584 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	3301      	adds	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4293      	cmp	r3, r2
 8001728:	d3c5      	bcc.n	80016b6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	461a      	mov	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4293      	cmp	r3, r2
 8001738:	d3ad      	bcc.n	8001696 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <ssd1306_WriteChar+0xfc>)
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	793b      	ldrb	r3, [r7, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4413      	add	r3, r2
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <ssd1306_WriteChar+0xfc>)
 8001748:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3724      	adds	r7, #36	; 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	200005d4 	.word	0x200005d4

08001758 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	1d38      	adds	r0, r7, #4
 8001762:	e880 0006 	stmia.w	r0, {r1, r2}
 8001766:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001768:	e012      	b.n	8001790 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	7818      	ldrb	r0, [r3, #0]
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	1d3a      	adds	r2, r7, #4
 8001772:	ca06      	ldmia	r2, {r1, r2}
 8001774:	f7ff ff70 	bl	8001658 <ssd1306_WriteChar>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d002      	beq.n	800178a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	e008      	b.n	800179c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e8      	bne.n	800176a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x+1;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <ssd1306_SetCursor+0x30>)
 80017be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <ssd1306_SetCursor+0x30>)
 80017c6:	805a      	strh	r2, [r3, #2]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200005d4 	.word	0x200005d4

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f947 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7fe fe98 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f95f 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f927 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	2000003c 	.word	0x2000003c
 8001860:	20000038 	.word	0x20000038

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	2000003c 	.word	0x2000003c
 8001884:	200008a4 	.word	0x200008a4

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200008a4 	.word	0x200008a4

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000003c 	.word	0x2000003c

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	; (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff2d 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff42 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff35 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	492c      	ldr	r1, [pc, #176]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4918      	ldr	r1, [pc, #96]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]
 8001e42:	4613      	mov	r3, r2
 8001e44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e46:	787b      	ldrb	r3, [r7, #1]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe faf8 	bl	800047c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e12b      	b.n	8002102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fb64 	bl	800058c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001efc:	f002 fca6 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a81      	ldr	r2, [pc, #516]	; (800210c <HAL_I2C_Init+0x274>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <HAL_I2C_Init+0x84>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a80      	ldr	r2, [pc, #512]	; (8002110 <HAL_I2C_Init+0x278>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e006      	b.n	8001f2a <HAL_I2C_Init+0x92>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a7d      	ldr	r2, [pc, #500]	; (8002114 <HAL_I2C_Init+0x27c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e7      	b.n	8002102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a78      	ldr	r2, [pc, #480]	; (8002118 <HAL_I2C_Init+0x280>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_I2C_Init+0x274>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d802      	bhi.n	8001f6c <HAL_I2C_Init+0xd4>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e009      	b.n	8001f80 <HAL_I2C_Init+0xe8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a69      	ldr	r2, [pc, #420]	; (800211c <HAL_I2C_Init+0x284>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	3301      	adds	r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	495c      	ldr	r1, [pc, #368]	; (800210c <HAL_I2C_Init+0x274>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d819      	bhi.n	8001fd4 <HAL_I2C_Init+0x13c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e59      	subs	r1, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_I2C_Init+0x138>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e59      	subs	r1, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	e051      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e04f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_I2C_Init+0x168>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e012      	b.n	8002026 <HAL_I2C_Init+0x18e>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x196>
 800202a:	2301      	movs	r3, #1
 800202c:	e022      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10e      	bne.n	8002054 <HAL_I2C_Init+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e58      	subs	r0, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	440b      	add	r3, r1
 8002044:	fbb0 f3f3 	udiv	r3, r0, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6809      	ldr	r1, [r1, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6911      	ldr	r1, [r2, #16]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	4311      	orrs	r1, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	000186a0 	.word	0x000186a0
 8002110:	001e847f 	.word	0x001e847f
 8002114:	003d08ff 	.word	0x003d08ff
 8002118:	431bde83 	.word	0x431bde83
 800211c:	10624dd3 	.word	0x10624dd3

08002120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7ff fba5 	bl	8001888 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	f040 80d9 	bne.w	8002300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2319      	movs	r3, #25
 8002154:	2201      	movs	r2, #1
 8002156:	496d      	ldr	r1, [pc, #436]	; (800230c <HAL_I2C_Mem_Write+0x1ec>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f971 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	e0cc      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Mem_Write+0x56>
 8002172:	2302      	movs	r3, #2
 8002174:	e0c5      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d007      	beq.n	800219c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_I2C_Mem_Write+0x1f0>)
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021de:	88f8      	ldrh	r0, [r7, #6]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f890 	bl	8002314 <I2C_RequestMemoryWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d052      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e081      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9f2 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11b      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x180>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1aa      	bne.n	80021fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f9de 	bl	800266e <I2C_WaitOnBTFFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e016      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00100002 	.word	0x00100002
 8002310:	ffff0000 	.word	0xffff0000

08002314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2200      	movs	r2, #0
 8002346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f878 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002364:	d103      	bne.n	800236e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e05f      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	492d      	ldr	r1, [pc, #180]	; (800243c <I2C_RequestMemoryWrite+0x128>)
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f8b0 	bl	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e04c      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f91a 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e02b      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	e021      	b.n	8002430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8f4 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e005      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00010002 	.word	0x00010002

08002440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002450:	e025      	b.n	800249e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d021      	beq.n	800249e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7ff fa15 	bl	8001888 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d116      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0220 	orr.w	r2, r3, #32
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e023      	b.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10d      	bne.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4013      	ands	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf0c      	ite	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	2300      	movne	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	e00c      	b.n	80024de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d0b6      	beq.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024fc:	e051      	b.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250c:	d123      	bne.n	8002556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e046      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d021      	beq.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff f993 	bl	8001888 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e020      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10c      	bne.n	80025c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e00b      	b.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d18d      	bne.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f8:	e02d      	b.n	8002656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f878 	bl	80026f0 <I2C_IsAcknowledgeFailed>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02d      	b.n	8002666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d021      	beq.n	8002656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff f939 	bl	8001888 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d116      	bne.n	8002656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d1ca      	bne.n	80025fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800267a:	e02d      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f837 	bl	80026f0 <I2C_IsAcknowledgeFailed>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e02d      	b.n	80026e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d021      	beq.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002694:	f7ff f8f8 	bl	8001888 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d302      	bcc.n	80026aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e007      	b.n	80026e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d1ca      	bne.n	800267c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d11b      	bne.n	8002740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	af06      	add	r7, sp, #24
 8002752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0fd      	b.n	800295a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f006 fa66 	bl	8008c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 f96f 	bl	8004a68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	687e      	ldr	r6, [r7, #4]
 8002792:	466d      	mov	r5, sp
 8002794:	f106 0410 	add.w	r4, r6, #16
 8002798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	602b      	str	r3, [r5, #0]
 80027a0:	1d33      	adds	r3, r6, #4
 80027a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	f002 f939 	bl	8004a1c <USB_CoreInit>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0ce      	b.n	800295a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f96a 	bl	8004a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e04c      	b.n	8002868 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	3301      	adds	r3, #1
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	b298      	uxth	r0, r3
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3336      	adds	r3, #54	; 0x36
 800280c:	4602      	mov	r2, r0
 800280e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3303      	adds	r3, #3
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3338      	adds	r3, #56	; 0x38
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	333c      	adds	r3, #60	; 0x3c
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	3340      	adds	r3, #64	; 0x40
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3301      	adds	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d3ad      	bcc.n	80027ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e044      	b.n	8002902 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	f203 1369 	addw	r3, r3, #361	; 0x169
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3301      	adds	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d3b5      	bcc.n	8002878 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	687e      	ldr	r6, [r7, #4]
 8002914:	466d      	mov	r5, sp
 8002916:	f106 0410 	add.w	r4, r6, #16
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	602b      	str	r3, [r5, #0]
 8002922:	1d33      	adds	r3, r6, #4
 8002924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f002 f8c4 	bl	8004ab4 <USB_DevInit>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00d      	b.n	800295a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fd76 	bl	8007444 <USB_DevDisconnect>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002962 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_PCD_Start+0x16>
 8002974:	2302      	movs	r3, #2
 8002976:	e016      	b.n	80029a6 <HAL_PCD_Start+0x44>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 f859 	bl	8004a3c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800298a:	2101      	movs	r1, #1
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f006 fba8 	bl	80090e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fd4a 	bl	8007430 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b088      	sub	sp, #32
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f004 fd4c 	bl	8007458 <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb48 	bl	8003062 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 fd3e 	bl	8007458 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	d112      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	b292      	uxth	r2, r2
 80029fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f006 f99a 	bl	8008d3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a06:	2100      	movs	r1, #0
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f923 	bl	8002c54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fd20 	bl	8007458 <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a22:	d10b      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a36:	b292      	uxth	r2, r2
 8002a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fd09 	bl	8007458 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d10b      	bne.n	8002a6a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a64:	b292      	uxth	r2, r2
 8002a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fcf2 	bl	8007458 <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d126      	bne.n	8002ace <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0208 	bic.w	r2, r2, #8
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f006 f97b 	bl	8008dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fcc0 	bl	8007458 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	f040 8082 	bne.w	8002bea <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e010      	b.n	8002b0e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	b292      	uxth	r2, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	3320      	adds	r3, #32
 8002b02:	443b      	add	r3, r7
 8002b04:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	d9eb      	bls.n	8002aec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	b292      	uxth	r2, r2
 8002b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b44:	bf00      	nop
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f6      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e00f      	b.n	8002b96 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	7ffa      	ldrb	r2, [r7, #31]
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	440a      	add	r2, r1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	3320      	adds	r3, #32
 8002b88:	443b      	add	r3, r7
 8002b8a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b8e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	3301      	adds	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d9ec      	bls.n	8002b76 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0208 	orr.w	r2, r2, #8
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0204 	orr.w	r2, r2, #4
 8002bde:	b292      	uxth	r2, r2
 8002be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f006 f8c7 	bl	8008d78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fc32 	bl	8007458 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d10e      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c12:	b292      	uxth	r2, r2
 8002c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f006 f880 	bl	8008d1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fc18 	bl	8007458 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d10b      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c46:	b292      	uxth	r2, r2
 8002c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_SetAddress+0x1a>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e013      	b.n	8002c96 <HAL_PCD_SetAddress+0x42>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 fbbf 	bl	800740a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	4611      	mov	r1, r2
 8002caa:	461a      	mov	r2, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	70fb      	strb	r3, [r7, #3]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	803b      	strh	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0e      	bge.n	8002ce2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	705a      	strb	r2, [r3, #1]
 8002ce0:	e00e      	b.n	8002d00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0207 	and.w	r2, r3, #7
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d0c:	883a      	ldrh	r2, [r7, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	78ba      	ldrb	r2, [r7, #2]
 8002d16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d2a:	78bb      	ldrb	r3, [r7, #2]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d102      	bne.n	8002d36 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PCD_EP_Open+0xa6>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e00e      	b.n	8002d62 <HAL_PCD_EP_Open+0xc4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fece 	bl	8004af4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d60:	7afb      	ldrb	r3, [r7, #11]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da0e      	bge.n	8002d9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
 8002d9a:	e00e      	b.n	8002dba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 0207 	and.w	r2, r3, #7
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_PCD_EP_Close+0x6a>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e00e      	b.n	8002df2 <HAL_PCD_EP_Close+0x88>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 f9f0 	bl	80051c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fba2 	bl	80055a0 <USB_EPStartXfer>
 8002e5c:	e005      	b.n	8002e6a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6979      	ldr	r1, [r7, #20]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fb9b 	bl	80055a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fb5f 	bl	80055a0 <USB_EPStartXfer>
 8002ee2:	e005      	b.n	8002ef0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6979      	ldr	r1, [r7, #20]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fb58 	bl	80055a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 0207 	and.w	r2, r3, #7
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d901      	bls.n	8002f18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04c      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0e      	bge.n	8002f3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	705a      	strb	r2, [r3, #1]
 8002f3c:	e00c      	b.n	8002f58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_PCD_EP_SetStall+0x7e>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e01c      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xb8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 f942 	bl	8007210 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f004 fa67 	bl	8007476 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d901      	bls.n	8002fd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e040      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da0e      	bge.n	8002ffe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	705a      	strb	r2, [r3, #1]
 8002ffc:	e00e      	b.n	800301c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 0207 	and.w	r2, r3, #7
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_PCD_EP_ClrStall+0x82>
 8003038:	2302      	movs	r3, #2
 800303a:	e00e      	b.n	800305a <HAL_PCD_EP_ClrStall+0xa0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 f930 	bl	80072b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08e      	sub	sp, #56	; 0x38
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800306a:	e2ec      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003074:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8161 	bne.w	800334e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800308c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d152      	bne.n	800313c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	81fb      	strh	r3, [r7, #14]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3328      	adds	r3, #40	; 0x28
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	3302      	adds	r3, #2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	441a      	add	r2, r3
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030fa:	2100      	movs	r1, #0
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f005 fdf4 	bl	8008cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 829b 	beq.w	8003646 <PCD_EP_ISR_Handler+0x5e4>
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8296 	bne.w	8003646 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003126:	b2da      	uxtb	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	b292      	uxth	r2, r2
 800312e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800313a:	e284      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800314c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	2b00      	cmp	r3, #0
 8003154:	d034      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315e:	b29b      	uxth	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	3306      	adds	r3, #6
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003194:	b29b      	uxth	r3, r3
 8003196:	f004 f9be 	bl	8007516 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031a6:	4013      	ands	r3, r2
 80031a8:	823b      	strh	r3, [r7, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	8a3a      	ldrh	r2, [r7, #16]
 80031b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b4:	b292      	uxth	r2, r2
 80031b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f005 fd69 	bl	8008c90 <HAL_PCD_SetupStageCallback>
 80031be:	e242      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f280 823e 	bge.w	8003646 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031d6:	4013      	ands	r3, r2
 80031d8:	83bb      	strh	r3, [r7, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	8bba      	ldrh	r2, [r7, #28]
 80031e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	3306      	adds	r3, #6
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d019      	beq.n	8003250 <PCD_EP_ISR_Handler+0x1ee>
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	6959      	ldr	r1, [r3, #20]
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003234:	b29b      	uxth	r3, r3
 8003236:	f004 f96e 	bl	8007516 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	441a      	add	r2, r3
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003248:	2100      	movs	r1, #0
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f005 fd32 	bl	8008cb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 81f2 	bne.w	8003646 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d112      	bne.n	80032b0 <PCD_EP_ISR_Handler+0x24e>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003294:	b29a      	uxth	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	e02f      	b.n	8003310 <PCD_EP_ISR_Handler+0x2ae>
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b3e      	cmp	r3, #62	; 0x3e
 80032b6:	d813      	bhi.n	80032e0 <PCD_EP_ISR_Handler+0x27e>
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <PCD_EP_ISR_Handler+0x270>
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	3301      	adds	r3, #1
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	b29a      	uxth	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e017      	b.n	8003310 <PCD_EP_ISR_Handler+0x2ae>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <PCD_EP_ISR_Handler+0x298>
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	3b01      	subs	r3, #1
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	b29b      	uxth	r3, r3
 8003302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	827b      	strh	r3, [r7, #18]
 8003322:	8a7b      	ldrh	r3, [r7, #18]
 8003324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003328:	827b      	strh	r3, [r7, #18]
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003330:	827b      	strh	r3, [r7, #18]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	8a7b      	ldrh	r3, [r7, #18]
 8003338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
 800334c:	e17b      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003360:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003364:	2b00      	cmp	r3, #0
 8003366:	f280 80ea 	bge.w	800353e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29a      	uxth	r2, r3
 800337c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003380:	4013      	ands	r3, r2
 8003382:	853b      	strh	r3, [r7, #40]	; 0x28
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003398:	b292      	uxth	r2, r2
 800339a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800339c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	7b1b      	ldrb	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d122      	bne.n	8003400 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	3306      	adds	r3, #6
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80033e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8087 	beq.w	80034fa <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	6959      	ldr	r1, [r3, #20]
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	88da      	ldrh	r2, [r3, #6]
 80033f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033fa:	f004 f88c 	bl	8007516 <USB_ReadPMA>
 80033fe:	e07c      	b.n	80034fa <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	78db      	ldrb	r3, [r3, #3]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d108      	bne.n	800341a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003408:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800340a:	461a      	mov	r2, r3
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f927 	bl	8003662 <HAL_PCD_EP_DB_Receive>
 8003414:	4603      	mov	r3, r0
 8003416:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003418:	e06f      	b.n	80034fa <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003434:	847b      	strh	r3, [r7, #34]	; 0x22
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003456:	b29b      	uxth	r3, r3
 8003458:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d021      	beq.n	80034b8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	3302      	adds	r3, #2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800349e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02a      	beq.n	80034fa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	6959      	ldr	r1, [r3, #20]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	891a      	ldrh	r2, [r3, #8]
 80034b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034b2:	f004 f830 	bl	8007516 <USB_ReadPMA>
 80034b6:	e020      	b.n	80034fa <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	3306      	adds	r3, #6
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	6959      	ldr	r1, [r3, #20]
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	895a      	ldrh	r2, [r3, #10]
 80034f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034f6:	f004 f80e 	bl	8007516 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003500:	441a      	add	r2, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800350c:	441a      	add	r2, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <PCD_EP_ISR_Handler+0x4c2>
 800351a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d206      	bcs.n	8003532 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f005 fbc2 	bl	8008cb4 <HAL_PCD_DataOutStageCallback>
 8003530:	e005      	b.n	800353e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f002 f831 	bl	80055a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800353e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d07e      	beq.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003548:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	843b      	strh	r3, [r7, #32]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	8c3b      	ldrh	r3, [r7, #32]
 8003588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	78db      	ldrb	r3, [r3, #3]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d00c      	beq.n	80035b6 <PCD_EP_ISR_Handler+0x554>
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	78db      	ldrb	r3, [r3, #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d146      	bne.n	800363a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d141      	bne.n	800363a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	3302      	adds	r3, #2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035de:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	8bfb      	ldrh	r3, [r7, #30]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d906      	bls.n	80035f8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	8bfb      	ldrh	r3, [r7, #30]
 80035f0:	1ad2      	subs	r2, r2, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	e002      	b.n	80035fe <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f005 fb6c 	bl	8008cea <HAL_PCD_DataInStageCallback>
 8003612:	e018      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	8bfb      	ldrh	r3, [r7, #30]
 800361a:	441a      	add	r2, r3
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	8bfb      	ldrh	r3, [r7, #30]
 8003626:	441a      	add	r2, r3
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f001 ffb4 	bl	80055a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003638:	e005      	b.n	8003646 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800363a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800363c:	461a      	mov	r2, r3
 800363e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f91b 	bl	800387c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800364e:	b29b      	uxth	r3, r3
 8003650:	b21b      	sxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	f6ff ad0a 	blt.w	800306c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3738      	adds	r7, #56	; 0x38
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	4613      	mov	r3, r2
 800366e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d07e      	beq.n	8003778 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	3302      	adds	r3, #2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	8b7b      	ldrh	r3, [r7, #26]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d306      	bcc.n	80036bc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	8b7b      	ldrh	r3, [r7, #26]
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	e002      	b.n	80036c2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d123      	bne.n	8003712 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	833b      	strh	r3, [r7, #24]
 80036e6:	8b3b      	ldrh	r3, [r7, #24]
 80036e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036ec:	833b      	strh	r3, [r7, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	8b3b      	ldrh	r3, [r7, #24]
 80036fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01f      	beq.n	800375c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	82fb      	strh	r3, [r7, #22]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	8afb      	ldrh	r3, [r7, #22]
 8003748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003758:	b29b      	uxth	r3, r3
 800375a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800375c:	8b7b      	ldrh	r3, [r7, #26]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8087 	beq.w	8003872 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6959      	ldr	r1, [r3, #20]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	891a      	ldrh	r2, [r3, #8]
 8003770:	8b7b      	ldrh	r3, [r7, #26]
 8003772:	f003 fed0 	bl	8007516 <USB_ReadPMA>
 8003776:	e07c      	b.n	8003872 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	3306      	adds	r3, #6
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	8b7b      	ldrh	r3, [r7, #26]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d306      	bcc.n	80037ba <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	8b7b      	ldrh	r3, [r7, #26]
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	e002      	b.n	80037c0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d123      	bne.n	8003810 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	83fb      	strh	r3, [r7, #30]
 80037e4:	8bfb      	ldrh	r3, [r7, #30]
 80037e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037ea:	83fb      	strh	r3, [r7, #30]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	8bfb      	ldrh	r3, [r7, #30]
 80037fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380c:	b29b      	uxth	r3, r3
 800380e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11f      	bne.n	800385a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	83bb      	strh	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	8bbb      	ldrh	r3, [r7, #28]
 8003846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800384a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800385a:	8b7b      	ldrh	r3, [r7, #26]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6959      	ldr	r1, [r3, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	895a      	ldrh	r2, [r3, #10]
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	f003 fe52 	bl	8007516 <USB_ReadPMA>
    }
  }

  return count;
 8003872:	8b7b      	ldrh	r3, [r7, #26]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0a2      	sub	sp, #136	; 0x88
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 81c7 	beq.w	8003c24 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	3302      	adds	r3, #2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d907      	bls.n	80038de <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	619a      	str	r2, [r3, #24]
 80038dc:	e002      	b.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 80b9 	bne.w	8003a60 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d126      	bne.n	8003944 <HAL_PCD_EP_DB_Transmit+0xc8>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	4413      	add	r3, r2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	011a      	lsls	r2, r3, #4
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	4413      	add	r3, r2
 8003918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003928:	b29a      	uxth	r2, r3
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29a      	uxth	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e01a      	b.n	800397a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d116      	bne.n	800397a <HAL_PCD_EP_DB_Transmit+0xfe>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	4413      	add	r3, r2
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	011a      	lsls	r2, r3, #4
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	4413      	add	r3, r2
 800396e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2200      	movs	r2, #0
 8003978:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d126      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4413      	add	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	011a      	lsls	r2, r3, #4
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	801a      	strh	r2, [r3, #0]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	e017      	b.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x18a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d113      	bne.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x18a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	4413      	add	r3, r2
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	011a      	lsls	r2, r3, #4
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f005 f96c 	bl	8008cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 82d4 	beq.w	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	827b      	strh	r3, [r7, #18]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8a7b      	ldrh	r3, [r7, #18]
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
 8003a5e:	e2b2      	b.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d021      	beq.n	8003aae <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	f040 8286 	bne.w	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d309      	bcc.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	621a      	str	r2, [r3, #32]
 8003af4:	e015      	b.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b0c:	e009      	b.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d155      	bne.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	4413      	add	r3, r2
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	011a      	lsls	r2, r3, #4
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d112      	bne.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x302>
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e047      	b.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x392>
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	2b3e      	cmp	r3, #62	; 0x3e
 8003b82:	d811      	bhi.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b96:	3301      	adds	r3, #1
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e032      	b.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x392>
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x342>
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd2:	801a      	strh	r2, [r3, #0]
 8003bd4:	e01b      	b.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x392>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d117      	bne.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x392>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	643b      	str	r3, [r7, #64]	; 0x40
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	4413      	add	r3, r2
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	011a      	lsls	r2, r3, #4
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfe:	4413      	add	r3, r2
 8003c00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6959      	ldr	r1, [r3, #20]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	891a      	ldrh	r2, [r3, #8]
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f003 fc35 	bl	800748c <USB_WritePMA>
 8003c22:	e1d0      	b.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	3306      	adds	r3, #6
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d307      	bcc.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	619a      	str	r2, [r3, #24]
 8003c6a:	e002      	b.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 80c4 	bne.w	8003e04 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d126      	bne.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	4413      	add	r3, r2
 8003c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011a      	lsls	r2, r3, #4
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	e01a      	b.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d116      	bne.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	677b      	str	r3, [r7, #116]	; 0x74
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	4413      	add	r3, r2
 8003cf0:	677b      	str	r3, [r7, #116]	; 0x74
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	011a      	lsls	r2, r3, #4
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d00:	673b      	str	r3, [r7, #112]	; 0x70
 8003d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d04:	2200      	movs	r2, #0
 8003d06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d12f      	bne.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d2e:	4413      	add	r3, r2
 8003d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d3e:	4413      	add	r3, r2
 8003d40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e017      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d113      	bne.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8c:	4413      	add	r3, r2
 8003d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	011a      	lsls	r2, r3, #4
 8003d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d98:	4413      	add	r3, r2
 8003d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003da2:	2200      	movs	r2, #0
 8003da4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f004 ff9c 	bl	8008cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 8104 	bne.w	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	8013      	strh	r3, [r2, #0]
 8003e02:	e0e0      	b.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d121      	bne.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 80b4 	bne.w	8003fc6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e66:	441a      	add	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d309      	bcc.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e015      	b.n	8003ec6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003ea2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ea6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003eb0:	e009      	b.n	8003ec6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	667b      	str	r3, [r7, #100]	; 0x64
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d155      	bne.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x704>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee8:	4413      	add	r3, r2
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	011a      	lsls	r2, r3, #4
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d112      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e044      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f2c:	d811      	bhi.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	657b      	str	r3, [r7, #84]	; 0x54
 8003f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f40:	3301      	adds	r3, #1
 8003f42:	657b      	str	r3, [r7, #84]	; 0x54
 8003f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e02f      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	657b      	str	r3, [r7, #84]	; 0x54
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f64:	3b01      	subs	r3, #1
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e018      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d114      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	4413      	add	r3, r2
 8003f98:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	011a      	lsls	r2, r3, #4
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8003faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6959      	ldr	r1, [r3, #20]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	895a      	ldrh	r2, [r3, #10]
 8003fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 fa63 	bl	800748c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	823b      	strh	r3, [r7, #16]
 8003fe2:	8a3b      	ldrh	r3, [r7, #16]
 8003fe4:	f083 0310 	eor.w	r3, r3, #16
 8003fe8:	823b      	strh	r3, [r7, #16]
 8003fea:	8a3b      	ldrh	r3, [r7, #16]
 8003fec:	f083 0320 	eor.w	r3, r3, #32
 8003ff0:	823b      	strh	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	8a3b      	ldrh	r3, [r7, #16]
 8004002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3788      	adds	r7, #136	; 0x88
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	4613      	mov	r3, r2
 8004030:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e009      	b.n	800406a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004056:	897a      	ldrh	r2, [r7, #10]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800406a:	893b      	ldrh	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	b29a      	uxth	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	80da      	strh	r2, [r3, #6]
 800407e:	e00b      	b.n	8004098 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2201      	movs	r2, #1
 8004084:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	b29a      	uxth	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	b29a      	uxth	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e272      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8087 	beq.w	80041d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c4:	4b92      	ldr	r3, [pc, #584]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00c      	beq.n	80040ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d112      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
 80040dc:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4b89      	ldr	r3, [pc, #548]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x12c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d168      	bne.n	80041d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e24c      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x76>
 800410c:	4b80      	ldr	r3, [pc, #512]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7f      	ldr	r2, [pc, #508]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02e      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b78      	ldr	r3, [pc, #480]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a77      	ldr	r2, [pc, #476]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xbc>
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a71      	ldr	r2, [pc, #452]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b6f      	ldr	r3, [pc, #444]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6e      	ldr	r2, [pc, #440]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 8004160:	4b6b      	ldr	r3, [pc, #428]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b68      	ldr	r3, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a67      	ldr	r2, [pc, #412]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd fb82 	bl	8001888 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd fb7e 	bl	8001888 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e200      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b5d      	ldr	r3, [pc, #372]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xe4>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fd fb6e 	bl	8001888 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fd fb6a 	bl	8001888 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1ec      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b53      	ldr	r3, [pc, #332]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x10c>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b4c      	ldr	r3, [pc, #304]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041ea:	4b49      	ldr	r3, [pc, #292]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1c0      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4939      	ldr	r1, [pc, #228]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <HAL_RCC_OscConfig+0x270>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd fb23 	bl	8001888 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fd fb1f 	bl	8001888 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1a1      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4927      	ldr	r1, [pc, #156]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_RCC_OscConfig+0x270>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fd fb02 	bl	8001888 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fd fafe 	bl	8001888 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e180      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03a      	beq.n	8004328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HAL_RCC_OscConfig+0x274>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fd fae2 	bl	8001888 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fd fade 	bl	8001888 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e160      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 fac4 	bl	8004874 <RCC_Delay>
 80042ec:	e01c      	b.n	8004328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_OscConfig+0x274>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f4:	f7fd fac8 	bl	8001888 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fa:	e00f      	b.n	800431c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fd fac4 	bl	8001888 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d908      	bls.n	800431c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e146      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	42420000 	.word	0x42420000
 8004318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b92      	ldr	r3, [pc, #584]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e9      	bne.n	80042fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a6 	beq.w	8004482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b8b      	ldr	r3, [pc, #556]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4a87      	ldr	r2, [pc, #540]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	61d3      	str	r3, [r2, #28]
 8004352:	4b85      	ldr	r3, [pc, #532]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b82      	ldr	r3, [pc, #520]	; (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b7f      	ldr	r3, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7e      	ldr	r2, [pc, #504]	; (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fd fa85 	bl	8001888 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fd fa81 	bl	8001888 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	; 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e103      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b75      	ldr	r3, [pc, #468]	; (800456c <HAL_RCC_OscConfig+0x4c8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x312>
 80043a8:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	e02d      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043be:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a69      	ldr	r2, [pc, #420]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6213      	str	r3, [r2, #32]
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a66      	ldr	r2, [pc, #408]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6213      	str	r3, [r2, #32]
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x356>
 80043e0:	4b61      	ldr	r3, [pc, #388]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4a60      	ldr	r2, [pc, #384]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6213      	str	r3, [r2, #32]
 80043ec:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6213      	str	r3, [r2, #32]
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a5a      	ldr	r2, [pc, #360]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6213      	str	r3, [r2, #32]
 8004406:	4b58      	ldr	r3, [pc, #352]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a57      	ldr	r2, [pc, #348]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441a:	f7fd fa35 	bl	8001888 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd fa31 	bl	8001888 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0b1      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x37e>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fd fa1f 	bl	8001888 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fa1b 	bl	8001888 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e09b      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4a3b      	ldr	r2, [pc, #236]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d061      	beq.n	800455c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d146      	bne.n	800452e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd f9ef 	bl	8001888 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fd f9eb 	bl	8001888 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e06d      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d108      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4921      	ldr	r1, [pc, #132]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e8:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a19      	ldr	r1, [r3, #32]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	430b      	orrs	r3, r1
 80044fa:	491b      	ldr	r1, [pc, #108]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x4cc>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fd f9bf 	bl	8001888 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd f9bb 	bl	8001888 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e03d      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x46a>
 800452c:	e035      	b.n	800459a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_RCC_OscConfig+0x4cc>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd f9a8 	bl	8001888 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd f9a4 	bl	8001888 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e026      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x498>
 800455a:	e01e      	b.n	800459a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e019      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
 8004570:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCC_OscConfig+0x500>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0d0      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d910      	bls.n	80045ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b67      	ldr	r3, [pc, #412]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 0207 	bic.w	r2, r3, #7
 80045d2:	4965      	ldr	r1, [pc, #404]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b8      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800460e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	494d      	ldr	r1, [pc, #308]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d040      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d115      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07f      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e073      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	4b3d      	ldr	r3, [pc, #244]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e06b      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004686:	4b39      	ldr	r3, [pc, #228]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4936      	ldr	r1, [pc, #216]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004698:	f7fd f8f6 	bl	8001888 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fd f8f2 	bl	8001888 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e053      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 020c 	and.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d1eb      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d210      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 0207 	bic.w	r2, r3, #7
 80046de:	4922      	ldr	r1, [pc, #136]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e032      	b.n	800475e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004736:	f000 f821 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490a      	ldr	r1, [pc, #40]	; (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1cc>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1d0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd f854 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40021000 	.word	0x40021000
 8004770:	080092b0 	.word	0x080092b0
 8004774:	20000000 	.word	0x20000000
 8004778:	20000038 	.word	0x20000038

0800477c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	b490      	push	{r4, r7}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <HAL_RCC_GetSysClockFreq+0xac>)
 8004784:	1d3c      	adds	r4, r7, #4
 8004786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800478c:	f240 2301 	movw	r3, #513	; 0x201
 8004790:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047a6:	4b21      	ldr	r3, [pc, #132]	; (800482c <HAL_RCC_GetSysClockFreq+0xb0>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x40>
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x46>
 80047ba:	e02b      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047bc:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047be:	623b      	str	r3, [r7, #32]
      break;
 80047c0:	e02b      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	0c9b      	lsrs	r3, r3, #18
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	443b      	add	r3, r7
 80047ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCC_GetSysClockFreq+0xb0>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	0c5b      	lsrs	r3, r3, #17
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	3328      	adds	r3, #40	; 0x28
 80047ea:	443b      	add	r3, r7
 80047ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047f6:	fb03 f202 	mul.w	r2, r3, r2
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	e004      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4a0b      	ldr	r2, [pc, #44]	; (8004834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	623b      	str	r3, [r7, #32]
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004816:	623b      	str	r3, [r7, #32]
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6a3b      	ldr	r3, [r7, #32]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bc90      	pop	{r4, r7}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	08009264 	.word	0x08009264
 800482c:	40021000 	.word	0x40021000
 8004830:	007a1200 	.word	0x007a1200
 8004834:	003d0900 	.word	0x003d0900

08004838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b02      	ldr	r3, [pc, #8]	; (8004848 <HAL_RCC_GetHCLKFreq+0x10>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	20000000 	.word	0x20000000

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff2 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	080092c0 	.word	0x080092c0

08004874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <RCC_Delay+0x34>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <RCC_Delay+0x38>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0a5b      	lsrs	r3, r3, #9
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004890:	bf00      	nop
  }
  while (Delay --);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1e5a      	subs	r2, r3, #1
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f9      	bne.n	8004890 <RCC_Delay+0x1c>
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	20000000 	.word	0x20000000
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07d      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d0:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048dc:	4b4c      	ldr	r3, [pc, #304]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4a4b      	ldr	r2, [pc, #300]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	61d3      	str	r3, [r2, #28]
 80048e8:	4b49      	ldr	r3, [pc, #292]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d118      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800490a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004910:	f7fc ffba 	bl	8001888 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004916:	e008      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004918:	f7fc ffb6 	bl	8001888 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e06d      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492a:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004936:	4b36      	ldr	r3, [pc, #216]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d027      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004954:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800496a:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fc ff85 	bl	8001888 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	e00a      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fc ff81 	bl	8001888 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e036      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ee      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4917      	ldr	r1, [pc, #92]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	490b      	ldr	r1, [pc, #44]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4904      	ldr	r1, [pc, #16]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
 8004a18:	42420440 	.word	0x42420440

08004a1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	f107 0014 	add.w	r0, r7, #20
 8004a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4770      	bx	lr

08004a3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4013      	ands	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	f107 0014 	add.w	r0, r7, #20
 8004ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	b004      	add	sp, #16
 8004af2:	4770      	bx	lr

08004af4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b09b      	sub	sp, #108	; 0x6c
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d81f      	bhi.n	8004b66 <USB_ActivateEndpoint+0x72>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <USB_ActivateEndpoint+0x38>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b6f 	.word	0x08004b6f
 8004b38:	08004b4b 	.word	0x08004b4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b48:	e012      	b.n	8004b70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b56:	e00b      	b.n	8004b70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b64:	e004      	b.n	8004b70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b6c:	e000      	b.n	8004b70 <USB_ActivateEndpoint+0x7c>
      break;
 8004b6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	7b1b      	ldrb	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8149 	bne.w	8004e74 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8084 	beq.w	8004cf4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	011a      	lsls	r2, r3, #4
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	88db      	ldrh	r3, [r3, #6]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	81fb      	strh	r3, [r7, #14]
 8004c2e:	89fb      	ldrh	r3, [r7, #14]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <USB_ActivateEndpoint+0x17c>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	81bb      	strh	r3, [r7, #12]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	89bb      	ldrh	r3, [r7, #12]
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	78db      	ldrb	r3, [r3, #3]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d020      	beq.n	8004cba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8e:	813b      	strh	r3, [r7, #8]
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	f083 0320 	eor.w	r3, r3, #32
 8004c96:	813b      	strh	r3, [r7, #8]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
 8004cb8:	e27f      	b.n	80051ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd0:	817b      	strh	r3, [r7, #10]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
 8004cf2:	e262      	b.n	80051ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	4413      	add	r3, r2
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	011a      	lsls	r2, r3, #4
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	88db      	ldrh	r3, [r3, #6]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	4413      	add	r3, r2
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	011a      	lsls	r2, r3, #4
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <USB_ActivateEndpoint+0x286>
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	801a      	strh	r2, [r3, #0]
 8004d78:	e02f      	b.n	8004dda <USB_ActivateEndpoint+0x2e6>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d80:	d813      	bhi.n	8004daa <USB_ActivateEndpoint+0x2b6>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <USB_ActivateEndpoint+0x2a8>
 8004d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d98:	3301      	adds	r3, #1
 8004d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	029b      	lsls	r3, r3, #10
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e017      	b.n	8004dda <USB_ActivateEndpoint+0x2e6>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <USB_ActivateEndpoint+0x2d0>
 8004dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	83fb      	strh	r3, [r7, #30]
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01b      	beq.n	8004e2a <USB_ActivateEndpoint+0x336>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	83bb      	strh	r3, [r7, #28]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8bbb      	ldrh	r3, [r7, #28]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	837b      	strh	r3, [r7, #26]
 8004e42:	8b7b      	ldrh	r3, [r7, #26]
 8004e44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e48:	837b      	strh	r3, [r7, #26]
 8004e4a:	8b7b      	ldrh	r3, [r7, #26]
 8004e4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e50:	837b      	strh	r3, [r7, #26]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	8b7b      	ldrh	r3, [r7, #26]
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
 8004e72:	e1a2      	b.n	80051ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec0:	4413      	add	r3, r2
 8004ec2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	011a      	lsls	r2, r3, #4
 8004eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	891b      	ldrh	r3, [r3, #8]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	4413      	add	r3, r2
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	011a      	lsls	r2, r3, #4
 8004efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	895b      	ldrh	r3, [r3, #10]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 8091 	bne.w	8005044 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01b      	beq.n	8004f72 <USB_ActivateEndpoint+0x47e>
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01b      	beq.n	8004fc2 <USB_ActivateEndpoint+0x4ce>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fe0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fe2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	867b      	strh	r3, [r7, #50]	; 0x32
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]
 8005042:	e0ba      	b.n	80051ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01d      	beq.n	800509c <USB_ActivateEndpoint+0x5a8>
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01d      	beq.n	80050f4 <USB_ActivateEndpoint+0x600>
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	78db      	ldrb	r3, [r3, #3]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d024      	beq.n	8005146 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005116:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800511a:	f083 0320 	eor.w	r3, r3, #32
 800511e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]
 8005144:	e01d      	b.n	8005182 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800516e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517e:	b29b      	uxth	r3, r3
 8005180:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005198:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051be:	4618      	mov	r0, r3
 80051c0:	376c      	adds	r7, #108	; 0x6c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b08d      	sub	sp, #52	; 0x34
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	7b1b      	ldrb	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 808e 	bne.w	80052f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d044      	beq.n	800526e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	89bb      	ldrh	r3, [r7, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <USB_DeactivateEndpoint+0x6c>
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	813b      	strh	r3, [r7, #8]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	893b      	ldrh	r3, [r7, #8]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
 800526c:	e192      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	827b      	strh	r3, [r7, #18]
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <USB_DeactivateEndpoint+0xf6>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	823b      	strh	r3, [r7, #16]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8a3b      	ldrh	r3, [r7, #16]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	81fb      	strh	r3, [r7, #14]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e14d      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 80a5 	bne.w	800544c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	843b      	strh	r3, [r7, #32]
 8005310:	8c3b      	ldrh	r3, [r7, #32]
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <USB_DeactivateEndpoint+0x18a>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	83fb      	strh	r3, [r7, #30]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	83bb      	strh	r3, [r7, #28]
 8005360:	8bbb      	ldrh	r3, [r7, #28]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01b      	beq.n	80053a2 <USB_DeactivateEndpoint+0x1da>
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	837b      	strh	r3, [r7, #26]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	833b      	strh	r3, [r7, #24]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8b3b      	ldrh	r3, [r7, #24]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	82fb      	strh	r3, [r7, #22]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	82bb      	strh	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8abb      	ldrh	r3, [r7, #20]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
 800544a:	e0a3      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800545a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800545c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <USB_DeactivateEndpoint+0x2d4>
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <USB_DeactivateEndpoint+0x324>
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	847b      	strh	r3, [r7, #34]	; 0x22
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3734      	adds	r7, #52	; 0x34
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b0cc      	sub	sp, #304	; 0x130
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ae:	6018      	str	r0, [r3, #0]
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	f041 817d 	bne.w	80068c6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d908      	bls.n	80055fa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055f8:	e007      	b.n	800560a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	7b1b      	ldrb	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d152      	bne.n	80056c0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	88da      	ldrh	r2, [r3, #6]
 8005632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005636:	b29b      	uxth	r3, r3
 8005638:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800563c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f001 ff23 	bl	800748c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800564e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005652:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005670:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005678:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	440a      	add	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	011a      	lsls	r2, r3, #4
 8005690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005694:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4413      	add	r3, r2
 800569c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	f001 b8b5 	b.w	800682a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	f040 84c6 	bne.w	800605e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	f240 8443 	bls.w	8005f76 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800574c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 823e 	beq.w	8005c0e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005796:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800579a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800579e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 809a 	bne.w	80058ec <USB_EPStartXfer+0x34c>
 80057b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4619      	mov	r1, r3
 80057de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057ea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	440a      	add	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4413      	add	r3, r2
 800580e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d122      	bne.n	800586a <USB_EPStartXfer+0x2ca>
 8005824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005828:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005836:	b29a      	uxth	r2, r3
 8005838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e079      	b.n	800595e <USB_EPStartXfer+0x3be>
 800586a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586e:	2b3e      	cmp	r3, #62	; 0x3e
 8005870:	d81b      	bhi.n	80058aa <USB_EPStartXfer+0x30a>
 8005872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <USB_EPStartXfer+0x2f2>
 8005888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800588c:	3301      	adds	r3, #1
 800588e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005896:	b29b      	uxth	r3, r3
 8005898:	029b      	lsls	r3, r3, #10
 800589a:	b29a      	uxth	r2, r3
 800589c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	e059      	b.n	800595e <USB_EPStartXfer+0x3be>
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <USB_EPStartXfer+0x32a>
 80058c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058c4:	3b01      	subs	r3, #1
 80058c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	029b      	lsls	r3, r3, #10
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058dc:	b29a      	uxth	r2, r3
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e038      	b.n	800595e <USB_EPStartXfer+0x3be>
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d130      	bne.n	800595e <USB_EPStartXfer+0x3be>
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005916:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800591a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	440a      	add	r2, r1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	011a      	lsls	r2, r3, #4
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4413      	add	r3, r2
 800593e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	b29a      	uxth	r2, r3
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800595e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	895b      	ldrh	r3, [r3, #10]
 800596a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6959      	ldr	r1, [r3, #20]
 800597a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597e:	b29b      	uxth	r3, r3
 8005980:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005984:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005988:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f001 fd7d 	bl	800748c <USB_WritePMA>
            ep->xfer_buff += len;
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a2:	441a      	add	r2, r3
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d90f      	bls.n	80059ec <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	1ad2      	subs	r2, r2, r3
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	621a      	str	r2, [r3, #32]
 80059ea:	e00e      	b.n	8005a0a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 809a 	bne.w	8005b50 <USB_EPStartXfer+0x5b0>
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a28:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a4e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	440a      	add	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d122      	bne.n	8005ace <USB_EPStartXfer+0x52e>
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e083      	b.n	8005bd6 <USB_EPStartXfer+0x636>
 8005ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad4:	d81b      	bhi.n	8005b0e <USB_EPStartXfer+0x56e>
 8005ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <USB_EPStartXfer+0x556>
 8005aec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005af0:	3301      	adds	r3, #1
 8005af2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005af6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	029b      	lsls	r3, r3, #10
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e063      	b.n	8005bd6 <USB_EPStartXfer+0x636>
 8005b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <USB_EPStartXfer+0x58e>
 8005b24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e042      	b.n	8005bd6 <USB_EPStartXfer+0x636>
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d13a      	bne.n	8005bd6 <USB_EPStartXfer+0x636>
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4619      	mov	r1, r3
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	440a      	add	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	891b      	ldrh	r3, [r3, #8]
 8005be2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bfc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c04:	6800      	ldr	r0, [r0, #0]
 8005c06:	f001 fc41 	bl	800748c <USB_WritePMA>
 8005c0a:	f000 be0e 	b.w	800682a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d16d      	bne.n	8005cfa <USB_EPStartXfer+0x75a>
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	4413      	add	r3, r2
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	011a      	lsls	r2, r3, #4
 8005c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d112      	bne.n	8005c88 <USB_EPStartXfer+0x6e8>
 8005c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e063      	b.n	8005d50 <USB_EPStartXfer+0x7b0>
 8005c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8e:	d817      	bhi.n	8005cc0 <USB_EPStartXfer+0x720>
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <USB_EPStartXfer+0x710>
 8005ca6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005caa:	3301      	adds	r3, #1
 8005cac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e047      	b.n	8005d50 <USB_EPStartXfer+0x7b0>
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <USB_EPStartXfer+0x740>
 8005cd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ce0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e02a      	b.n	8005d50 <USB_EPStartXfer+0x7b0>
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d122      	bne.n	8005d50 <USB_EPStartXfer+0x7b0>
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	653b      	str	r3, [r7, #80]	; 0x50
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2a:	4413      	add	r3, r2
 8005d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	891b      	ldrh	r3, [r3, #8]
 8005d5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6959      	ldr	r1, [r3, #20]
 8005d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d7e:	6800      	ldr	r0, [r0, #0]
 8005d80:	f001 fb84 	bl	800748c <USB_WritePMA>
            ep->xfer_buff += len;
 8005d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d94:	441a      	add	r2, r3
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d90f      	bls.n	8005dde <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	621a      	str	r2, [r3, #32]
 8005ddc:	e00e      	b.n	8005dfc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d16d      	bne.n	8005ef4 <USB_EPStartXfer+0x954>
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	4413      	add	r3, r2
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
 8005e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d112      	bne.n	8005e82 <USB_EPStartXfer+0x8e2>
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	e05d      	b.n	8005f3e <USB_EPStartXfer+0x99e>
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	2b3e      	cmp	r3, #62	; 0x3e
 8005e88:	d817      	bhi.n	8005eba <USB_EPStartXfer+0x91a>
 8005e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <USB_EPStartXfer+0x90a>
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e041      	b.n	8005f3e <USB_EPStartXfer+0x99e>
 8005eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <USB_EPStartXfer+0x93a>
 8005ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	029b      	lsls	r3, r3, #10
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e024      	b.n	8005f3e <USB_EPStartXfer+0x99e>
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d11c      	bne.n	8005f3e <USB_EPStartXfer+0x99e>
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f18:	4413      	add	r3, r2
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	011a      	lsls	r2, r3, #4
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	895b      	ldrh	r3, [r3, #10]
 8005f4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6959      	ldr	r1, [r3, #20]
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f001 fa8d 	bl	800748c <USB_WritePMA>
 8005f72:	f000 bc5a 	b.w	800682a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	4413      	add	r3, r2
 8006004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006016:	4413      	add	r3, r2
 8006018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800601c:	65bb      	str	r3, [r7, #88]	; 0x58
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	b29a      	uxth	r2, r3
 8006024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006026:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	891b      	ldrh	r3, [r3, #8]
 8006034:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6959      	ldr	r1, [r3, #20]
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800604e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006052:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f001 fa18 	bl	800748c <USB_WritePMA>
 800605c:	e3e5      	b.n	800682a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 81bc 	beq.w	8006478 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d16d      	bne.n	80061fa <USB_EPStartXfer+0xc5a>
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	67bb      	str	r3, [r7, #120]	; 0x78
 800612a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006138:	b29b      	uxth	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613e:	4413      	add	r3, r2
 8006140:	67bb      	str	r3, [r7, #120]	; 0x78
 8006142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	011a      	lsls	r2, r3, #4
 8006150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006152:	4413      	add	r3, r2
 8006154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006158:	677b      	str	r3, [r7, #116]	; 0x74
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d112      	bne.n	8006188 <USB_EPStartXfer+0xbe8>
 8006162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616c:	b29a      	uxth	r2, r3
 800616e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006180:	b29a      	uxth	r2, r3
 8006182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	e060      	b.n	800624a <USB_EPStartXfer+0xcaa>
 8006188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618c:	2b3e      	cmp	r3, #62	; 0x3e
 800618e:	d817      	bhi.n	80061c0 <USB_EPStartXfer+0xc20>
 8006190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <USB_EPStartXfer+0xc10>
 80061a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061aa:	3301      	adds	r3, #1
 80061ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e044      	b.n	800624a <USB_EPStartXfer+0xcaa>
 80061c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <USB_EPStartXfer+0xc40>
 80061d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061da:	3b01      	subs	r3, #1
 80061dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e027      	b.n	800624a <USB_EPStartXfer+0xcaa>
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d11f      	bne.n	800624a <USB_EPStartXfer+0xcaa>
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006220:	4413      	add	r3, r2
 8006222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	011a      	lsls	r2, r3, #4
 8006234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006238:	4413      	add	r3, r2
 800623a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800623e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006244:	b29a      	uxth	r2, r3
 8006246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006248:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	895b      	ldrh	r3, [r3, #10]
 8006256:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6959      	ldr	r1, [r3, #20]
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29b      	uxth	r3, r3
 800626c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006270:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006274:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f001 f907 	bl	800748c <USB_WritePMA>
          ep->xfer_buff += len;
 800627e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	441a      	add	r2, r3
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d90f      	bls.n	80062d8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	621a      	str	r2, [r3, #32]
 80062d6:	e00e      	b.n	80062f6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80062f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8295 	beq.w	800682a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d16d      	bne.n	80063ec <USB_EPStartXfer+0xe4c>
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	66bb      	str	r3, [r7, #104]	; 0x68
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006330:	4413      	add	r3, r2
 8006332:	66bb      	str	r3, [r7, #104]	; 0x68
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006344:	4413      	add	r3, r2
 8006346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800634a:	667b      	str	r3, [r7, #100]	; 0x64
 800634c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d112      	bne.n	800637a <USB_EPStartXfer+0xdda>
 8006354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800635e:	b29a      	uxth	r2, r3
 8006360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006372:	b29a      	uxth	r2, r3
 8006374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	e063      	b.n	8006442 <USB_EPStartXfer+0xea2>
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	2b3e      	cmp	r3, #62	; 0x3e
 8006380:	d817      	bhi.n	80063b2 <USB_EPStartXfer+0xe12>
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800638c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_EPStartXfer+0xe02>
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	3301      	adds	r3, #1
 800639e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	029b      	lsls	r3, r3, #10
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e047      	b.n	8006442 <USB_EPStartXfer+0xea2>
 80063b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <USB_EPStartXfer+0xe32>
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063cc:	3b01      	subs	r3, #1
 80063ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	029b      	lsls	r3, r3, #10
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e02a      	b.n	8006442 <USB_EPStartXfer+0xea2>
 80063ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d122      	bne.n	8006442 <USB_EPStartXfer+0xea2>
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	673b      	str	r3, [r7, #112]	; 0x70
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800641c:	4413      	add	r3, r2
 800641e:	673b      	str	r3, [r7, #112]	; 0x70
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	011a      	lsls	r2, r3, #4
 800642e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006430:	4413      	add	r3, r2
 8006432:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	b29a      	uxth	r2, r3
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	891b      	ldrh	r3, [r3, #8]
 800644e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6959      	ldr	r1, [r3, #20]
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	b29b      	uxth	r3, r3
 8006464:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006468:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800646c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006470:	6800      	ldr	r0, [r0, #0]
 8006472:	f001 f80b 	bl	800748c <USB_WritePMA>
 8006476:	e1d8      	b.n	800682a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d178      	bne.n	800657a <USB_EPStartXfer+0xfda>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	011a      	lsls	r2, r3, #4
 80064c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d116      	bne.n	8006504 <USB_EPStartXfer+0xf64>
 80064d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e06b      	b.n	80065dc <USB_EPStartXfer+0x103c>
 8006504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006508:	2b3e      	cmp	r3, #62	; 0x3e
 800650a:	d818      	bhi.n	800653e <USB_EPStartXfer+0xf9e>
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USB_EPStartXfer+0xf8c>
 8006522:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006526:	3301      	adds	r3, #1
 8006528:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800652c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e04e      	b.n	80065dc <USB_EPStartXfer+0x103c>
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USB_EPStartXfer+0xfbe>
 8006554:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006558:	3b01      	subs	r3, #1
 800655a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800655e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e030      	b.n	80065dc <USB_EPStartXfer+0x103c>
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d128      	bne.n	80065dc <USB_EPStartXfer+0x103c>
 800658a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ae:	4413      	add	r3, r2
 80065b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	011a      	lsls	r2, r3, #4
 80065c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	891b      	ldrh	r3, [r3, #8]
 80065e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6959      	ldr	r1, [r3, #20]
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006602:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006606:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	f000 ff3e 	bl	800748c <USB_WritePMA>
          ep->xfer_buff += len;
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006620:	441a      	add	r2, r3
 8006622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	d90f      	bls.n	800666a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	621a      	str	r2, [r3, #32]
 8006668:	e00e      	b.n	8006688 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80cc 	beq.w	800682a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d178      	bne.n	80067a2 <USB_EPStartXfer+0x1202>
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d4:	4413      	add	r3, r2
 80066d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	011a      	lsls	r2, r3, #4
 80066e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d116      	bne.n	800672c <USB_EPStartXfer+0x118c>
 80066fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e064      	b.n	80067f6 <USB_EPStartXfer+0x1256>
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	2b3e      	cmp	r3, #62	; 0x3e
 8006732:	d818      	bhi.n	8006766 <USB_EPStartXfer+0x11c6>
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <USB_EPStartXfer+0x11b4>
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674e:	3301      	adds	r3, #1
 8006750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e047      	b.n	80067f6 <USB_EPStartXfer+0x1256>
 8006766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0x11e6>
 800677c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800678a:	b29b      	uxth	r3, r3
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e029      	b.n	80067f6 <USB_EPStartXfer+0x1256>
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d121      	bne.n	80067f6 <USB_EPStartXfer+0x1256>
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067c8:	4413      	add	r3, r2
 80067ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	011a      	lsls	r2, r3, #4
 80067dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	895b      	ldrh	r3, [r3, #10]
 8006802:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006816:	b29b      	uxth	r3, r3
 8006818:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800681c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006820:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006824:	6800      	ldr	r0, [r0, #0]
 8006826:	f000 fe31 	bl	800748c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800684c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	8013      	strh	r3, [r2, #0]
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006866:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800686a:	8812      	ldrh	r2, [r2, #0]
 800686c:	f082 0210 	eor.w	r2, r2, #16
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800687a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800687e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006882:	8812      	ldrh	r2, [r2, #0]
 8006884:	f082 0220 	eor.w	r2, r2, #32
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	441a      	add	r2, r3
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
 80068c2:	f000 bc9f 	b.w	8007204 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	7b1b      	ldrb	r3, [r3, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f040 80ae 	bne.w	8006a34 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d917      	bls.n	8006924 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80068f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	619a      	str	r2, [r3, #24]
 8006922:	e00e      	b.n	8006942 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695e:	b29b      	uxth	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006966:	4413      	add	r3, r2
 8006968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800696c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	011a      	lsls	r2, r3, #4
 800697a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800697e:	4413      	add	r3, r2
 8006980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d116      	bne.n	80069be <USB_EPStartXfer+0x141e>
 8006990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699c:	b29a      	uxth	r2, r3
 800699e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e3e8      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	2b3e      	cmp	r3, #62	; 0x3e
 80069c4:	d818      	bhi.n	80069f8 <USB_EPStartXfer+0x1458>
 80069c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <USB_EPStartXfer+0x1446>
 80069dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e0:	3301      	adds	r3, #1
 80069e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e3cb      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
 80069f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <USB_EPStartXfer+0x1478>
 8006a0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	029b      	lsls	r3, r3, #10
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e3ad      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	78db      	ldrb	r3, [r3, #3]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f040 8200 	bne.w	8006e46 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 8091 	bne.w	8006b7a <USB_EPStartXfer+0x15da>
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	011a      	lsls	r2, r3, #4
 8006a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d116      	bne.n	8006adc <USB_EPStartXfer+0x153c>
 8006aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac0:	801a      	strh	r2, [r3, #0]
 8006ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e083      	b.n	8006be4 <USB_EPStartXfer+0x1644>
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aea:	d820      	bhi.n	8006b2e <USB_EPStartXfer+0x158e>
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <USB_EPStartXfer+0x157c>
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	3301      	adds	r3, #1
 8006b18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	029b      	lsls	r3, r3, #10
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e05a      	b.n	8006be4 <USB_EPStartXfer+0x1644>
 8006b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USB_EPStartXfer+0x15be>
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e034      	b.n	8006be4 <USB_EPStartXfer+0x1644>
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d12c      	bne.n	8006be4 <USB_EPStartXfer+0x1644>
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bae:	4413      	add	r3, r2
 8006bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 8091 	bne.w	8006d26 <USB_EPStartXfer+0x1786>
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c28:	4413      	add	r3, r2
 8006c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	011a      	lsls	r2, r3, #4
 8006c3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d116      	bne.n	8006c88 <USB_EPStartXfer+0x16e8>
 8006c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	e07c      	b.n	8006d82 <USB_EPStartXfer+0x17e2>
 8006c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b3e      	cmp	r3, #62	; 0x3e
 8006c96:	d820      	bhi.n	8006cda <USB_EPStartXfer+0x173a>
 8006c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USB_EPStartXfer+0x1728>
 8006cbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	029b      	lsls	r3, r3, #10
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e053      	b.n	8006d82 <USB_EPStartXfer+0x17e2>
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <USB_EPStartXfer+0x176a>
 8006d00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	029b      	lsls	r3, r3, #10
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e02d      	b.n	8006d82 <USB_EPStartXfer+0x17e2>
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d125      	bne.n	8006d82 <USB_EPStartXfer+0x17e2>
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	011a      	lsls	r2, r3, #4
 8006d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 81fe 	beq.w	8007190 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006db4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <USB_EPStartXfer+0x182c>
 8006dc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10d      	bne.n	8006de8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 81db 	bne.w	8007190 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dda:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 81d4 	bne.w	8007190 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	8013      	strh	r3, [r2, #0]
 8006e44:	e1a4      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	78db      	ldrb	r3, [r3, #3]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	f040 819a 	bne.w	800718c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d917      	bls.n	8006ea4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	619a      	str	r2, [r3, #24]
 8006ea2:	e00e      	b.n	8006ec2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d178      	bne.n	8006fc4 <USB_EPStartXfer+0x1a24>
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d116      	bne.n	8006f4e <USB_EPStartXfer+0x19ae>
 8006f20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e06b      	b.n	8007026 <USB_EPStartXfer+0x1a86>
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	2b3e      	cmp	r3, #62	; 0x3e
 8006f54:	d818      	bhi.n	8006f88 <USB_EPStartXfer+0x19e8>
 8006f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <USB_EPStartXfer+0x19d6>
 8006f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f70:	3301      	adds	r3, #1
 8006f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e04e      	b.n	8007026 <USB_EPStartXfer+0x1a86>
 8006f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <USB_EPStartXfer+0x1a08>
 8006f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	029b      	lsls	r3, r3, #10
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fc0:	801a      	strh	r2, [r3, #0]
 8006fc2:	e030      	b.n	8007026 <USB_EPStartXfer+0x1a86>
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d128      	bne.n	8007026 <USB_EPStartXfer+0x1a86>
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	011a      	lsls	r2, r3, #4
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	4413      	add	r3, r2
 8007012:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007016:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800701a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d178      	bne.n	8007136 <USB_EPStartXfer+0x1b96>
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007068:	4413      	add	r3, r2
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	011a      	lsls	r2, r3, #4
 800707c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007080:	4413      	add	r3, r2
 8007082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800708a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d116      	bne.n	80070c0 <USB_EPStartXfer+0x1b20>
 8007092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e067      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	2b3e      	cmp	r3, #62	; 0x3e
 80070c6:	d818      	bhi.n	80070fa <USB_EPStartXfer+0x1b5a>
 80070c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <USB_EPStartXfer+0x1b48>
 80070de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070e2:	3301      	adds	r3, #1
 80070e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e04a      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
 80070fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <USB_EPStartXfer+0x1b7a>
 8007110:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007114:	3b01      	subs	r3, #1
 8007116:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800711a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800711e:	b29b      	uxth	r3, r3
 8007120:	029b      	lsls	r3, r3, #10
 8007122:	b29b      	uxth	r3, r3
 8007124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e02c      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d124      	bne.n	8007190 <USB_EPStartXfer+0x1bf0>
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007154:	b29b      	uxth	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	4413      	add	r3, r2
 800715e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	011a      	lsls	r2, r3, #4
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	4413      	add	r3, r2
 8007176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800717e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e001      	b.n	8007190 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e03a      	b.n	8007206 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	b29b      	uxth	r3, r3
 8007202:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d020      	beq.n	8007264 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007238:	81bb      	strh	r3, [r7, #12]
 800723a:	89bb      	ldrh	r3, [r7, #12]
 800723c:	f083 0310 	eor.w	r3, r3, #16
 8007240:	81bb      	strh	r3, [r7, #12]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	89bb      	ldrh	r3, [r7, #12]
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
 8007262:	e01f      	b.n	80072a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	81fb      	strh	r3, [r7, #14]
 800727c:	89fb      	ldrh	r3, [r7, #14]
 800727e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007282:	81fb      	strh	r3, [r7, #14]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	7b1b      	ldrb	r3, [r3, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 809d 	bne.w	80073fe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d04c      	beq.n	8007366 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	823b      	strh	r3, [r7, #16]
 80072da:	8a3b      	ldrh	r3, [r7, #16]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <USB_EPClearStall+0x6c>
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fa:	81fb      	strh	r3, [r7, #14]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	89fb      	ldrh	r3, [r7, #14]
 8007308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	78db      	ldrb	r3, [r3, #3]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d06c      	beq.n	80073fe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733a:	81bb      	strh	r3, [r7, #12]
 800733c:	89bb      	ldrh	r3, [r7, #12]
 800733e:	f083 0320 	eor.w	r3, r3, #32
 8007342:	81bb      	strh	r3, [r7, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	89bb      	ldrh	r3, [r7, #12]
 8007350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007360:	b29b      	uxth	r3, r3
 8007362:	8013      	strh	r3, [r2, #0]
 8007364:	e04b      	b.n	80073fe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	82fb      	strh	r3, [r7, #22]
 8007374:	8afb      	ldrh	r3, [r7, #22]
 8007376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01b      	beq.n	80073b6 <USB_EPClearStall+0x106>
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	82bb      	strh	r3, [r7, #20]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	441a      	add	r2, r3
 80073a0:	8abb      	ldrh	r3, [r7, #20]
 80073a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	827b      	strh	r3, [r7, #18]
 80073ce:	8a7b      	ldrh	r3, [r7, #18]
 80073d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073d4:	827b      	strh	r3, [r7, #18]
 80073d6:	8a7b      	ldrh	r3, [r7, #18]
 80073d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073dc:	827b      	strh	r3, [r7, #18]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	441a      	add	r2, r3
 80073e8:	8a7b      	ldrh	r3, [r7, #18]
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2280      	movs	r2, #128	; 0x80
 8007420:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr

08007430 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr

08007444 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007466:	b29b      	uxth	r3, r3
 8007468:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800748c:	b480      	push	{r7}
 800748e:	b08d      	sub	sp, #52	; 0x34
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	460b      	mov	r3, r1
 800749c:	80fb      	strh	r3, [r7, #6]
 800749e:	4613      	mov	r3, r2
 80074a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074a2:	88bb      	ldrh	r3, [r7, #4]
 80074a4:	3301      	adds	r3, #1
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	005a      	lsls	r2, r3, #1
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074c4:	e01e      	b.n	8007504 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	3301      	adds	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	b29b      	uxth	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	3302      	adds	r3, #2
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	3302      	adds	r3, #2
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	3301      	adds	r3, #1
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	3b01      	subs	r3, #1
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1dd      	bne.n	80074c6 <USB_WritePMA+0x3a>
  }
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	3734      	adds	r7, #52	; 0x34
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007516:	b480      	push	{r7}
 8007518:	b08b      	sub	sp, #44	; 0x2c
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4611      	mov	r1, r2
 8007522:	461a      	mov	r2, r3
 8007524:	460b      	mov	r3, r1
 8007526:	80fb      	strh	r3, [r7, #6]
 8007528:	4613      	mov	r3, r2
 800752a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800752c:	88bb      	ldrh	r3, [r7, #4]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800753c:	88fb      	ldrh	r3, [r7, #6]
 800753e:	005a      	lsls	r2, r3, #1
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007548:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
 800754e:	e01b      	b.n	8007588 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	3302      	adds	r3, #2
 800755c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3301      	adds	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	b2da      	uxtb	r2, r3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3301      	adds	r3, #1
 800757a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	3302      	adds	r3, #2
 8007580:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	3b01      	subs	r3, #1
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e0      	bne.n	8007550 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800758e:	88bb      	ldrh	r3, [r7, #4]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	701a      	strb	r2, [r3, #0]
  }
}
 80075aa:	bf00      	nop
 80075ac:	372c      	adds	r7, #44	; 0x2c
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80075c0:	2304      	movs	r3, #4
 80075c2:	2203      	movs	r2, #3
 80075c4:	2181      	movs	r1, #129	; 0x81
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fc61 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80075d2:	2010      	movs	r0, #16
 80075d4:	f001 fd70 	bl	80090b8 <USBD_static_malloc>
 80075d8:	4602      	mov	r2, r0
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80075ea:	2302      	movs	r3, #2
 80075ec:	e005      	b.n	80075fa <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f4:	2200      	movs	r2, #0
 80075f6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800760e:	2181      	movs	r1, #129	; 0x81
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fc62 	bl	8008eda <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fd4f 	bl	80090d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766e:	2b00      	cmp	r3, #0
 8007670:	d045      	beq.n	80076fe <USBD_HID_Setup+0xba>
 8007672:	2b20      	cmp	r3, #32
 8007674:	f040 80d3 	bne.w	800781e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	3b02      	subs	r3, #2
 800767e:	2b09      	cmp	r3, #9
 8007680:	d835      	bhi.n	80076ee <USBD_HID_Setup+0xaa>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_HID_Setup+0x44>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076df 	.word	0x080076df
 800768c:	080076bf 	.word	0x080076bf
 8007690:	080076ef 	.word	0x080076ef
 8007694:	080076ef 	.word	0x080076ef
 8007698:	080076ef 	.word	0x080076ef
 800769c:	080076ef 	.word	0x080076ef
 80076a0:	080076ef 	.word	0x080076ef
 80076a4:	080076ef 	.word	0x080076ef
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076b1 	.word	0x080076b1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	601a      	str	r2, [r3, #0]
          break;
 80076bc:	e01e      	b.n	80076fc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2201      	movs	r2, #1
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f922 	bl	800890e <USBD_CtlSendData>
          break;
 80076ca:	e017      	b.n	80076fc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]
          break;
 80076dc:	e00e      	b.n	80076fc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2201      	movs	r2, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 f911 	bl	800890e <USBD_CtlSendData>
          break;
 80076ec:	e006      	b.n	80076fc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f8a2 	bl	800883a <USBD_CtlError>
          ret = USBD_FAIL;
 80076f6:	2302      	movs	r3, #2
 80076f8:	75fb      	strb	r3, [r7, #23]
          break;
 80076fa:	bf00      	nop
      }
      break;
 80076fc:	e096      	b.n	800782c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b0b      	cmp	r3, #11
 8007704:	f200 8083 	bhi.w	800780e <USBD_HID_Setup+0x1ca>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <USBD_HID_Setup+0xcc>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007741 	.word	0x08007741
 8007714:	0800780f 	.word	0x0800780f
 8007718:	0800780f 	.word	0x0800780f
 800771c:	0800780f 	.word	0x0800780f
 8007720:	0800780f 	.word	0x0800780f
 8007724:	0800780f 	.word	0x0800780f
 8007728:	08007769 	.word	0x08007769
 800772c:	0800780f 	.word	0x0800780f
 8007730:	0800780f 	.word	0x0800780f
 8007734:	0800780f 	.word	0x0800780f
 8007738:	080077c1 	.word	0x080077c1
 800773c:	080077e9 	.word	0x080077e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007746:	2b03      	cmp	r3, #3
 8007748:	d107      	bne.n	800775a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800774a:	f107 030e 	add.w	r3, r7, #14
 800774e:	2202      	movs	r2, #2
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f8db 	bl	800890e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007758:	e060      	b.n	800781c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 f86c 	bl	800883a <USBD_CtlError>
            ret = USBD_FAIL;
 8007762:	2302      	movs	r3, #2
 8007764:	75fb      	strb	r3, [r7, #23]
          break;
 8007766:	e059      	b.n	800781c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b22      	cmp	r3, #34	; 0x22
 8007772:	d108      	bne.n	8007786 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	88db      	ldrh	r3, [r3, #6]
 8007778:	2b4a      	cmp	r3, #74	; 0x4a
 800777a:	bf28      	it	cs
 800777c:	234a      	movcs	r3, #74	; 0x4a
 800777e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007780:	4b2d      	ldr	r3, [pc, #180]	; (8007838 <USBD_HID_Setup+0x1f4>)
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e015      	b.n	80077b2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b21      	cmp	r3, #33	; 0x21
 8007790:	d108      	bne.n	80077a4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007792:	4b2a      	ldr	r3, [pc, #168]	; (800783c <USBD_HID_Setup+0x1f8>)
 8007794:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88db      	ldrh	r3, [r3, #6]
 800779a:	2b09      	cmp	r3, #9
 800779c:	bf28      	it	cs
 800779e:	2309      	movcs	r3, #9
 80077a0:	83fb      	strh	r3, [r7, #30]
 80077a2:	e006      	b.n	80077b2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f847 	bl	800883a <USBD_CtlError>
            ret = USBD_FAIL;
 80077ac:	2302      	movs	r3, #2
 80077ae:	75fb      	strb	r3, [r7, #23]
            break;
 80077b0:	e034      	b.n	800781c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80077b2:	8bfb      	ldrh	r3, [r7, #30]
 80077b4:	461a      	mov	r2, r3
 80077b6:	69b9      	ldr	r1, [r7, #24]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 f8a8 	bl	800890e <USBD_CtlSendData>
          break;
 80077be:	e02d      	b.n	800781c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d107      	bne.n	80077da <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3308      	adds	r3, #8
 80077ce:	2201      	movs	r2, #1
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f89b 	bl	800890e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077d8:	e020      	b.n	800781c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f82c 	bl	800883a <USBD_CtlError>
            ret = USBD_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	75fb      	strb	r3, [r7, #23]
          break;
 80077e6:	e019      	b.n	800781c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d106      	bne.n	8007800 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	885b      	ldrh	r3, [r3, #2]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077fe:	e00d      	b.n	800781c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f819 	bl	800883a <USBD_CtlError>
            ret = USBD_FAIL;
 8007808:	2302      	movs	r3, #2
 800780a:	75fb      	strb	r3, [r7, #23]
          break;
 800780c:	e006      	b.n	800781c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f812 	bl	800883a <USBD_CtlError>
          ret = USBD_FAIL;
 8007816:	2302      	movs	r3, #2
 8007818:	75fb      	strb	r3, [r7, #23]
          break;
 800781a:	bf00      	nop
      }
      break;
 800781c:	e006      	b.n	800782c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f80a 	bl	800883a <USBD_CtlError>
      ret = USBD_FAIL;
 8007826:	2302      	movs	r3, #2
 8007828:	75fb      	strb	r3, [r7, #23]
      break;
 800782a:	bf00      	nop
  }

  return ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3720      	adds	r7, #32
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200000fc 	.word	0x200000fc
 800783c:	200000e4 	.word	0x200000e4

08007840 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2222      	movs	r2, #34	; 0x22
 800784c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800784e:	4b03      	ldr	r3, [pc, #12]	; (800785c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000078 	.word	0x20000078

08007860 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2222      	movs	r2, #34	; 0x22
 800786c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800786e:	4b03      	ldr	r3, [pc, #12]	; (800787c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000009c 	.word	0x2000009c

08007880 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2222      	movs	r2, #34	; 0x22
 800788c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200000c0 	.word	0x200000c0

080078a0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	2200      	movs	r2, #0
 80078b4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
	...

080078c4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220a      	movs	r2, #10
 80078d0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80078d2:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	200000f0 	.word	0x200000f0

080078e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078f8:	2302      	movs	r3, #2
 80078fa:	e01a      	b.n	8007932 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	79fa      	ldrb	r2, [r7, #7]
 8007928:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f001 fa4c 	bl	8008dc8 <USBD_LL_Init>

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	e001      	b.n	8007960 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fa6f 	bl	8008e58 <USBD_LL_Start>

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079a4:	2302      	movs	r3, #2
 80079a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	4611      	mov	r1, r2
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	78fa      	ldrb	r2, [r7, #3]
 80079ec:	4611      	mov	r1, r2
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3

  return USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fed7 	bl	80087c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d016      	beq.n	8007a66 <USBD_LL_SetupStage+0x6a>
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d81c      	bhi.n	8007a76 <USBD_LL_SetupStage+0x7a>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <USBD_LL_SetupStage+0x4a>
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d008      	beq.n	8007a56 <USBD_LL_SetupStage+0x5a>
 8007a44:	e017      	b.n	8007a76 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9ca 	bl	8007de8 <USBD_StdDevReq>
      break;
 8007a54:	e01a      	b.n	8007a8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa2c 	bl	8007ebc <USBD_StdItfReq>
      break;
 8007a64:	e012      	b.n	8007a8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa6c 	bl	8007f4c <USBD_StdEPReq>
      break;
 8007a74:	e00a      	b.n	8007a8c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fa47 	bl	8008f18 <USBD_LL_StallEP>
      break;
 8007a8a:	bf00      	nop
  }

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	607a      	str	r2, [r7, #4]
 8007aa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d14b      	bne.n	8007b42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ab0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d134      	bne.n	8007b26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d919      	bls.n	8007afc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d203      	bcs.n	8007aea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	e002      	b.n	8007af0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 ff38 	bl	800896a <USBD_CtlContinueRx>
 8007afa:	e038      	b.n	8007b6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d105      	bne.n	8007b1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 ff35 	bl	800898e <USBD_CtlSendStatus>
 8007b24:	e023      	b.n	8007b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d11e      	bne.n	8007b6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b38:	2100      	movs	r1, #0
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f001 f9ec 	bl	8008f18 <USBD_LL_StallEP>
 8007b40:	e015      	b.n	8007b6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d108      	bne.n	8007b6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	7afa      	ldrb	r2, [r7, #11]
 8007b62:	4611      	mov	r1, r2
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	4798      	blx	r3
 8007b68:	e001      	b.n	8007b6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e000      	b.n	8007b70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	460b      	mov	r3, r1
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b86:	7afb      	ldrb	r3, [r7, #11]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d17f      	bne.n	8007c8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d15c      	bne.n	8007c56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d915      	bls.n	8007bd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fec0 	bl	8008946 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2100      	movs	r1, #0
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f001 fa4f 	bl	8009070 <USBD_LL_PrepareReceive>
 8007bd2:	e04e      	b.n	8007c72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	6912      	ldr	r2, [r2, #16]
 8007bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007be0:	fb01 f202 	mul.w	r2, r1, r2
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11c      	bne.n	8007c24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	689a      	ldr	r2, [r3, #8]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d316      	bcc.n	8007c24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d20f      	bcs.n	8007c24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c04:	2200      	movs	r2, #0
 8007c06:	2100      	movs	r1, #0
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fe9c 	bl	8008946 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f001 fa27 	bl	8009070 <USBD_LL_PrepareReceive>
 8007c22:	e026      	b.n	8007c72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d105      	bne.n	8007c46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c46:	2180      	movs	r1, #128	; 0x80
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f001 f965 	bl	8008f18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 feb0 	bl	80089b4 <USBD_CtlReceiveStatus>
 8007c54:	e00d      	b.n	8007c72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d004      	beq.n	8007c6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c6a:	2180      	movs	r1, #128	; 0x80
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 f953 	bl	8008f18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d11d      	bne.n	8007cb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff fe81 	bl	8007984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c8a:	e015      	b.n	8007cb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d108      	bne.n	8007cb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	7afa      	ldrb	r2, [r7, #11]
 8007cac:	4611      	mov	r1, r2
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	4798      	blx	r3
 8007cb2:	e001      	b.n	8007cb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e000      	b.n	8007cba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f8dc 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f8ce 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6852      	ldr	r2, [r2, #4]
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	4611      	mov	r1, r2
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
  }

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2204      	movs	r2, #4
 8007d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr

08007d8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d105      	bne.n	8007da8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d10b      	bne.n	8007dde <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	d005      	beq.n	8007e0e <USBD_StdDevReq+0x26>
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	d84f      	bhi.n	8007ea6 <USBD_StdDevReq+0xbe>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <USBD_StdDevReq+0x36>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d14b      	bne.n	8007ea6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
      break;
 8007e1c:	e048      	b.n	8007eb0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	d839      	bhi.n	8007e9a <USBD_StdDevReq+0xb2>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <USBD_StdDevReq+0x44>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e91 	.word	0x08007e91
 8007e34:	08007e9b 	.word	0x08007e9b
 8007e38:	08007e87 	.word	0x08007e87
 8007e3c:	08007e9b 	.word	0x08007e9b
 8007e40:	08007e5f 	.word	0x08007e5f
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007e9b 	.word	0x08007e9b
 8007e4c:	08007e73 	.word	0x08007e73
 8007e50:	08007e69 	.word	0x08007e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9dc 	bl	8008214 <USBD_GetDescriptor>
          break;
 8007e5c:	e022      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fb3f 	bl	80084e4 <USBD_SetAddress>
          break;
 8007e66:	e01d      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fb7e 	bl	800856c <USBD_SetConfig>
          break;
 8007e70:	e018      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc07 	bl	8008688 <USBD_GetConfig>
          break;
 8007e7a:	e013      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc37 	bl	80086f2 <USBD_GetStatus>
          break;
 8007e84:	e00e      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc65 	bl	8008758 <USBD_SetFeature>
          break;
 8007e8e:	e009      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fc74 	bl	8008780 <USBD_ClrFeature>
          break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fccc 	bl	800883a <USBD_CtlError>
          break;
 8007ea2:	bf00      	nop
      }
      break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fcc6 	bl	800883a <USBD_CtlError>
      break;
 8007eae:	bf00      	nop
  }

  return ret;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop

08007ebc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d005      	beq.n	8007ee2 <USBD_StdItfReq+0x26>
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d82e      	bhi.n	8007f38 <USBD_StdItfReq+0x7c>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <USBD_StdItfReq+0x26>
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d12a      	bne.n	8007f38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d81d      	bhi.n	8007f2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	889b      	ldrh	r3, [r3, #4]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d813      	bhi.n	8007f20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d110      	bne.n	8007f34 <USBD_StdItfReq+0x78>
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10d      	bne.n	8007f34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fd38 	bl	800898e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f1e:	e009      	b.n	8007f34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fc89 	bl	800883a <USBD_CtlError>
          break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc84 	bl	800883a <USBD_CtlError>
          break;
 8007f32:	e000      	b.n	8007f36 <USBD_StdItfReq+0x7a>
          break;
 8007f34:	bf00      	nop
      }
      break;
 8007f36:	e004      	b.n	8007f42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fc7d 	bl	800883a <USBD_CtlError>
      break;
 8007f40:	bf00      	nop
  }

  return USBD_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f68:	2b40      	cmp	r3, #64	; 0x40
 8007f6a:	d007      	beq.n	8007f7c <USBD_StdEPReq+0x30>
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	f200 8146 	bhi.w	80081fe <USBD_StdEPReq+0x2b2>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <USBD_StdEPReq+0x40>
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	f040 8141 	bne.w	80081fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
      break;
 8007f8a:	e13d      	b.n	8008208 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d10a      	bne.n	8007fae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	e12d      	b.n	800820a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d007      	beq.n	8007fc6 <USBD_StdEPReq+0x7a>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	f300 811b 	bgt.w	80081f2 <USBD_StdEPReq+0x2a6>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d072      	beq.n	80080a6 <USBD_StdEPReq+0x15a>
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d03a      	beq.n	800803a <USBD_StdEPReq+0xee>
 8007fc4:	e115      	b.n	80081f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d002      	beq.n	8007fd6 <USBD_StdEPReq+0x8a>
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d015      	beq.n	8008000 <USBD_StdEPReq+0xb4>
 8007fd4:	e02b      	b.n	800802e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <USBD_StdEPReq+0xaa>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b80      	cmp	r3, #128	; 0x80
 8007fe0:	d009      	beq.n	8007ff6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 ff96 	bl	8008f18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fec:	2180      	movs	r1, #128	; 0x80
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 ff92 	bl	8008f18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ff4:	e020      	b.n	8008038 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc1e 	bl	800883a <USBD_CtlError>
              break;
 8007ffe:	e01b      	b.n	8008038 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	885b      	ldrh	r3, [r3, #2]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10e      	bne.n	8008026 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <USBD_StdEPReq+0xda>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d008      	beq.n	8008026 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 ff79 	bl	8008f18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fcb1 	bl	800898e <USBD_CtlSendStatus>

              break;
 800802c:	e004      	b.n	8008038 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc02 	bl	800883a <USBD_CtlError>
              break;
 8008036:	bf00      	nop
          }
          break;
 8008038:	e0e0      	b.n	80081fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	2b02      	cmp	r3, #2
 8008042:	d002      	beq.n	800804a <USBD_StdEPReq+0xfe>
 8008044:	2b03      	cmp	r3, #3
 8008046:	d015      	beq.n	8008074 <USBD_StdEPReq+0x128>
 8008048:	e026      	b.n	8008098 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <USBD_StdEPReq+0x11e>
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d009      	beq.n	800806a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 ff5c 	bl	8008f18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 ff58 	bl	8008f18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008068:	e01c      	b.n	80080a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fbe4 	bl	800883a <USBD_CtlError>
              break;
 8008072:	e017      	b.n	80080a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d112      	bne.n	80080a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 ff63 	bl	8008f56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc7c 	bl	800898e <USBD_CtlSendStatus>
              }
              break;
 8008096:	e004      	b.n	80080a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fbcd 	bl	800883a <USBD_CtlError>
              break;
 80080a0:	e000      	b.n	80080a4 <USBD_StdEPReq+0x158>
              break;
 80080a2:	bf00      	nop
          }
          break;
 80080a4:	e0aa      	b.n	80081fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d002      	beq.n	80080b6 <USBD_StdEPReq+0x16a>
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d032      	beq.n	800811a <USBD_StdEPReq+0x1ce>
 80080b4:	e097      	b.n	80081e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <USBD_StdEPReq+0x180>
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b80      	cmp	r3, #128	; 0x80
 80080c0:	d004      	beq.n	80080cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fbb8 	bl	800883a <USBD_CtlError>
                break;
 80080ca:	e091      	b.n	80081f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da0b      	bge.n	80080ec <USBD_StdEPReq+0x1a0>
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	3310      	adds	r3, #16
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	3304      	adds	r3, #4
 80080ea:	e00b      	b.n	8008104 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	3304      	adds	r3, #4
 8008104:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2202      	movs	r2, #2
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbfb 	bl	800890e <USBD_CtlSendData>
              break;
 8008118:	e06a      	b.n	80081f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800811a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da11      	bge.n	8008146 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3318      	adds	r3, #24
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d117      	bne.n	800816c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fb7b 	bl	800883a <USBD_CtlError>
                  break;
 8008144:	e054      	b.n	80081f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb68 	bl	800883a <USBD_CtlError>
                  break;
 800816a:	e041      	b.n	80081f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800816c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da0b      	bge.n	800818c <USBD_StdEPReq+0x240>
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	3310      	adds	r3, #16
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	3304      	adds	r3, #4
 800818a:	e00b      	b.n	80081a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	3304      	adds	r3, #4
 80081a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <USBD_StdEPReq+0x266>
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b80      	cmp	r3, #128	; 0x80
 80081b0:	d103      	bne.n	80081ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	e00e      	b.n	80081d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fee8 	bl	8008f94 <USBD_LL_IsStallEP>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2201      	movs	r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e002      	b.n	80081d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2202      	movs	r2, #2
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fb95 	bl	800890e <USBD_CtlSendData>
              break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb26 	bl	800883a <USBD_CtlError>
              break;
 80081ee:	bf00      	nop
          }
          break;
 80081f0:	e004      	b.n	80081fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb20 	bl	800883a <USBD_CtlError>
          break;
 80081fa:	bf00      	nop
      }
      break;
 80081fc:	e004      	b.n	8008208 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fb1a 	bl	800883a <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	2b06      	cmp	r3, #6
 8008236:	f200 8128 	bhi.w	800848a <USBD_GetDescriptor+0x276>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USBD_GetDescriptor+0x2c>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008275 	.word	0x08008275
 8008248:	080082b5 	.word	0x080082b5
 800824c:	0800848b 	.word	0x0800848b
 8008250:	0800848b 	.word	0x0800848b
 8008254:	0800842b 	.word	0x0800842b
 8008258:	08008457 	.word	0x08008457
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
      break;
 8008272:	e112      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7c1b      	ldrb	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	f107 0208 	add.w	r2, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008296:	e100      	b.n	800849a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	f107 0208 	add.w	r2, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	2202      	movs	r2, #2
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e0f2      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	885b      	ldrh	r3, [r3, #2]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	f200 80ac 	bhi.w	8008418 <USBD_GetDescriptor+0x204>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <USBD_GetDescriptor+0xb4>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	08008315 	.word	0x08008315
 80082d0:	08008349 	.word	0x08008349
 80082d4:	0800837d 	.word	0x0800837d
 80082d8:	080083b1 	.word	0x080083b1
 80082dc:	080083e5 	.word	0x080083e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e091      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa97 	bl	800883a <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e089      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008336:	e077      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa7d 	bl	800883a <USBD_CtlError>
            err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
          break;
 8008346:	e06f      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e05d      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa63 	bl	800883a <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e055      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e043      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa49 	bl	800883a <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e03b      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e029      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa2f 	bl	800883a <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e021      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e00f      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa15 	bl	800883a <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e007      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa0d 	bl	800883a <USBD_CtlError>
          err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008426:	e038      	b.n	800849a <USBD_GetDescriptor+0x286>
 8008428:	e037      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7c1b      	ldrb	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	f107 0208 	add.w	r2, r7, #8
 800843e:	4610      	mov	r0, r2
 8008440:	4798      	blx	r3
 8008442:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008444:	e029      	b.n	800849a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f9f6 	bl	800883a <USBD_CtlError>
        err++;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3301      	adds	r3, #1
 8008452:	72fb      	strb	r3, [r7, #11]
      break;
 8008454:	e021      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7c1b      	ldrb	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	f107 0208 	add.w	r2, r7, #8
 800846a:	4610      	mov	r0, r2
 800846c:	4798      	blx	r3
 800846e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3301      	adds	r3, #1
 8008474:	2207      	movs	r2, #7
 8008476:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008478:	e00f      	b.n	800849a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9dc 	bl	800883a <USBD_CtlError>
        err++;
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	3301      	adds	r3, #1
 8008486:	72fb      	strb	r3, [r7, #11]
      break;
 8008488:	e007      	b.n	800849a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9d4 	bl	800883a <USBD_CtlError>
      err++;
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	3301      	adds	r3, #1
 8008496:	72fb      	strb	r3, [r7, #11]
      break;
 8008498:	bf00      	nop
  }

  if (err != 0U)
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d11c      	bne.n	80084da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80084a0:	893b      	ldrh	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d011      	beq.n	80084ca <USBD_GetDescriptor+0x2b6>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	88da      	ldrh	r2, [r3, #6]
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bf28      	it	cs
 80084b8:	4613      	movcs	r3, r2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084be:	893b      	ldrh	r3, [r7, #8]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fa22 	bl	800890e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	88db      	ldrh	r3, [r3, #6]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa5b 	bl	800898e <USBD_CtlSendStatus>
 80084d8:	e000      	b.n	80084dc <USBD_GetDescriptor+0x2c8>
    return;
 80084da:	bf00      	nop
    }
  }
}
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d130      	bne.n	8008558 <USBD_SetAddress+0x74>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	88db      	ldrh	r3, [r3, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d12c      	bne.n	8008558 <USBD_SetAddress+0x74>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	2b7f      	cmp	r3, #127	; 0x7f
 8008504:	d828      	bhi.n	8008558 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	885b      	ldrh	r3, [r3, #2]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008510:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008518:	2b03      	cmp	r3, #3
 800851a:	d104      	bne.n	8008526 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f98b 	bl	800883a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	e01d      	b.n	8008562 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7bfa      	ldrb	r2, [r7, #15]
 800852a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fd5a 	bl	8008fec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa28 	bl	800898e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854c:	e009      	b.n	8008562 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008556:	e004      	b.n	8008562 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f96d 	bl	800883a <USBD_CtlError>
  }
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	4b41      	ldr	r3, [pc, #260]	; (8008684 <USBD_SetConfig+0x118>)
 800857e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008580:	4b40      	ldr	r3, [pc, #256]	; (8008684 <USBD_SetConfig+0x118>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d904      	bls.n	8008592 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f955 	bl	800883a <USBD_CtlError>
 8008590:	e075      	b.n	800867e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008598:	2b02      	cmp	r3, #2
 800859a:	d002      	beq.n	80085a2 <USBD_SetConfig+0x36>
 800859c:	2b03      	cmp	r3, #3
 800859e:	d023      	beq.n	80085e8 <USBD_SetConfig+0x7c>
 80085a0:	e062      	b.n	8008668 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80085a2:	4b38      	ldr	r3, [pc, #224]	; (8008684 <USBD_SetConfig+0x118>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01a      	beq.n	80085e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80085aa:	4b36      	ldr	r3, [pc, #216]	; (8008684 <USBD_SetConfig+0x118>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2203      	movs	r2, #3
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085bc:	4b31      	ldr	r3, [pc, #196]	; (8008684 <USBD_SetConfig+0x118>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff f9e8 	bl	8007998 <USBD_SetClassConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d104      	bne.n	80085d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f932 	bl	800883a <USBD_CtlError>
            return;
 80085d6:	e052      	b.n	800867e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f9d8 	bl	800898e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085de:	e04e      	b.n	800867e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f9d4 	bl	800898e <USBD_CtlSendStatus>
        break;
 80085e6:	e04a      	b.n	800867e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80085e8:	4b26      	ldr	r3, [pc, #152]	; (8008684 <USBD_SetConfig+0x118>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d112      	bne.n	8008616 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80085f8:	4b22      	ldr	r3, [pc, #136]	; (8008684 <USBD_SetConfig+0x118>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008602:	4b20      	ldr	r3, [pc, #128]	; (8008684 <USBD_SetConfig+0x118>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff f9e4 	bl	80079d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9bd 	bl	800898e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008614:	e033      	b.n	800867e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008616:	4b1b      	ldr	r3, [pc, #108]	; (8008684 <USBD_SetConfig+0x118>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d01d      	beq.n	8008660 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff f9d2 	bl	80079d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008632:	4b14      	ldr	r3, [pc, #80]	; (8008684 <USBD_SetConfig+0x118>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800863c:	4b11      	ldr	r3, [pc, #68]	; (8008684 <USBD_SetConfig+0x118>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff f9a8 	bl	8007998 <USBD_SetClassConfig>
 8008648:	4603      	mov	r3, r0
 800864a:	2b02      	cmp	r3, #2
 800864c:	d104      	bne.n	8008658 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8f2 	bl	800883a <USBD_CtlError>
            return;
 8008656:	e012      	b.n	800867e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f998 	bl	800898e <USBD_CtlSendStatus>
        break;
 800865e:	e00e      	b.n	800867e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f994 	bl	800898e <USBD_CtlSendStatus>
        break;
 8008666:	e00a      	b.n	800867e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8e5 	bl	800883a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008670:	4b04      	ldr	r3, [pc, #16]	; (8008684 <USBD_SetConfig+0x118>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff f9ad 	bl	80079d6 <USBD_ClrClassConfig>
        break;
 800867c:	bf00      	nop
    }
  }
}
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200005da 	.word	0x200005da

08008688 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	88db      	ldrh	r3, [r3, #6]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d004      	beq.n	80086a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8cc 	bl	800883a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086a2:	e022      	b.n	80086ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	dc02      	bgt.n	80086b4 <USBD_GetConfig+0x2c>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dc03      	bgt.n	80086ba <USBD_GetConfig+0x32>
 80086b2:	e015      	b.n	80086e0 <USBD_GetConfig+0x58>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d00b      	beq.n	80086d0 <USBD_GetConfig+0x48>
 80086b8:	e012      	b.n	80086e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3308      	adds	r3, #8
 80086c4:	2201      	movs	r2, #1
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f920 	bl	800890e <USBD_CtlSendData>
        break;
 80086ce:	e00c      	b.n	80086ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	2201      	movs	r2, #1
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f918 	bl	800890e <USBD_CtlSendData>
        break;
 80086de:	e004      	b.n	80086ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8a9 	bl	800883a <USBD_CtlError>
        break;
 80086e8:	bf00      	nop
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008702:	3b01      	subs	r3, #1
 8008704:	2b02      	cmp	r3, #2
 8008706:	d81e      	bhi.n	8008746 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d004      	beq.n	800871a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f891 	bl	800883a <USBD_CtlError>
        break;
 8008718:	e01a      	b.n	8008750 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f043 0202 	orr.w	r2, r3, #2
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	330c      	adds	r3, #12
 800873a:	2202      	movs	r2, #2
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8e5 	bl	800890e <USBD_CtlSendData>
      break;
 8008744:	e004      	b.n	8008750 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f876 	bl	800883a <USBD_CtlError>
      break;
 800874e:	bf00      	nop
  }
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d106      	bne.n	8008778 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f90b 	bl	800898e <USBD_CtlSendStatus>
  }
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008790:	3b01      	subs	r3, #1
 8008792:	2b02      	cmp	r3, #2
 8008794:	d80b      	bhi.n	80087ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d10c      	bne.n	80087b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8f1 	bl	800898e <USBD_CtlSendStatus>
      }
      break;
 80087ac:	e004      	b.n	80087b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f842 	bl	800883a <USBD_CtlError>
      break;
 80087b6:	e000      	b.n	80087ba <USBD_ClrFeature+0x3a>
      break;
 80087b8:	bf00      	nop
  }
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	785a      	ldrb	r2, [r3, #1]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	3302      	adds	r3, #2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3303      	adds	r3, #3
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	3304      	adds	r3, #4
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	3305      	adds	r3, #5
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	b29b      	uxth	r3, r3
 800880c:	4413      	add	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	3306      	adds	r3, #6
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	3307      	adds	r3, #7
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	b29b      	uxth	r3, r3
 8008828:	4413      	add	r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	80da      	strh	r2, [r3, #6]

}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008844:	2180      	movs	r1, #128	; 0x80
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb66 	bl	8008f18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fb62 	bl	8008f18 <USBD_LL_StallEP>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d032      	beq.n	80088d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f834 	bl	80088e0 <USBD_GetLen>
 8008878:	4603      	mov	r3, r0
 800887a:	3301      	adds	r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	75fa      	strb	r2, [r7, #23]
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4413      	add	r3, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	7812      	ldrb	r2, [r2, #0]
 8008896:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	75fa      	strb	r2, [r7, #23]
 800889e:	461a      	mov	r2, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4413      	add	r3, r2
 80088a4:	2203      	movs	r2, #3
 80088a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80088a8:	e012      	b.n	80088d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	60fa      	str	r2, [r7, #12]
 80088b0:	7dfa      	ldrb	r2, [r7, #23]
 80088b2:	1c51      	adds	r1, r2, #1
 80088b4:	75f9      	strb	r1, [r7, #23]
 80088b6:	4611      	mov	r1, r2
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	440a      	add	r2, r1
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	75fa      	strb	r2, [r7, #23]
 80088c6:	461a      	mov	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4413      	add	r3, r2
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e8      	bne.n	80088aa <USBD_GetString+0x4e>
    }
  }
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80088ec:	e005      	b.n	80088fa <USBD_GetLen+0x1a>
  {
    len++;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	3301      	adds	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f5      	bne.n	80088ee <USBD_GetLen+0xe>
  }

  return len;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr

0800890e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4613      	mov	r3, r2
 800891a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2202      	movs	r2, #2
 8008920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	2100      	movs	r1, #0
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fb77 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	2100      	movs	r1, #0
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fb65 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	4613      	mov	r3, r2
 8008976:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fb76 	bl	8009070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2204      	movs	r2, #4
 800899a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800899e:	2300      	movs	r3, #0
 80089a0:	2200      	movs	r2, #0
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb40 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2205      	movs	r2, #5
 80089c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089c4:	2300      	movs	r3, #0
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb50 	bl	8009070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089e0:	2200      	movs	r2, #0
 80089e2:	490e      	ldr	r1, [pc, #56]	; (8008a1c <MX_USB_DEVICE_Init+0x40>)
 80089e4:	480e      	ldr	r0, [pc, #56]	; (8008a20 <MX_USB_DEVICE_Init+0x44>)
 80089e6:	f7fe ff7d 	bl	80078e4 <USBD_Init>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089f0:	f7f7 fd94 	bl	800051c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80089f4:	490b      	ldr	r1, [pc, #44]	; (8008a24 <MX_USB_DEVICE_Init+0x48>)
 80089f6:	480a      	ldr	r0, [pc, #40]	; (8008a20 <MX_USB_DEVICE_Init+0x44>)
 80089f8:	f7fe ff9f 	bl	800793a <USBD_RegisterClass>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a02:	f7f7 fd8b 	bl	800051c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a06:	4806      	ldr	r0, [pc, #24]	; (8008a20 <MX_USB_DEVICE_Init+0x44>)
 8008a08:	f7fe ffb0 	bl	800796c <USBD_Start>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a12:	f7f7 fd83 	bl	800051c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a16:	bf00      	nop
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000148 	.word	0x20000148
 8008a20:	200008a8 	.word	0x200008a8
 8008a24:	20000040 	.word	0x20000040

08008a28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2212      	movs	r2, #18
 8008a38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a3a:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20000164 	.word	0x20000164

08008a4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a5e:	4b03      	ldr	r3, [pc, #12]	; (8008a6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000178 	.word	0x20000178

08008a70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	6039      	str	r1, [r7, #0]
 8008a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4907      	ldr	r1, [pc, #28]	; (8008aa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a86:	4808      	ldr	r0, [pc, #32]	; (8008aa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a88:	f7ff fee8 	bl	800885c <USBD_GetString>
 8008a8c:	e004      	b.n	8008a98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	4904      	ldr	r1, [pc, #16]	; (8008aa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a92:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a94:	f7ff fee2 	bl	800885c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000b6c 	.word	0x20000b6c
 8008aa8:	08009274 	.word	0x08009274

08008aac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	4904      	ldr	r1, [pc, #16]	; (8008acc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008abc:	4804      	ldr	r0, [pc, #16]	; (8008ad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008abe:	f7ff fecd 	bl	800885c <USBD_GetString>
  return USBD_StrDesc;
 8008ac2:	4b02      	ldr	r3, [pc, #8]	; (8008acc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000b6c 	.word	0x20000b6c
 8008ad0:	08009280 	.word	0x08009280

08008ad4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	221a      	movs	r2, #26
 8008ae4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ae6:	f000 f843 	bl	8008b70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008aea:	4b02      	ldr	r3, [pc, #8]	; (8008af4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	2000017c 	.word	0x2000017c

08008af8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4907      	ldr	r1, [pc, #28]	; (8008b2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b0e:	4808      	ldr	r0, [pc, #32]	; (8008b30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b10:	f7ff fea4 	bl	800885c <USBD_GetString>
 8008b14:	e004      	b.n	8008b20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4904      	ldr	r1, [pc, #16]	; (8008b2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b1a:	4805      	ldr	r0, [pc, #20]	; (8008b30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b1c:	f7ff fe9e 	bl	800885c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b20:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000b6c 	.word	0x20000b6c
 8008b30:	08009294 	.word	0x08009294

08008b34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d105      	bne.n	8008b52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4907      	ldr	r1, [pc, #28]	; (8008b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b4a:	4808      	ldr	r0, [pc, #32]	; (8008b6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b4c:	f7ff fe86 	bl	800885c <USBD_GetString>
 8008b50:	e004      	b.n	8008b5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4904      	ldr	r1, [pc, #16]	; (8008b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b56:	4805      	ldr	r0, [pc, #20]	; (8008b6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b58:	f7ff fe80 	bl	800885c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000b6c 	.word	0x20000b6c
 8008b6c:	080092a0 	.word	0x080092a0

08008b70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b76:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <Get_SerialNum+0x44>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <Get_SerialNum+0x48>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b82:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <Get_SerialNum+0x4c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b96:	2208      	movs	r2, #8
 8008b98:	4909      	ldr	r1, [pc, #36]	; (8008bc0 <Get_SerialNum+0x50>)
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f814 	bl	8008bc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	4908      	ldr	r1, [pc, #32]	; (8008bc4 <Get_SerialNum+0x54>)
 8008ba4:	68b8      	ldr	r0, [r7, #8]
 8008ba6:	f000 f80f 	bl	8008bc8 <IntToUnicode>
  }
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	1ffff7e8 	.word	0x1ffff7e8
 8008bb8:	1ffff7ec 	.word	0x1ffff7ec
 8008bbc:	1ffff7f0 	.word	0x1ffff7f0
 8008bc0:	2000017e 	.word	0x2000017e
 8008bc4:	2000018e 	.word	0x2000018e

08008bc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	e027      	b.n	8008c30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	0f1b      	lsrs	r3, r3, #28
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	d80b      	bhi.n	8008c00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	0f1b      	lsrs	r3, r3, #28
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	440b      	add	r3, r1
 8008bf8:	3230      	adds	r2, #48	; 0x30
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e00a      	b.n	8008c16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	0f1b      	lsrs	r3, r3, #28
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	440b      	add	r3, r1
 8008c10:	3237      	adds	r2, #55	; 0x37
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	3301      	adds	r3, #1
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4413      	add	r3, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]
 8008c30:	7dfa      	ldrb	r2, [r7, #23]
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d3d3      	bcc.n	8008be0 <IntToUnicode+0x18>
  }
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr

08008c44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0d      	ldr	r2, [pc, #52]	; (8008c88 <HAL_PCD_MspInit+0x44>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d113      	bne.n	8008c7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <HAL_PCD_MspInit+0x48>)
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <HAL_PCD_MspInit+0x48>)
 8008c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c60:	61d3      	str	r3, [r2, #28]
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <HAL_PCD_MspInit+0x48>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2100      	movs	r1, #0
 8008c72:	2014      	movs	r0, #20
 8008c74:	f7f8 ff0d 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008c78:	2014      	movs	r0, #20
 8008c7a:	f7f8 ff26 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	40005c00 	.word	0x40005c00
 8008c8c:	40021000 	.word	0x40021000

08008c90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fe fea8 	bl	80079fc <USBD_LL_SetupStage>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008cc6:	78fa      	ldrb	r2, [r7, #3]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f7fe feda 	bl	8007a96 <USBD_LL_DataOutStage>
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	440b      	add	r3, r1
 8008d0a:	333c      	adds	r3, #60	; 0x3c
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	4619      	mov	r1, r3
 8008d12:	f7fe ff31 	bl	8007b78 <USBD_LL_DataInStage>
}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff f841 	bl	8007db4 <USBD_LL_SOF>
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d42:	2301      	movs	r3, #1
 8008d44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d001      	beq.n	8008d52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d4e:	f7f7 fbe5 	bl	800051c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d58:	7bfa      	ldrb	r2, [r7, #15]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe fff1 	bl	8007d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe ffaa 	bl	8007cc2 <USBD_LL_Reset>
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe ffeb 	bl	8007d62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <HAL_PCD_SuspendCallback+0x30>)
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	4a03      	ldr	r2, [pc, #12]	; (8008da8 <HAL_PCD_SuspendCallback+0x30>)
 8008d9a:	f043 0306 	orr.w	r3, r3, #6
 8008d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed00 	.word	0xe000ed00

08008dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe ffe5 	bl	8007d8a <USBD_LL_Resume>
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008dd0:	4a1f      	ldr	r2, [pc, #124]	; (8008e50 <USBD_LL_Init+0x88>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a1d      	ldr	r2, [pc, #116]	; (8008e50 <USBD_LL_Init+0x88>)
 8008ddc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008de0:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <USBD_LL_Init+0x88>)
 8008de2:	4a1c      	ldr	r2, [pc, #112]	; (8008e54 <USBD_LL_Init+0x8c>)
 8008de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <USBD_LL_Init+0x88>)
 8008de8:	2208      	movs	r2, #8
 8008dea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008dec:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <USBD_LL_Init+0x88>)
 8008dee:	2202      	movs	r2, #2
 8008df0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <USBD_LL_Init+0x88>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <USBD_LL_Init+0x88>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dfe:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <USBD_LL_Init+0x88>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e04:	4812      	ldr	r0, [pc, #72]	; (8008e50 <USBD_LL_Init+0x88>)
 8008e06:	f7f9 fca1 	bl	800274c <HAL_PCD_Init>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e10:	f7f7 fb84 	bl	800051c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e1a:	2318      	movs	r3, #24
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	f7fb f8fe 	bl	8004020 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e2a:	2358      	movs	r3, #88	; 0x58
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2180      	movs	r1, #128	; 0x80
 8008e30:	f7fb f8f6 	bl	8004020 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2181      	movs	r1, #129	; 0x81
 8008e42:	f7fb f8ed 	bl	8004020 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000d6c 	.word	0x20000d6c
 8008e54:	40005c00 	.word	0x40005c00

08008e58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f9 fd77 	bl	8002962 <HAL_PCD_Start>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 f93c 	bl	80090f8 <USBD_Get_USB_Status>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70bb      	strb	r3, [r7, #2]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008eb6:	78bb      	ldrb	r3, [r7, #2]
 8008eb8:	883a      	ldrh	r2, [r7, #0]
 8008eba:	78f9      	ldrb	r1, [r7, #3]
 8008ebc:	f7f9 feef 	bl	8002c9e <HAL_PCD_EP_Open>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f916 	bl	80090f8 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f9 ff36 	bl	8002d6a <HAL_PCD_EP_Close>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f8f7 	bl	80090f8 <USBD_Get_USB_Status>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 ffdf 	bl	8002efa <HAL_PCD_EP_SetStall>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f8d8 	bl	80090f8 <USBD_Get_USB_Status>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fa f820 	bl	8002fba <HAL_PCD_EP_ClrStall>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f8b9 	bl	80090f8 <USBD_Get_USB_Status>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0c      	bge.n	8008fca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	e00b      	b.n	8008fe2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008fe0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7f9 fe22 	bl	8002c54 <HAL_PCD_SetAddress>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f86e 	bl	80090f8 <USBD_Get_USB_Status>
 800901c:	4603      	mov	r3, r0
 800901e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009020:	7bbb      	ldrb	r3, [r7, #14]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	461a      	mov	r2, r3
 8009036:	460b      	mov	r3, r1
 8009038:	72fb      	strb	r3, [r7, #11]
 800903a:	4613      	mov	r3, r2
 800903c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800904c:	893b      	ldrh	r3, [r7, #8]
 800904e:	7af9      	ldrb	r1, [r7, #11]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	f7f9 ff0f 	bl	8002e74 <HAL_PCD_EP_Transmit>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f84b 	bl	80090f8 <USBD_Get_USB_Status>
 8009062:	4603      	mov	r3, r0
 8009064:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009066:	7dbb      	ldrb	r3, [r7, #22]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	461a      	mov	r2, r3
 800907c:	460b      	mov	r3, r1
 800907e:	72fb      	strb	r3, [r7, #11]
 8009080:	4613      	mov	r3, r2
 8009082:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	7af9      	ldrb	r1, [r7, #11]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	f7f9 feaf 	bl	8002dfa <HAL_PCD_EP_Receive>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f828 	bl	80090f8 <USBD_Get_USB_Status>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <USBD_static_malloc+0x14>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr
 80090cc:	200005dc 	.word	0x200005dc

080090d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]

}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr

080090e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr

080090f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d817      	bhi.n	800913c <USBD_Get_USB_Status+0x44>
 800910c:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <USBD_Get_USB_Status+0x1c>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	08009125 	.word	0x08009125
 8009118:	0800912b 	.word	0x0800912b
 800911c:	08009131 	.word	0x08009131
 8009120:	08009137 	.word	0x08009137
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
    break;
 8009128:	e00b      	b.n	8009142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800912a:	2302      	movs	r3, #2
 800912c:	73fb      	strb	r3, [r7, #15]
    break;
 800912e:	e008      	b.n	8009142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]
    break;
 8009134:	e005      	b.n	8009142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009136:	2302      	movs	r3, #2
 8009138:	73fb      	strb	r3, [r7, #15]
    break;
 800913a:	e002      	b.n	8009142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800913c:	2302      	movs	r3, #2
 800913e:	73fb      	strb	r3, [r7, #15]
    break;
 8009140:	bf00      	nop
  }
  return usb_status;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <__libc_init_array>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	2600      	movs	r6, #0
 8009154:	4d0c      	ldr	r5, [pc, #48]	; (8009188 <__libc_init_array+0x38>)
 8009156:	4c0d      	ldr	r4, [pc, #52]	; (800918c <__libc_init_array+0x3c>)
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	42a6      	cmp	r6, r4
 800915e:	d109      	bne.n	8009174 <__libc_init_array+0x24>
 8009160:	f000 f82a 	bl	80091b8 <_init>
 8009164:	2600      	movs	r6, #0
 8009166:	4d0a      	ldr	r5, [pc, #40]	; (8009190 <__libc_init_array+0x40>)
 8009168:	4c0a      	ldr	r4, [pc, #40]	; (8009194 <__libc_init_array+0x44>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	42a6      	cmp	r6, r4
 8009170:	d105      	bne.n	800917e <__libc_init_array+0x2e>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f855 3b04 	ldr.w	r3, [r5], #4
 8009178:	4798      	blx	r3
 800917a:	3601      	adds	r6, #1
 800917c:	e7ee      	b.n	800915c <__libc_init_array+0xc>
 800917e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009182:	4798      	blx	r3
 8009184:	3601      	adds	r6, #1
 8009186:	e7f2      	b.n	800916e <__libc_init_array+0x1e>
 8009188:	0800a024 	.word	0x0800a024
 800918c:	0800a024 	.word	0x0800a024
 8009190:	0800a024 	.word	0x0800a024
 8009194:	0800a028 	.word	0x0800a028

08009198 <memset>:
 8009198:	4603      	mov	r3, r0
 800919a:	4402      	add	r2, r0
 800919c:	4293      	cmp	r3, r2
 800919e:	d100      	bne.n	80091a2 <memset+0xa>
 80091a0:	4770      	bx	lr
 80091a2:	f803 1b01 	strb.w	r1, [r3], #1
 80091a6:	e7f9      	b.n	800919c <memset+0x4>

080091a8 <strcpy>:
 80091a8:	4603      	mov	r3, r0
 80091aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ae:	f803 2b01 	strb.w	r2, [r3], #1
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d1f9      	bne.n	80091aa <strcpy+0x2>
 80091b6:	4770      	bx	lr

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
