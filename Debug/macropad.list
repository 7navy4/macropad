
macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800944c  0800944c  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800944c  0800944c  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800944c  0800944c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08009454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  20000198  080095ec  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  080095ec  00020e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8d6  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db4  00000000  00000000  0002fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000335c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  000341d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001260b  00000000  00000000  0004df64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087223  00000000  00000000  0006056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000352c  00000000  00000000  000e77e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	0800865c 	.word	0x0800865c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	0800865c 	.word	0x0800865c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd92 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f848 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8cc 	bl	80002f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 fe98 	bl	8007e90 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if (ssd1306_Init(&hi2c1) != 0) {
 8000164:	481b      	ldr	r0, [pc, #108]	; (80001d4 <main+0x88>)
 8000166:	f000 fae5 	bl	8000734 <ssd1306_Init>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <main+0x28>
    Error_Handler();
 8000170:	f000 f918 	bl	80003a4 <Error_Handler>
  }
  HAL_Delay(1000);
 8000174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000178:	f000 fde0 	bl	8000d3c <HAL_Delay>

  ssd1306_Fill(Black);
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fbf9 	bl	8000974 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000182:	4814      	ldr	r0, [pc, #80]	; (80001d4 <main+0x88>)
 8000184:	f000 fc18 	bl	80009b8 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018c:	f000 fdd6 	bl	8000d3c <HAL_Delay>

  // Write data to local screenbuffer
  ssd1306_SetCursor(0, 0);
 8000190:	2100      	movs	r1, #0
 8000192:	2000      	movs	r0, #0
 8000194:	f000 fd56 	bl	8000c44 <ssd1306_SetCursor>
  ssd1306_WriteString("12345678912345", Font_11x18, White);
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <main+0x8c>)
 800019a:	2301      	movs	r3, #1
 800019c:	ca06      	ldmia	r2, {r1, r2}
 800019e:	480f      	ldr	r0, [pc, #60]	; (80001dc <main+0x90>)
 80001a0:	f000 fd2a 	bl	8000bf8 <ssd1306_WriteString>

  ssd1306_UpdateScreen(&hi2c1);
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <main+0x88>)
 80001a6:	f000 fc07 	bl	80009b8 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 36);
 80001aa:	2124      	movs	r1, #36	; 0x24
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fd49 	bl	8000c44 <ssd1306_SetCursor>
  ssd1306_WriteString("4ilo", Font_11x18, White);
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <main+0x8c>)
 80001b4:	2301      	movs	r3, #1
 80001b6:	ca06      	ldmia	r2, {r1, r2}
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <main+0x94>)
 80001ba:	f000 fd1d 	bl	8000bf8 <ssd1306_WriteString>

  ssd1306_UpdateScreen(&hi2c1);
 80001be:	4805      	ldr	r0, [pc, #20]	; (80001d4 <main+0x88>)
 80001c0:	f000 fbfa 	bl	80009b8 <ssd1306_UpdateScreen>
	  ResetColumn(2);
	  ResetColumn(3);
*/


	 scanNumberTest=scan();
 80001c4:	f000 fa60 	bl	8000688 <scan>
 80001c8:	4603      	mov	r3, r0
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <main+0x98>)
 80001ce:	701a      	strb	r2, [r3, #0]
 80001d0:	e7f8      	b.n	80001c4 <main+0x78>
 80001d2:	bf00      	nop
 80001d4:	200001b8 	.word	0x200001b8
 80001d8:	20000004 	.word	0x20000004
 80001dc:	08008674 	.word	0x08008674
 80001e0:	08008684 	.word	0x08008684
 80001e4:	200001b4 	.word	0x200001b4

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	; 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f008 fa28 	bl	800864c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000228:	2300      	movs	r3, #0
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800022c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f98e 	bl	8003558 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000242:	f000 f8af 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fbfa 	bl	8003a5c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800026e:	f000 f899 	bl	80003a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000272:	2310      	movs	r3, #16
 8000274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800027a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fd70 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800028a:	f000 f88b 	bl	80003a4 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	; 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_I2C1_Init+0x50>)
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <MX_I2C1_Init+0x54>)
 80002a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <MX_I2C1_Init+0x58>)
 80002a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_I2C1_Init+0x50>)
 80002d6:	f001 f839 	bl	800134c <HAL_I2C_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f860 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200001b8 	.word	0x200001b8
 80002ec:	40005400 	.word	0x40005400
 80002f0:	000186a0 	.word	0x000186a0

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_GPIO_Init+0xa0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a21      	ldr	r2, [pc, #132]	; (8000394 <MX_GPIO_Init+0xa0>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_GPIO_Init+0xa0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <MX_GPIO_Init+0xa0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <MX_GPIO_Init+0xa0>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_GPIO_Init+0xa0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000338:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800033c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_GPIO_Init+0xa4>)
 8000340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0308 	add.w	r3, r7, #8
 800034a:	4619      	mov	r1, r3
 800034c:	4813      	ldr	r0, [pc, #76]	; (800039c <MX_GPIO_Init+0xa8>)
 800034e:	f000 fe27 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_GPIO_Init+0xa4>)
 800035a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4619      	mov	r1, r3
 8000366:	480e      	ldr	r0, [pc, #56]	; (80003a0 <MX_GPIO_Init+0xac>)
 8000368:	f000 fe1a 	bl	8000fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2017      	movs	r0, #23
 8000372:	f000 fdde 	bl	8000f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000376:	2017      	movs	r0, #23
 8000378:	f000 fdf7 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	2028      	movs	r0, #40	; 0x28
 8000382:	f000 fdd6 	bl	8000f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000386:	2028      	movs	r0, #40	; 0x28
 8000388:	f000 fdef 	bl	8000f6a <HAL_NVIC_EnableIRQ>

}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40021000 	.word	0x40021000
 8000398:	10110000 	.word	0x10110000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <HAL_I2C_MspInit+0x90>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d132      	bne.n	800049a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800044c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000452:	2312      	movs	r3, #18
 8000454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4619      	mov	r1, r3
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <HAL_I2C_MspInit+0x98>)
 8000462:	f000 fd9d 	bl	8000fa0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_I2C_MspInit+0x9c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
 8000474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
 800047c:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <HAL_I2C_MspInit+0x9c>)
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 8000488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_I2C_MspInit+0x94>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800049a:	bf00      	nop
 800049c:	3728      	adds	r7, #40	; 0x28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	40010000 	.word	0x40010000

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fa:	f000 fc03 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800050a:	f001 fcaa 	bl	8001e62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000b00 	.word	0x20000b00

08000518 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800051c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000520:	f000 fef2 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800052c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000530:	f000 feea 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000534:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000538:	f000 fee6 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800053c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000540:	f000 fee2 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	; (8000598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ffe5 	bl	8000548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f008 f841 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fde3 	bl	800014c <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8000590:	08009454 	.word	0x08009454
  ldr r2, =_sbss
 8000594:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8000598:	20000e00 	.word	0x20000e00

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <rowread>:
static uint16_t rowPin[RowNumber]={PinRow1,PinRow2,PinRow3};
static uint16_t columnPin[ColumnNumber]={PinColumn1,PinColumn2,PinColumn3,PinColumn4};
static GPIO_TypeDef *rowPort[RowNumber]={PortRow1,PortRow2,PortRow1};
static GPIO_TypeDef *columnPort[ColumnNumber]={PortColumn1,PortColumn2,PortColumn3,PortColumn4};

GPIO_PinState rowread(uint8_t rowNumber){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(rowPort[rowNumber],rowPin[rowNumber]);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <rowread+0x2c>)
 80005ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4906      	ldr	r1, [pc, #24]	; (80005d0 <rowread+0x30>)
 80005b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4610      	mov	r0, r2
 80005be:	f000 fe73 	bl	80012a8 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000001c 	.word	0x2000001c
 80005d0:	2000000c 	.word	0x2000000c

080005d4 <setcolumn>:

void setcolumn(uint8_t columnNumber){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_SET);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <setcolumn+0x78>)
 80005e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a19      	ldr	r2, [pc, #100]	; (8000650 <setcolumn+0x7c>)
 80005ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	f000 fe70 	bl	80012d6 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 80005f6:	2301      	movs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e01e      	b.n	800063a <setcolumn+0x66>
		HAL_GPIO_WritePin(columnPort[(columnNumber+i)%columnNumber],columnPin[(columnNumber+i)%columnNumber], GPIO_PIN_RESET);
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	fb93 f1f2 	sdiv	r1, r3, r2
 8000608:	fb01 f202 	mul.w	r2, r1, r2
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	4a0f      	ldr	r2, [pc, #60]	; (800064c <setcolumn+0x78>)
 8000610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000614:	79fa      	ldrb	r2, [r7, #7]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000620:	fb01 f202 	mul.w	r2, r1, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <setcolumn+0x7c>)
 8000628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	f000 fe51 	bl	80012d6 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbdc      	blt.n	80005fc <setcolumn+0x28>
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	20000014 	.word	0x20000014

08000654 <resetcolumn>:

void resetcolumn(uint8_t columnNumber){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_RESET);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <resetcolumn+0x2c>)
 8000662:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <resetcolumn+0x30>)
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	f000 fe30 	bl	80012d6 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	20000014 	.word	0x20000014

08000688 <scan>:

uint8_t scan(){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	uint8_t pressedButton=0;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<ColumnNumber;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e02e      	b.n	80006f6 <scan+0x6e>
	{
		setcolumn(i);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff99 	bl	80005d4 <setcolumn>
		for(int j=0;j<RowNumber;j++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	e01b      	b.n	80006e0 <scan+0x58>
		{
			if(rowread(j)==GPIO_PIN_SET)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff77 	bl	80005a0 <rowread>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d110      	bne.n	80006da <scan+0x52>
			{
				pressedButton=j*4+i+1;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]
				resetcolumn(i);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffbf 	bl	8000654 <resetcolumn>
				return pressedButton;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	e011      	b.n	80006fe <scan+0x76>
		for(int j=0;j<RowNumber;j++)
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3301      	adds	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	dde0      	ble.n	80006a8 <scan+0x20>
			}

		}
		resetcolumn(i);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffb2 	bl	8000654 <resetcolumn>
	for(int i=0; i<ColumnNumber;i++)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	ddcd      	ble.n	8000698 <scan+0x10>
	}
	return pressedButton;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af04      	add	r7, sp, #16
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000712:	230a      	movs	r3, #10
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	1cfb      	adds	r3, r7, #3
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	2178      	movs	r1, #120	; 0x78
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 ff55 	bl	80015d4 <HAL_I2C_Mem_Write>
 800072a:	4603      	mov	r3, r0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 fafd 	bl	8000d3c <HAL_Delay>
    int status = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000746:	21ae      	movs	r1, #174	; 0xae
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffdc 	bl	8000706 <ssd1306_WriteCommand>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000758:	2120      	movs	r1, #32
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ffd3 	bl	8000706 <ssd1306_WriteCommand>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800076a:	2110      	movs	r1, #16
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffca 	bl	8000706 <ssd1306_WriteCommand>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800077c:	21b0      	movs	r1, #176	; 0xb0
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ffc1 	bl	8000706 <ssd1306_WriteCommand>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800078e:	21c8      	movs	r1, #200	; 0xc8
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ffb8 	bl	8000706 <ssd1306_WriteCommand>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4413      	add	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80007a0:	2100      	movs	r1, #0
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffaf 	bl	8000706 <ssd1306_WriteCommand>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80007b2:	2110      	movs	r1, #16
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ffa6 	bl	8000706 <ssd1306_WriteCommand>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff9d 	bl	8000706 <ssd1306_WriteCommand>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80007d6:	2181      	movs	r1, #129	; 0x81
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff94 	bl	8000706 <ssd1306_WriteCommand>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80007e8:	21ff      	movs	r1, #255	; 0xff
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ff8b 	bl	8000706 <ssd1306_WriteCommand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80007fa:	21a1      	movs	r1, #161	; 0xa1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff82 	bl	8000706 <ssd1306_WriteCommand>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4413      	add	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800080c:	21a6      	movs	r1, #166	; 0xa6
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff79 	bl	8000706 <ssd1306_WriteCommand>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800081e:	21a8      	movs	r1, #168	; 0xa8
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff70 	bl	8000706 <ssd1306_WriteCommand>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000830:	213f      	movs	r1, #63	; 0x3f
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff67 	bl	8000706 <ssd1306_WriteCommand>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000842:	21a4      	movs	r1, #164	; 0xa4
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff5e 	bl	8000706 <ssd1306_WriteCommand>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	4413      	add	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000854:	21d3      	movs	r1, #211	; 0xd3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff55 	bl	8000706 <ssd1306_WriteCommand>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000866:	2100      	movs	r1, #0
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff4c 	bl	8000706 <ssd1306_WriteCommand>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000878:	21d5      	movs	r1, #213	; 0xd5
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff43 	bl	8000706 <ssd1306_WriteCommand>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800088a:	21f0      	movs	r1, #240	; 0xf0
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff3a 	bl	8000706 <ssd1306_WriteCommand>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4413      	add	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 800089c:	21d9      	movs	r1, #217	; 0xd9
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff31 	bl	8000706 <ssd1306_WriteCommand>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80008ae:	2122      	movs	r1, #34	; 0x22
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff28 	bl	8000706 <ssd1306_WriteCommand>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80008c0:	21da      	movs	r1, #218	; 0xda
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff1f 	bl	8000706 <ssd1306_WriteCommand>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 80008d2:	2112      	movs	r1, #18
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff16 	bl	8000706 <ssd1306_WriteCommand>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80008e4:	21db      	movs	r1, #219	; 0xdb
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff0d 	bl	8000706 <ssd1306_WriteCommand>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80008f6:	2120      	movs	r1, #32
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff04 	bl	8000706 <ssd1306_WriteCommand>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4413      	add	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000908:	218d      	movs	r1, #141	; 0x8d
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fefb 	bl	8000706 <ssd1306_WriteCommand>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800091a:	2114      	movs	r1, #20
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fef2 	bl	8000706 <ssd1306_WriteCommand>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4413      	add	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800092c:	21af      	movs	r1, #175	; 0xaf
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fee9 	bl	8000706 <ssd1306_WriteCommand>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <ssd1306_Init+0x214>
        return 1;
 8000944:	2301      	movs	r3, #1
 8000946:	e00f      	b.n	8000968 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f813 	bl	8000974 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f832 	bl	80009b8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <ssd1306_Init+0x23c>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <ssd1306_Init+0x23c>)
 800095c:	2200      	movs	r2, #0
 800095e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <ssd1306_Init+0x23c>)
 8000962:	2201      	movs	r2, #1
 8000964:	715a      	strb	r2, [r3, #5]

    return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000062c 	.word	0x2000062c

08000974 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00d      	b.n	80009a0 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <ssd1306_Fill+0x1a>
 800098a:	2100      	movs	r1, #0
 800098c:	e000      	b.n	8000990 <ssd1306_Fill+0x1c>
 800098e:	21ff      	movs	r1, #255	; 0xff
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <ssd1306_Fill+0x40>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80009a6:	d3ed      	bcc.n	8000984 <ssd1306_Fill+0x10>
    }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	2000020c 	.word	0x2000020c

080009b8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af04      	add	r7, sp, #16
 80009be:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e024      	b.n	8000a10 <ssd1306_UpdateScreen+0x58>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3b50      	subs	r3, #80	; 0x50
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fe99 	bl	8000706 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fe95 	bl	8000706 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80009dc:	2110      	movs	r1, #16
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fe91 	bl	8000706 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	4613      	mov	r3, r2
 80009e8:	015b      	lsls	r3, r3, #5
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <ssd1306_UpdateScreen+0x68>)
 80009f2:	4413      	add	r3, r2
 80009f4:	2264      	movs	r2, #100	; 0x64
 80009f6:	9202      	str	r2, [sp, #8]
 80009f8:	2284      	movs	r2, #132	; 0x84
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	2178      	movs	r1, #120	; 0x78
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 fde5 	bl	80015d4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d9d7      	bls.n	80009c6 <ssd1306_UpdateScreen+0xe>
    }
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000020c 	.word	0x2000020c

08000a24 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000a24:	b490      	push	{r4, r7}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	71bb      	strb	r3, [r7, #6]
 8000a32:	4613      	mov	r3, r2
 8000a34:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b83      	cmp	r3, #131	; 0x83
 8000a3a:	d854      	bhi.n	8000ae6 <ssd1306_DrawPixel+0xc2>
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a40:	d851      	bhi.n	8000ae6 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <ssd1306_DrawPixel+0xcc>)
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 8000a4a:	797b      	ldrb	r3, [r7, #5]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000a58:	797b      	ldrb	r3, [r7, #5]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d120      	bne.n	8000aa0 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	b2d8      	uxtb	r0, r3
 8000a66:	4601      	mov	r1, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	440b      	add	r3, r1
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <ssd1306_DrawPixel+0xd0>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b25c      	sxtb	r4, r3
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	460b      	mov	r3, r1
 8000a90:	015b      	lsls	r3, r3, #5
 8000a92:	440b      	add	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	b2e1      	uxtb	r1, r4
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <ssd1306_DrawPixel+0xd0>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
 8000a9e:	e023      	b.n	8000ae8 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	b2d8      	uxtb	r0, r3
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	015b      	lsls	r3, r3, #5
 8000aae:	440b      	add	r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <ssd1306_DrawPixel+0xd0>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	b25c      	sxtb	r4, r3
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	015b      	lsls	r3, r3, #5
 8000ad8:	440b      	add	r3, r1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	b2e1      	uxtb	r1, r4
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <ssd1306_DrawPixel+0xd0>)
 8000ae2:	54d1      	strb	r1, [r2, r3]
 8000ae4:	e000      	b.n	8000ae8 <ssd1306_DrawPixel+0xc4>
        return;
 8000ae6:	bf00      	nop
    }
}
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc90      	pop	{r4, r7}
 8000aee:	4770      	bx	lr
 8000af0:	2000062c 	.word	0x2000062c
 8000af4:	2000020c 	.word	0x2000020c

08000af8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4604      	mov	r4, r0
 8000b00:	1d38      	adds	r0, r7, #4
 8000b02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b06:	461a      	mov	r2, r3
 8000b08:	4623      	mov	r3, r4
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	793b      	ldrb	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	2b83      	cmp	r3, #131	; 0x83
 8000b1c:	dc06      	bgt.n	8000b2c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b20:	885b      	ldrh	r3, [r3, #2]
 8000b22:	461a      	mov	r2, r3
 8000b24:	797b      	ldrb	r3, [r7, #5]
 8000b26:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b28:	2b3f      	cmp	r3, #63	; 0x3f
 8000b2a:	dd01      	ble.n	8000b30 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e05d      	b.n	8000bec <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	e04c      	b.n	8000bd0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3b20      	subs	r3, #32
 8000b3c:	7979      	ldrb	r1, [r7, #5]
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	440b      	add	r3, r1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	e034      	b.n	8000bc0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b2d8      	uxtb	r0, r3
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b76:	885b      	ldrh	r3, [r3, #2]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	7bba      	ldrb	r2, [r7, #14]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f7ff ff4d 	bl	8000a24 <ssd1306_DrawPixel>
 8000b8a:	e016      	b.n	8000bba <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4413      	add	r3, r2
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000b9c:	885b      	ldrh	r3, [r3, #2]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2d9      	uxtb	r1, r3
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f7ff ff35 	bl	8000a24 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	793b      	ldrb	r3, [r7, #4]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d3c5      	bcc.n	8000b56 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d3ad      	bcc.n	8000b36 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000bdc:	881a      	ldrh	r2, [r3, #0]
 8000bde:	793b      	ldrb	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <ssd1306_WriteChar+0xfc>)
 8000be8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3724      	adds	r7, #36	; 0x24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	2000062c 	.word	0x2000062c

08000bf8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	1d38      	adds	r0, r7, #4
 8000c02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c06:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000c08:	e012      	b.n	8000c30 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	7818      	ldrb	r0, [r3, #0]
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	ca06      	ldmia	r2, {r1, r2}
 8000c14:	f7ff ff70 	bl	8000af8 <ssd1306_WriteChar>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d002      	beq.n	8000c2a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	e008      	b.n	8000c3c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e8      	bne.n	8000c0a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	4613      	mov	r3, r2
 8000c52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x+1;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <ssd1306_SetCursor+0x30>)
 8000c5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <ssd1306_SetCursor+0x30>)
 8000c66:	805a      	strh	r2, [r3, #2]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000062c 	.word	0x2000062c

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f947 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fb8c 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f95f 	bl	8000f86 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f927 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	2000003c 	.word	0x2000003c
 8000d00:	20000038 	.word	0x20000038

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x20>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x20>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	2000003c 	.word	0x2000003c
 8000d24:	20000634 	.word	0x20000634

08000d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <HAL_GetTick+0x10>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000634 	.word	0x20000634

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff fff0 	bl	8000d28 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffe0 	bl	8000d28 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000003c 	.word	0x2000003c

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4906      	ldr	r1, [pc, #24]	; (8000e1c <__NVIC_EnableIRQ+0x34>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff90 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff2d 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff42 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff35 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e169      	b.n	8001288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8158 	bne.w	8001282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4a9a      	ldr	r2, [pc, #616]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d05e      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fdc:	4a98      	ldr	r2, [pc, #608]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d875      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fe2:	4a98      	ldr	r2, [pc, #608]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d058      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fe8:	4a96      	ldr	r2, [pc, #600]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d86f      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fee:	4a96      	ldr	r2, [pc, #600]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d052      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000ff4:	4a94      	ldr	r2, [pc, #592]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d869      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000ffa:	4a94      	ldr	r2, [pc, #592]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d04c      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8001000:	4a92      	ldr	r2, [pc, #584]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d863      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001006:	4a92      	ldr	r2, [pc, #584]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d046      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 800100c:	4a90      	ldr	r2, [pc, #576]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d85d      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d82a      	bhi.n	800106c <HAL_GPIO_Init+0xcc>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d859      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <HAL_GPIO_Init+0x80>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	0800109b 	.word	0x0800109b
 8001024:	08001075 	.word	0x08001075
 8001028:	08001087 	.word	0x08001087
 800102c:	080010c9 	.word	0x080010c9
 8001030:	080010cf 	.word	0x080010cf
 8001034:	080010cf 	.word	0x080010cf
 8001038:	080010cf 	.word	0x080010cf
 800103c:	080010cf 	.word	0x080010cf
 8001040:	080010cf 	.word	0x080010cf
 8001044:	080010cf 	.word	0x080010cf
 8001048:	080010cf 	.word	0x080010cf
 800104c:	080010cf 	.word	0x080010cf
 8001050:	080010cf 	.word	0x080010cf
 8001054:	080010cf 	.word	0x080010cf
 8001058:	080010cf 	.word	0x080010cf
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	0800107d 	.word	0x0800107d
 8001068:	08001091 	.word	0x08001091
 800106c:	4a79      	ldr	r2, [pc, #484]	; (8001254 <HAL_GPIO_Init+0x2b4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001072:	e02c      	b.n	80010ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e029      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	3304      	adds	r3, #4
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e024      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	3308      	adds	r3, #8
 800108c:	623b      	str	r3, [r7, #32]
          break;
 800108e:	e01f      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	330c      	adds	r3, #12
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e01a      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a2:	2304      	movs	r3, #4
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e013      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d105      	bne.n	80010bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	611a      	str	r2, [r3, #16]
          break;
 80010ba:	e009      	b.n	80010d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	615a      	str	r2, [r3, #20]
          break;
 80010c6:	e003      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          break;
 80010ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d801      	bhi.n	80010da <HAL_GPIO_Init+0x13a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	e001      	b.n	80010de <HAL_GPIO_Init+0x13e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3304      	adds	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d802      	bhi.n	80010ec <HAL_GPIO_Init+0x14c>
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x152>
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3b08      	subs	r3, #8
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	210f      	movs	r1, #15
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	6a39      	ldr	r1, [r7, #32]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80b1 	beq.w	8001282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2bc>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <HAL_GPIO_Init+0x2c0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d013      	beq.n	800118c <HAL_GPIO_Init+0x1ec>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <HAL_GPIO_Init+0x2c4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00d      	beq.n	8001188 <HAL_GPIO_Init+0x1e8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3e      	ldr	r2, [pc, #248]	; (8001268 <HAL_GPIO_Init+0x2c8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x1e4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_GPIO_Init+0x2cc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_GPIO_Init+0x1e0>
 800117c:	2303      	movs	r3, #3
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001180:	2304      	movs	r3, #4
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 800118c:	2300      	movs	r3, #0
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119e:	492f      	ldr	r1, [pc, #188]	; (800125c <HAL_GPIO_Init+0x2bc>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	492c      	ldr	r1, [pc, #176]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4928      	ldr	r1, [pc, #160]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4922      	ldr	r1, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4918      	ldr	r1, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	4914      	ldr	r1, [pc, #80]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001220:	4013      	ands	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d021      	beq.n	8001274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
 800123c:	e021      	b.n	8001282 <HAL_GPIO_Init+0x2e2>
 800123e:	bf00      	nop
 8001240:	10320000 	.word	0x10320000
 8001244:	10310000 	.word	0x10310000
 8001248:	10220000 	.word	0x10220000
 800124c:	10210000 	.word	0x10210000
 8001250:	10120000 	.word	0x10120000
 8001254:	10110000 	.word	0x10110000
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40011000 	.word	0x40011000
 800126c:	40011400 	.word	0x40011400
 8001270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HAL_GPIO_Init+0x304>)
 800127e:	4013      	ands	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f ae8e 	bne.w	8000fb4 <HAL_GPIO_Init+0x14>
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	372c      	adds	r7, #44	; 0x2c
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e6:	787b      	ldrb	r3, [r7, #1]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f806 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e12b      	b.n	80015b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f84e 	bl	8000414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2224      	movs	r2, #36	; 0x24
 800137c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013b0:	f002 fca6 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 80013b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a81      	ldr	r2, [pc, #516]	; (80015c0 <HAL_I2C_Init+0x274>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d807      	bhi.n	80013d0 <HAL_I2C_Init+0x84>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4a80      	ldr	r2, [pc, #512]	; (80015c4 <HAL_I2C_Init+0x278>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	bf94      	ite	ls
 80013c8:	2301      	movls	r3, #1
 80013ca:	2300      	movhi	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	e006      	b.n	80013de <HAL_I2C_Init+0x92>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4a7d      	ldr	r2, [pc, #500]	; (80015c8 <HAL_I2C_Init+0x27c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	bf94      	ite	ls
 80013d8:	2301      	movls	r3, #1
 80013da:	2300      	movhi	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0e7      	b.n	80015b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4a78      	ldr	r2, [pc, #480]	; (80015cc <HAL_I2C_Init+0x280>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0c9b      	lsrs	r3, r3, #18
 80013f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	430a      	orrs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <HAL_I2C_Init+0x274>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d802      	bhi.n	8001420 <HAL_I2C_Init+0xd4>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3301      	adds	r3, #1
 800141e:	e009      	b.n	8001434 <HAL_I2C_Init+0xe8>
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_I2C_Init+0x284>)
 800142c:	fba2 2303 	umull	r2, r3, r2, r3
 8001430:	099b      	lsrs	r3, r3, #6
 8001432:	3301      	adds	r3, #1
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	430b      	orrs	r3, r1
 800143a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	495c      	ldr	r1, [pc, #368]	; (80015c0 <HAL_I2C_Init+0x274>)
 8001450:	428b      	cmp	r3, r1
 8001452:	d819      	bhi.n	8001488 <HAL_I2C_Init+0x13c>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1e59      	subs	r1, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001468:	400b      	ands	r3, r1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00a      	beq.n	8001484 <HAL_I2C_Init+0x138>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1e59      	subs	r1, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fbb1 f3f3 	udiv	r3, r1, r3
 800147c:	3301      	adds	r3, #1
 800147e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001482:	e051      	b.n	8001528 <HAL_I2C_Init+0x1dc>
 8001484:	2304      	movs	r3, #4
 8001486:	e04f      	b.n	8001528 <HAL_I2C_Init+0x1dc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d111      	bne.n	80014b4 <HAL_I2C_Init+0x168>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1e58      	subs	r0, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	440b      	add	r3, r1
 800149e:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf0c      	ite	eq
 80014ac:	2301      	moveq	r3, #1
 80014ae:	2300      	movne	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	e012      	b.n	80014da <HAL_I2C_Init+0x18e>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	0099      	lsls	r1, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_Init+0x196>
 80014de:	2301      	movs	r3, #1
 80014e0:	e022      	b.n	8001528 <HAL_I2C_Init+0x1dc>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10e      	bne.n	8001508 <HAL_I2C_Init+0x1bc>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e58      	subs	r0, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001506:	e00f      	b.n	8001528 <HAL_I2C_Init+0x1dc>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e58      	subs	r0, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	0099      	lsls	r1, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	6809      	ldr	r1, [r1, #0]
 800152c:	4313      	orrs	r3, r2
 800152e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6911      	ldr	r1, [r2, #16]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68d2      	ldr	r2, [r2, #12]
 8001562:	4311      	orrs	r1, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	430b      	orrs	r3, r1
 800156a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	000186a0 	.word	0x000186a0
 80015c4:	001e847f 	.word	0x001e847f
 80015c8:	003d08ff 	.word	0x003d08ff
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	10624dd3 	.word	0x10624dd3

080015d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	817b      	strh	r3, [r7, #10]
 80015e6:	460b      	mov	r3, r1
 80015e8:	813b      	strh	r3, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015ee:	f7ff fb9b 	bl	8000d28 <HAL_GetTick>
 80015f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	f040 80d9 	bne.w	80017b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2319      	movs	r3, #25
 8001608:	2201      	movs	r2, #1
 800160a:	496d      	ldr	r1, [pc, #436]	; (80017c0 <HAL_I2C_Mem_Write+0x1ec>)
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f971 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
 800161a:	e0cc      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_I2C_Mem_Write+0x56>
 8001626:	2302      	movs	r3, #2
 8001628:	e0c5      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d007      	beq.n	8001650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2221      	movs	r2, #33	; 0x21
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2240      	movs	r2, #64	; 0x40
 800166c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a4d      	ldr	r2, [pc, #308]	; (80017c4 <HAL_I2C_Mem_Write+0x1f0>)
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001692:	88f8      	ldrh	r0, [r7, #6]
 8001694:	893a      	ldrh	r2, [r7, #8]
 8001696:	8979      	ldrh	r1, [r7, #10]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	4603      	mov	r3, r0
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f890 	bl	80017c8 <I2C_RequestMemoryWrite>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d052      	beq.n	8001754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e081      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f9f2 	bl	8001aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00d      	beq.n	80016de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06b      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d11b      	bne.n	8001754 <HAL_I2C_Mem_Write+0x180>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d017      	beq.n	8001754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1aa      	bne.n	80016b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9de 	bl	8001b22 <I2C_WaitOnBTFFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	2b04      	cmp	r3, #4
 8001772:	d107      	bne.n	8001784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e016      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	00100002 	.word	0x00100002
 80017c4:	ffff0000 	.word	0xffff0000

080017c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	460b      	mov	r3, r1
 80017dc:	813b      	strh	r3, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f878 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001818:	d103      	bne.n	8001822 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e05f      	b.n	80018e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	492d      	ldr	r1, [pc, #180]	; (80018f0 <I2C_RequestMemoryWrite+0x128>)
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f8b0 	bl	80019a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e04c      	b.n	80018e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f91a 	bl	8001aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2b04      	cmp	r3, #4
 8001878:	d107      	bne.n	800188a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e02b      	b.n	80018e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001894:	893b      	ldrh	r3, [r7, #8]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	e021      	b.n	80018e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	6a39      	ldr	r1, [r7, #32]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f8f4 	bl	8001aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00d      	beq.n	80018da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d107      	bne.n	80018d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e005      	b.n	80018e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018da:	893b      	ldrh	r3, [r7, #8]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	00010002 	.word	0x00010002

080018f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001904:	e025      	b.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d021      	beq.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190e:	f7ff fa0b 	bl	8000d28 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d302      	bcc.n	8001924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d116      	bne.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f043 0220 	orr.w	r2, r3, #32
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e023      	b.n	800199a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10d      	bne.n	8001978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4013      	ands	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	e00c      	b.n	8001992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4013      	ands	r3, r2
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	429a      	cmp	r2, r3
 8001996:	d0b6      	beq.n	8001906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019b0:	e051      	b.n	8001a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d123      	bne.n	8001a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e046      	b.n	8001a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d021      	beq.n	8001a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7ff f989 	bl	8000d28 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d116      	bne.n	8001a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e020      	b.n	8001a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10c      	bne.n	8001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	e00b      	b.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	43da      	mvns	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d18d      	bne.n	80019b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aac:	e02d      	b.n	8001b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f878 	bl	8001ba4 <I2C_IsAcknowledgeFailed>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e02d      	b.n	8001b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d021      	beq.n	8001b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff f92f 	bl	8000d28 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d116      	bne.n	8001b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0220 	orr.w	r2, r3, #32
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e007      	b.n	8001b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b80      	cmp	r3, #128	; 0x80
 8001b16:	d1ca      	bne.n	8001aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b2e:	e02d      	b.n	8001b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f837 	bl	8001ba4 <I2C_IsAcknowledgeFailed>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e02d      	b.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b46:	d021      	beq.n	8001b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b48:	f7ff f8ee 	bl	8000d28 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d302      	bcc.n	8001b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e007      	b.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d1ca      	bne.n	8001b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d11b      	bne.n	8001bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af06      	add	r7, sp, #24
 8001c06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0fd      	b.n	8001e0e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f006 fa66 	bl	80080f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 f96f 	bl	8003f1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	687e      	ldr	r6, [r7, #4]
 8001c46:	466d      	mov	r5, sp
 8001c48:	f106 0410 	add.w	r4, r6, #16
 8001c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	602b      	str	r3, [r5, #0]
 8001c54:	1d33      	adds	r3, r6, #4
 8001c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f002 f939 	bl	8003ed0 <USB_CoreInit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0ce      	b.n	8001e0e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f96a 	bl	8003f50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e04c      	b.n	8001d1c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3301      	adds	r3, #1
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	b298      	uxth	r0, r3
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3336      	adds	r3, #54	; 0x36
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3338      	adds	r3, #56	; 0x38
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333c      	adds	r3, #60	; 0x3c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	3340      	adds	r3, #64	; 0x40
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3ad      	bcc.n	8001c82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e044      	b.n	8001db6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	3301      	adds	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3b5      	bcc.n	8001d2c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	687e      	ldr	r6, [r7, #4]
 8001dc8:	466d      	mov	r5, sp
 8001dca:	f106 0410 	add.w	r4, r6, #16
 8001dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f002 f8c4 	bl	8003f68 <USB_DevInit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00d      	b.n	8001e0e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 fd76 	bl	80068f8 <USB_DevDisconnect>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_Start+0x16>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e016      	b.n	8001e5a <HAL_PCD_Start+0x44>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 f859 	bl	8003ef0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f006 fba8 	bl	8008596 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fd4a 	bl	80068e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b088      	sub	sp, #32
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fd4c 	bl	800690c <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	d102      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb48 	bl	8002516 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fd3e 	bl	800690c <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d112      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f006 f99a 	bl	80081ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f923 	bl	8002108 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 fd20 	bl	800690c <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fd09 	bl	800690c <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f04:	d10b      	bne.n	8001f1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fcf2 	bl	800690c <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f32:	d126      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	b292      	uxth	r2, r2
 8001f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f006 f97b 	bl	8008260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fcc0 	bl	800690c <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f96:	f040 8082 	bne.w	800209e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	77fb      	strb	r3, [r7, #31]
 8001f9e:	e010      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	7ffb      	ldrb	r3, [r7, #31]
 8001fae:	8812      	ldrh	r2, [r2, #0]
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001fbc:	7ffb      	ldrb	r3, [r7, #31]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	77fb      	strb	r3, [r7, #31]
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	d9eb      	bls.n	8001fa0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ff8:	bf00      	nop
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002002:	b29b      	uxth	r3, r3
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f6      	beq.n	8001ffa <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201e:	b292      	uxth	r2, r2
 8002020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
 8002028:	e00f      	b.n	800204a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	4611      	mov	r1, r2
 8002032:	7ffa      	ldrb	r2, [r7, #31]
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	440a      	add	r2, r1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	3320      	adds	r3, #32
 800203c:	443b      	add	r3, r7
 800203e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002042:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	3301      	adds	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b07      	cmp	r3, #7
 800204e:	d9ec      	bls.n	800202a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002070:	b29a      	uxth	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	b292      	uxth	r2, r2
 800207c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0204 	orr.w	r2, r2, #4
 8002092:	b292      	uxth	r2, r2
 8002094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f006 f8c7 	bl	800822c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fc32 	bl	800690c <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d10e      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c6:	b292      	uxth	r2, r2
 80020c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f006 f880 	bl	80081d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fc18 	bl	800690c <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e6:	d10b      	bne.n	8002100 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020fa:	b292      	uxth	r2, r2
 80020fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_PCD_SetAddress+0x1a>
 800211e:	2302      	movs	r3, #2
 8002120:	e013      	b.n	800214a <HAL_PCD_SetAddress+0x42>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f004 fbbf 	bl	80068be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	4608      	mov	r0, r1
 800215c:	4611      	mov	r1, r2
 800215e:	461a      	mov	r2, r3
 8002160:	4603      	mov	r3, r0
 8002162:	70fb      	strb	r3, [r7, #3]
 8002164:	460b      	mov	r3, r1
 8002166:	803b      	strh	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002174:	2b00      	cmp	r3, #0
 8002176:	da0e      	bge.n	8002196 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00e      	b.n	80021b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 0207 	and.w	r2, r3, #7
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021c0:	883a      	ldrh	r2, [r7, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	78ba      	ldrb	r2, [r7, #2]
 80021ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d102      	bne.n	80021ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Open+0xa6>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Open+0xc4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fece 	bl	8003fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	da0e      	bge.n	8002250 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
 800224e:	e00e      	b.n	800226e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PCD_EP_Close+0x6a>
 8002284:	2302      	movs	r3, #2
 8002286:	e00e      	b.n	80022a6 <HAL_PCD_EP_Close+0x88>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 f9f0 	bl	800467c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	460b      	mov	r3, r1
 80022bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 0207 	and.w	r2, r3, #7
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2200      	movs	r2, #0
 80022e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fba2 	bl	8004a54 <USB_EPStartXfer>
 8002310:	e005      	b.n	800231e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6979      	ldr	r1, [r7, #20]
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fb9b 	bl	8004a54 <USB_EPStartXfer>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2201      	movs	r2, #1
 8002372:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	b2da      	uxtb	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002380:	7afb      	ldrb	r3, [r7, #11]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6979      	ldr	r1, [r7, #20]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fb5f 	bl	8004a54 <USB_EPStartXfer>
 8002396:	e005      	b.n	80023a4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fb58 	bl	8004a54 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 0207 	and.w	r2, r3, #7
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d901      	bls.n	80023cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e04c      	b.n	8002466 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da0e      	bge.n	80023f2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
 80023f0:	e00c      	b.n	800240c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_PCD_EP_SetStall+0x7e>
 8002428:	2302      	movs	r3, #2
 800242a:	e01c      	b.n	8002466 <HAL_PCD_EP_SetStall+0xb8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	f004 f942 	bl	80066c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f004 fa67 	bl	800692a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d901      	bls.n	800248c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e040      	b.n	800250e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800248c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002490:	2b00      	cmp	r3, #0
 8002492:	da0e      	bge.n	80024b2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	705a      	strb	r2, [r3, #1]
 80024b0:	e00e      	b.n	80024d0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 0207 	and.w	r2, r3, #7
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_EP_ClrStall+0x82>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e00e      	b.n	800250e <HAL_PCD_EP_ClrStall+0xa0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 f930 	bl	8006764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b08e      	sub	sp, #56	; 0x38
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800251e:	e2ec      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002528:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800252a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002536:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8161 	bne.w	8002802 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d152      	bne.n	80025f0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	81fb      	strh	r3, [r7, #14]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29b      	uxth	r3, r3
 800256c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3328      	adds	r3, #40	; 0x28
 8002572:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	3302      	adds	r3, #2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	441a      	add	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f005 fdf4 	bl	800819e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 829b 	beq.w	8002afa <PCD_EP_ISR_Handler+0x5e4>
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 8296 	bne.w	8002afa <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b292      	uxth	r2, r2
 80025e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ee:	e284      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002606:	2b00      	cmp	r3, #0
 8002608:	d034      	beq.n	8002674 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	3306      	adds	r3, #6
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002648:	b29b      	uxth	r3, r3
 800264a:	f004 f9be 	bl	80069ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	f640 738f 	movw	r3, #3983	; 0xf8f
 800265a:	4013      	ands	r3, r2
 800265c:	823b      	strh	r3, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	8a3a      	ldrh	r2, [r7, #16]
 8002664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002668:	b292      	uxth	r2, r2
 800266a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f005 fd69 	bl	8008144 <HAL_PCD_SetupStageCallback>
 8002672:	e242      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002674:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002678:	2b00      	cmp	r3, #0
 800267a:	f280 823e 	bge.w	8002afa <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29a      	uxth	r2, r3
 8002686:	f640 738f 	movw	r3, #3983	; 0xf8f
 800268a:	4013      	ands	r3, r2
 800268c:	83bb      	strh	r3, [r7, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	8bba      	ldrh	r2, [r7, #28]
 8002694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002698:	b292      	uxth	r2, r2
 800269a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	3306      	adds	r3, #6
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d019      	beq.n	8002704 <PCD_EP_ISR_Handler+0x1ee>
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	6959      	ldr	r1, [r3, #20]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f004 f96e 	bl	80069ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	441a      	add	r2, r3
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026fc:	2100      	movs	r1, #0
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f005 fd32 	bl	8008168 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 81f2 	bne.w	8002afa <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d112      	bne.n	8002764 <PCD_EP_ISR_Handler+0x24e>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002748:	b29a      	uxth	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275c:	b29a      	uxth	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	e02f      	b.n	80027c4 <PCD_EP_ISR_Handler+0x2ae>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b3e      	cmp	r3, #62	; 0x3e
 800276a:	d813      	bhi.n	8002794 <PCD_EP_ISR_Handler+0x27e>
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <PCD_EP_ISR_Handler+0x270>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	3301      	adds	r3, #1
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	b29b      	uxth	r3, r3
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	b29a      	uxth	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e017      	b.n	80027c4 <PCD_EP_ISR_Handler+0x2ae>
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <PCD_EP_ISR_Handler+0x298>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3b01      	subs	r3, #1
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027be:	b29a      	uxth	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	827b      	strh	r3, [r7, #18]
 80027d6:	8a7b      	ldrh	r3, [r7, #18]
 80027d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027dc:	827b      	strh	r3, [r7, #18]
 80027de:	8a7b      	ldrh	r3, [r7, #18]
 80027e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027e4:	827b      	strh	r3, [r7, #18]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	8a7b      	ldrh	r3, [r7, #18]
 80027ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	8013      	strh	r3, [r2, #0]
 8002800:	e17b      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002814:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002818:	2b00      	cmp	r3, #0
 800281a:	f280 80ea 	bge.w	80029f2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29a      	uxth	r2, r3
 8002830:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002834:	4013      	ands	r3, r2
 8002836:	853b      	strh	r3, [r7, #40]	; 0x28
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800284c:	b292      	uxth	r2, r2
 800284e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002850:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	7b1b      	ldrb	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d122      	bne.n	80028b4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	3306      	adds	r3, #6
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002896:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8087 	beq.w	80029ae <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	88da      	ldrh	r2, [r3, #6]
 80028ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ae:	f004 f88c 	bl	80069ca <USB_ReadPMA>
 80028b2:	e07c      	b.n	80029ae <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d108      	bne.n	80028ce <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028be:	461a      	mov	r2, r3
 80028c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f927 	bl	8002b16 <HAL_PCD_EP_DB_Receive>
 80028c8:	4603      	mov	r3, r0
 80028ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028cc:	e06f      	b.n	80029ae <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d021      	beq.n	800296c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	3302      	adds	r3, #2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002950:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02a      	beq.n	80029ae <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	6959      	ldr	r1, [r3, #20]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	891a      	ldrh	r2, [r3, #8]
 8002964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002966:	f004 f830 	bl	80069ca <USB_ReadPMA>
 800296a:	e020      	b.n	80029ae <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	3306      	adds	r3, #6
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	895a      	ldrh	r2, [r3, #10]
 80029a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029aa:	f004 f80e 	bl	80069ca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b4:	441a      	add	r2, r3
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c0:	441a      	add	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <PCD_EP_ISR_Handler+0x4c2>
 80029ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d206      	bcs.n	80029e6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f005 fbc2 	bl	8008168 <HAL_PCD_DataOutStageCallback>
 80029e4:	e005      	b.n	80029f2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 f831 	bl	8004a54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d07e      	beq.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80029fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	843b      	strh	r3, [r7, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	8c3b      	ldrh	r3, [r7, #32]
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d00c      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x554>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	78db      	ldrb	r3, [r3, #3]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d146      	bne.n	8002aee <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d141      	bne.n	8002aee <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a92:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d906      	bls.n	8002aac <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	8bfb      	ldrh	r3, [r7, #30]
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	619a      	str	r2, [r3, #24]
 8002aaa:	e002      	b.n	8002ab2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 fb6c 	bl	800819e <HAL_PCD_DataInStageCallback>
 8002ac6:	e018      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	441a      	add	r2, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	8bfb      	ldrh	r3, [r7, #30]
 8002ada:	441a      	add	r2, r3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 ffb4 	bl	8004a54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002aec:	e005      	b.n	8002afa <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002af0:	461a      	mov	r2, r3
 8002af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f91b 	bl	8002d30 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f6ff ad0a 	blt.w	8002520 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3738      	adds	r7, #56	; 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d07e      	beq.n	8002c2c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	3302      	adds	r3, #2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	8b7b      	ldrh	r3, [r7, #26]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d306      	bcc.n	8002b70 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	8b7b      	ldrh	r3, [r7, #26]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	619a      	str	r2, [r3, #24]
 8002b6e:	e002      	b.n	8002b76 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2200      	movs	r2, #0
 8002b74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d123      	bne.n	8002bc6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	833b      	strh	r3, [r7, #24]
 8002b9a:	8b3b      	ldrh	r3, [r7, #24]
 8002b9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ba0:	833b      	strh	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	8b3b      	ldrh	r3, [r7, #24]
 8002bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01f      	beq.n	8002c10 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	82fb      	strh	r3, [r7, #22]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	441a      	add	r2, r3
 8002bfa:	8afb      	ldrh	r3, [r7, #22]
 8002bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c10:	8b7b      	ldrh	r3, [r7, #26]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8087 	beq.w	8002d26 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6959      	ldr	r1, [r3, #20]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	891a      	ldrh	r2, [r3, #8]
 8002c24:	8b7b      	ldrh	r3, [r7, #26]
 8002c26:	f003 fed0 	bl	80069ca <USB_ReadPMA>
 8002c2a:	e07c      	b.n	8002d26 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3306      	adds	r3, #6
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	8b7b      	ldrh	r3, [r7, #26]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d306      	bcc.n	8002c6e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	1ad2      	subs	r2, r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	619a      	str	r2, [r3, #24]
 8002c6c:	e002      	b.n	8002c74 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d123      	bne.n	8002cc4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	83fb      	strh	r3, [r7, #30]
 8002c98:	8bfb      	ldrh	r3, [r7, #30]
 8002c9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c9e:	83fb      	strh	r3, [r7, #30]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	8bfb      	ldrh	r3, [r7, #30]
 8002cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11f      	bne.n	8002d0e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	83bb      	strh	r3, [r7, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	8bbb      	ldrh	r3, [r7, #28]
 8002cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d0e:	8b7b      	ldrh	r3, [r7, #26]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6959      	ldr	r1, [r3, #20]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	895a      	ldrh	r2, [r3, #10]
 8002d20:	8b7b      	ldrh	r3, [r7, #26]
 8002d22:	f003 fe52 	bl	80069ca <USB_ReadPMA>
    }
  }

  return count;
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0a2      	sub	sp, #136	; 0x88
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 81c7 	beq.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d907      	bls.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	619a      	str	r2, [r3, #24]
 8002d90:	e002      	b.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 80b9 	bne.w	8002f14 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d126      	bne.n	8002df8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	4413      	add	r3, r2
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	011a      	lsls	r2, r3, #4
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	4413      	add	r3, r2
 8002dcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	e01a      	b.n	8002e2e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d116      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	4413      	add	r3, r2
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	4413      	add	r3, r2
 8002e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	785b      	ldrb	r3, [r3, #1]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d126      	bne.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	011a      	lsls	r2, r3, #4
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	e017      	b.n	8002eba <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	785b      	ldrb	r3, [r3, #1]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d113      	bne.n	8002eba <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	011a      	lsls	r2, r3, #4
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	4413      	add	r3, r2
 8002eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f005 f96c 	bl	800819e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 82d4 	beq.w	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	827b      	strh	r3, [r7, #18]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	441a      	add	r2, r3
 8002efc:	8a7b      	ldrh	r3, [r7, #18]
 8002efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	8013      	strh	r3, [r2, #0]
 8002f12:	e2b2      	b.n	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d021      	beq.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 8286 	bne.w	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f76:	441a      	add	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f84:	441a      	add	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d309      	bcc.n	8002faa <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	621a      	str	r2, [r3, #32]
 8002fa8:	e015      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002fb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc0:	e009      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d155      	bne.n	800308a <HAL_PCD_EP_DB_Transmit+0x35a>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	4413      	add	r3, r2
 8002ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	011a      	lsls	r2, r3, #4
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	4413      	add	r3, r2
 8003000:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	2b00      	cmp	r3, #0
 800300a:	d112      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x302>
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003016:	b29a      	uxth	r2, r3
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302a:	b29a      	uxth	r2, r3
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	e047      	b.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	2b3e      	cmp	r3, #62	; 0x3e
 8003036:	d811      	bhi.n	800305c <HAL_PCD_EP_DB_Transmit+0x32c>
 8003038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
 800303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304a:	3301      	adds	r3, #1
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003050:	b29b      	uxth	r3, r3
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	b29a      	uxth	r2, r3
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	801a      	strh	r2, [r3, #0]
 800305a:	e032      	b.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x392>
 800305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	64bb      	str	r3, [r7, #72]	; 0x48
 8003062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_DB_Transmit+0x342>
 800306c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306e:	3b01      	subs	r3, #1
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003074:	b29b      	uxth	r3, r3
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	b29b      	uxth	r3, r3
 800307a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003082:	b29a      	uxth	r2, r3
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	e01b      	b.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x392>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	785b      	ldrb	r3, [r3, #1]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d117      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	643b      	str	r3, [r7, #64]	; 0x40
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	4413      	add	r3, r2
 80030a8:	643b      	str	r3, [r7, #64]	; 0x40
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	011a      	lsls	r2, r3, #4
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	4413      	add	r3, r2
 80030b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	891a      	ldrh	r2, [r3, #8]
 80030ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f003 fc35 	bl	8006940 <USB_WritePMA>
 80030d6:	e1d0      	b.n	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	3306      	adds	r3, #6
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003100:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800310c:	429a      	cmp	r2, r3
 800310e:	d307      	bcc.n	8003120 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003118:	1ad2      	subs	r2, r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	619a      	str	r2, [r3, #24]
 800311e:	e002      	b.n	8003126 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80c4 	bne.w	80032b8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d126      	bne.n	8003186 <HAL_PCD_EP_DB_Transmit+0x456>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314c:	4413      	add	r3, r2
 800314e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	011a      	lsls	r2, r3, #4
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	4413      	add	r3, r2
 800315a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800316a:	b29a      	uxth	r2, r3
 800316c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317e:	b29a      	uxth	r2, r3
 8003180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e01a      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x48c>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d116      	bne.n	80031bc <HAL_PCD_EP_DB_Transmit+0x48c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	677b      	str	r3, [r7, #116]	; 0x74
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a2:	4413      	add	r3, r2
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	011a      	lsls	r2, r3, #4
 80031ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ae:	4413      	add	r3, r2
 80031b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031b4:	673b      	str	r3, [r7, #112]	; 0x70
 80031b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b8:	2200      	movs	r2, #0
 80031ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d12f      	bne.n	800322a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e2:	4413      	add	r3, r2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	011a      	lsls	r2, r3, #4
 80031ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003208:	b29a      	uxth	r2, r3
 800320a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320e:	801a      	strh	r2, [r3, #0]
 8003210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003220:	b29a      	uxth	r2, r3
 8003222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	e017      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x52a>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d113      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	4413      	add	r3, r2
 8003242:	67bb      	str	r3, [r7, #120]	; 0x78
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	011a      	lsls	r2, r3, #4
 800324a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324c:	4413      	add	r3, r2
 800324e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003256:	2200      	movs	r2, #0
 8003258:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	4619      	mov	r1, r3
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f004 ff9c 	bl	800819e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8104 	bne.w	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
 80032b6:	e0e0      	b.n	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d121      	bne.n	8003306 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 80b4 	bne.w	800347a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800331a:	441a      	add	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003328:	441a      	add	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d309      	bcc.n	800334e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	621a      	str	r2, [r3, #32]
 800334c:	e015      	b.n	800337a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003356:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800335a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003364:	e009      	b.n	800337a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	667b      	str	r3, [r7, #100]	; 0x64
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d155      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0x704>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	4413      	add	r3, r2
 800339e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	4413      	add	r3, r2
 80033aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80033b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d112      	bne.n	80033dc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80033b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	e044      	b.n	8003466 <HAL_PCD_EP_DB_Transmit+0x736>
 80033dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033de:	2b3e      	cmp	r3, #62	; 0x3e
 80033e0:	d811      	bhi.n	8003406 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	657b      	str	r3, [r7, #84]	; 0x54
 80033e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80033f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f4:	3301      	adds	r3, #1
 80033f6:	657b      	str	r3, [r7, #84]	; 0x54
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	b29a      	uxth	r2, r3
 8003400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	e02f      	b.n	8003466 <HAL_PCD_EP_DB_Transmit+0x736>
 8003406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003418:	3b01      	subs	r3, #1
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	b29b      	uxth	r3, r3
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342c:	b29a      	uxth	r2, r3
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e018      	b.n	8003466 <HAL_PCD_EP_DB_Transmit+0x736>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	785b      	ldrb	r3, [r3, #1]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d114      	bne.n	8003466 <HAL_PCD_EP_DB_Transmit+0x736>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344a:	4413      	add	r3, r2
 800344c:	667b      	str	r3, [r7, #100]	; 0x64
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	011a      	lsls	r2, r3, #4
 8003454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003456:	4413      	add	r3, r2
 8003458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800345c:	663b      	str	r3, [r7, #96]	; 0x60
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	b29a      	uxth	r2, r3
 8003462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003464:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6959      	ldr	r1, [r3, #20]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	895a      	ldrh	r2, [r3, #10]
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	f003 fa63 	bl	8006940 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003494:	823b      	strh	r3, [r7, #16]
 8003496:	8a3b      	ldrh	r3, [r7, #16]
 8003498:	f083 0310 	eor.w	r3, r3, #16
 800349c:	823b      	strh	r3, [r7, #16]
 800349e:	8a3b      	ldrh	r3, [r7, #16]
 80034a0:	f083 0320 	eor.w	r3, r3, #32
 80034a4:	823b      	strh	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	441a      	add	r2, r3
 80034b4:	8a3b      	ldrh	r3, [r7, #16]
 80034b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3788      	adds	r7, #136	; 0x88
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	4613      	mov	r3, r2
 80034e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e009      	b.n	800351e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800350a:	897a      	ldrh	r2, [r7, #10]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800351e:	893b      	ldrh	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	b29a      	uxth	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	80da      	strh	r2, [r3, #6]
 8003532:	e00b      	b.n	800354c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2201      	movs	r2, #1
 8003538:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	b29a      	uxth	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b29a      	uxth	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e272      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	4b92      	ldr	r3, [pc, #584]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00c      	beq.n	800359e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003584:	4b8f      	ldr	r3, [pc, #572]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
 8003590:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d06c      	beq.n	8003684 <HAL_RCC_OscConfig+0x12c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d168      	bne.n	8003684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e24c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x76>
 80035c0:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e02e      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x98>
 80035d6:	4b7b      	ldr	r3, [pc, #492]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7a      	ldr	r2, [pc, #488]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b78      	ldr	r3, [pc, #480]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a77      	ldr	r2, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0xbc>
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a71      	ldr	r2, [pc, #452]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6f      	ldr	r3, [pc, #444]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6e      	ldr	r2, [pc, #440]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a67      	ldr	r2, [pc, #412]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fb78 	bl	8000d28 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fb74 	bl	8000d28 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e200      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xe4>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fb64 	bl	8000d28 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fb60 	bl	8000d28 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1ec      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x10c>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800369e:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
 80036aa:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c0      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4939      	ldr	r1, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fb19 	bl	8000d28 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd fb15 	bl	8000d28 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4927      	ldr	r1, [pc, #156]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd faf8 	bl	8000d28 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd faf4 	bl	8000d28 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e180      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03a      	beq.n	80037dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_RCC_OscConfig+0x274>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fd fad8 	bl	8000d28 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd fad4 	bl	8000d28 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e160      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800379a:	2001      	movs	r0, #1
 800379c:	f000 fac4 	bl	8003d28 <RCC_Delay>
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_OscConfig+0x274>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a8:	f7fd fabe 	bl	8000d28 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ae:	e00f      	b.n	80037d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fd faba 	bl	8000d28 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d908      	bls.n	80037d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e146      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	42420000 	.word	0x42420000
 80037cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e9      	bne.n	80037b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a6 	beq.w	8003936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd fa7b 	bl	8000d28 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd fa77 	bl	8000d28 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e103      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x312>
 800385c:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e02d      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x334>
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	e01c      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x356>
 8003894:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a60      	ldr	r2, [pc, #384]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e00b      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 80038ae:	4b5b      	ldr	r3, [pc, #364]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a5a      	ldr	r2, [pc, #360]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d015      	beq.n	80038fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fd fa2b 	bl	8000d28 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd fa27 	bl	8000d28 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0b1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ee      	beq.n	80038d6 <HAL_RCC_OscConfig+0x37e>
 80038f8:	e014      	b.n	8003924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fa15 	bl	8000d28 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd fa11 	bl	8000d28 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e09b      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ee      	bne.n	8003902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d061      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d146      	bne.n	80039e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd f9e5 	bl	8000d28 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd f9e1 	bl	8000d28 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e06d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d108      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4921      	ldr	r1, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a19      	ldr	r1, [r3, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	430b      	orrs	r3, r1
 80039ae:	491b      	ldr	r1, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fd f9b5 	bl	8000d28 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd f9b1 	bl	8000d28 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46a>
 80039e0:	e035      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd f99e 	bl	8000d28 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd f99a 	bl	8000d28 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e026      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x498>
 8003a0e:	e01e      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e019      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_OscConfig+0x500>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0d0      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d910      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4965      	ldr	r1, [pc, #404]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b8      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d040      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d115      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e073      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06b      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3a:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4936      	ldr	r1, [pc, #216]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7fd f8ec 	bl	8000d28 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fd f8e8 	bl	8000d28 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e053      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 020c 	and.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1eb      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d210      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 0207 	bic.w	r2, r3, #7
 8003b92:	4922      	ldr	r1, [pc, #136]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e032      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4916      	ldr	r1, [pc, #88]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f821 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	490a      	ldr	r1, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	5ccb      	ldrb	r3, [r1, r3]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1cc>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1d0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f84a 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	080086d8 	.word	0x080086d8
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000038 	.word	0x20000038

08003c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b490      	push	{r4, r7}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xac>)
 8003c38:	1d3c      	adds	r4, r7, #4
 8003c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c40:	f240 2301 	movw	r3, #513	; 0x201
 8003c44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x40>
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x46>
 8003c6e:	e02b      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c72:	623b      	str	r3, [r7, #32]
      break;
 8003c74:	e02b      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	0c9b      	lsrs	r3, r3, #18
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3328      	adds	r3, #40	; 0x28
 8003c80:	443b      	add	r3, r7
 8003c82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c86:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0c5b      	lsrs	r3, r3, #17
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	3328      	adds	r3, #40	; 0x28
 8003c9e:	443b      	add	r3, r7
 8003ca0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ca4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003caa:	fb03 f202 	mul.w	r2, r3, r2
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	623b      	str	r3, [r7, #32]
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cca:	623b      	str	r3, [r7, #32]
      break;
 8003ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cce:	6a3b      	ldr	r3, [r7, #32]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc90      	pop	{r4, r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	0800868c 	.word	0x0800868c
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	007a1200 	.word	0x007a1200
 8003ce8:	003d0900 	.word	0x003d0900

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	20000000 	.word	0x20000000

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff2 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	080086e8 	.word	0x080086e8

08003d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <RCC_Delay+0x34>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <RCC_Delay+0x38>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0a5b      	lsrs	r3, r3, #9
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d44:	bf00      	nop
  }
  while (Delay --);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e5a      	subs	r2, r3, #1
 8003d4a:	60fa      	str	r2, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f9      	bne.n	8003d44 <RCC_Delay+0x1c>
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	10624dd3 	.word	0x10624dd3

08003d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d07d      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	61d3      	str	r3, [r2, #28]
 8003d9c:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d118      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc4:	f7fc ffb0 	bl	8000d28 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	e008      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fc ffac 	bl	8000d28 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e06d      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d027      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d014      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fc ff7b 	bl	8000d28 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fc ff77 	bl	8000d28 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e036      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ee      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4904      	ldr	r1, [pc, #16]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	42420440 	.word	0x42420440

08003ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	f107 0014 	add.w	r0, r7, #20
 8003ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	b004      	add	sp, #16
 8003eee:	4770      	bx	lr

08003ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f68:	b084      	sub	sp, #16
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	f107 0014 	add.w	r0, r7, #20
 8003f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	b004      	add	sp, #16
 8003fa6:	4770      	bx	lr

08003fa8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b09b      	sub	sp, #108	; 0x6c
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	78db      	ldrb	r3, [r3, #3]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d81f      	bhi.n	800401a <USB_ActivateEndpoint+0x72>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <USB_ActivateEndpoint+0x38>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004023 	.word	0x08004023
 8003fec:	08003fff 	.word	0x08003fff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ff0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ffc:	e012      	b.n	8004024 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ffe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004002:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004006:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800400a:	e00b      	b.n	8004024 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800400c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004014:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004018:	e004      	b.n	8004024 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004020:	e000      	b.n	8004024 <USB_ActivateEndpoint+0x7c>
      break;
 8004022:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	b29a      	uxth	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	4313      	orrs	r3, r2
 8004066:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	7b1b      	ldrb	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8149 	bne.w	8004328 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8084 	beq.w	80041a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	011a      	lsls	r2, r3, #4
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	88db      	ldrh	r3, [r3, #6]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	81fb      	strh	r3, [r7, #14]
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <USB_ActivateEndpoint+0x17c>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	81bb      	strh	r3, [r7, #12]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	89bb      	ldrh	r3, [r7, #12]
 8004110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d020      	beq.n	800416e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004142:	813b      	strh	r3, [r7, #8]
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	f083 0320 	eor.w	r3, r3, #32
 800414a:	813b      	strh	r3, [r7, #8]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	893b      	ldrh	r3, [r7, #8]
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
 800416c:	e27f      	b.n	800466e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
 80041a6:	e262      	b.n	800466e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	4413      	add	r3, r2
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	011a      	lsls	r2, r3, #4
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	88db      	ldrh	r3, [r3, #6]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	4413      	add	r3, r2
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	011a      	lsls	r2, r3, #4
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d112      	bne.n	800422e <USB_ActivateEndpoint+0x286>
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004212:	b29a      	uxth	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004226:	b29a      	uxth	r2, r3
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	e02f      	b.n	800428e <USB_ActivateEndpoint+0x2e6>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b3e      	cmp	r3, #62	; 0x3e
 8004234:	d813      	bhi.n	800425e <USB_ActivateEndpoint+0x2b6>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	663b      	str	r3, [r7, #96]	; 0x60
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <USB_ActivateEndpoint+0x2a8>
 800424a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424c:	3301      	adds	r3, #1
 800424e:	663b      	str	r3, [r7, #96]	; 0x60
 8004250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004252:	b29b      	uxth	r3, r3
 8004254:	029b      	lsls	r3, r3, #10
 8004256:	b29a      	uxth	r2, r3
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e017      	b.n	800428e <USB_ActivateEndpoint+0x2e6>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <USB_ActivateEndpoint+0x2d0>
 8004272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004274:	3b01      	subs	r3, #1
 8004276:	663b      	str	r3, [r7, #96]	; 0x60
 8004278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427a:	b29b      	uxth	r3, r3
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004288:	b29a      	uxth	r2, r3
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	83fb      	strh	r3, [r7, #30]
 800429c:	8bfb      	ldrh	r3, [r7, #30]
 800429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01b      	beq.n	80042de <USB_ActivateEndpoint+0x336>
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042bc:	83bb      	strh	r3, [r7, #28]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	8bbb      	ldrh	r3, [r7, #28]
 80042ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	b29b      	uxth	r3, r3
 80042dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	837b      	strh	r3, [r7, #26]
 80042f6:	8b7b      	ldrh	r3, [r7, #26]
 80042f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042fc:	837b      	strh	r3, [r7, #26]
 80042fe:	8b7b      	ldrh	r3, [r7, #26]
 8004300:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004304:	837b      	strh	r3, [r7, #26]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	8b7b      	ldrh	r3, [r7, #26]
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]
 8004326:	e1a2      	b.n	800466e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65bb      	str	r3, [r7, #88]	; 0x58
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004374:	4413      	add	r3, r2
 8004376:	65bb      	str	r3, [r7, #88]	; 0x58
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	011a      	lsls	r2, r3, #4
 800437e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004380:	4413      	add	r3, r2
 8004382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004386:	657b      	str	r3, [r7, #84]	; 0x54
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	891b      	ldrh	r3, [r3, #8]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	4413      	add	r3, r2
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	895b      	ldrh	r3, [r3, #10]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 8091 	bne.w	80044f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80043e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <USB_ActivateEndpoint+0x47e>
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	873b      	strh	r3, [r7, #56]	; 0x38
 8004434:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <USB_ActivateEndpoint+0x4ce>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800446a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800448e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004494:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004496:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800449c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80044aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]
 80044f6:	e0ba      	b.n	800466e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004508:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <USB_ActivateEndpoint+0x5a8>
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004560:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01d      	beq.n	80045a8 <USB_ActivateEndpoint+0x600>
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	78db      	ldrb	r3, [r3, #3]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d024      	beq.n	80045fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045ce:	f083 0320 	eor.w	r3, r3, #32
 80045d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
 80045f8:	e01d      	b.n	8004636 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004610:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800465a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800466e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004672:	4618      	mov	r0, r3
 8004674:	376c      	adds	r7, #108	; 0x6c
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800467c:	b480      	push	{r7}
 800467e:	b08d      	sub	sp, #52	; 0x34
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	7b1b      	ldrb	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 808e 	bne.w	80047ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d044      	beq.n	8004722 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	81bb      	strh	r3, [r7, #12]
 80046a6:	89bb      	ldrh	r3, [r7, #12]
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <USB_DeactivateEndpoint+0x6c>
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	817b      	strh	r3, [r7, #10]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fe:	813b      	strh	r3, [r7, #8]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	893b      	ldrh	r3, [r7, #8]
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
 8004720:	e192      	b.n	8004a48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	827b      	strh	r3, [r7, #18]
 8004730:	8a7b      	ldrh	r3, [r7, #18]
 8004732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01b      	beq.n	8004772 <USB_DeactivateEndpoint+0xf6>
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	823b      	strh	r3, [r7, #16]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	8a3b      	ldrh	r3, [r7, #16]
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	81fb      	strh	r3, [r7, #14]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8013      	strh	r3, [r2, #0]
 80047aa:	e14d      	b.n	8004a48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 80a5 	bne.w	8004900 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	843b      	strh	r3, [r7, #32]
 80047c4:	8c3b      	ldrh	r3, [r7, #32]
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01b      	beq.n	8004806 <USB_DeactivateEndpoint+0x18a>
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	83fb      	strh	r3, [r7, #30]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8bfb      	ldrh	r3, [r7, #30]
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	83bb      	strh	r3, [r7, #28]
 8004814:	8bbb      	ldrh	r3, [r7, #28]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01b      	beq.n	8004856 <USB_DeactivateEndpoint+0x1da>
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	837b      	strh	r3, [r7, #26]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	8b7b      	ldrh	r3, [r7, #26]
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	833b      	strh	r3, [r7, #24]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	8b3b      	ldrh	r3, [r7, #24]
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	82fb      	strh	r3, [r7, #22]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	8afb      	ldrh	r3, [r7, #22]
 80048b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	82bb      	strh	r3, [r7, #20]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8abb      	ldrh	r3, [r7, #20]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
 80048fe:	e0a3      	b.n	8004a48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800490e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <USB_DeactivateEndpoint+0x2d4>
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800495e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <USB_DeactivateEndpoint+0x324>
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3734      	adds	r7, #52	; 0x34
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b0cc      	sub	sp, #304	; 0x130
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a62:	6018      	str	r0, [r3, #0]
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	f041 817d 	bne.w	8005d7a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004aac:	e007      	b.n	8004abe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	7b1b      	ldrb	r3, [r3, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d152      	bne.n	8004b74 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	88da      	ldrh	r2, [r3, #6]
 8004ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004af0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004af4:	6800      	ldr	r0, [r0, #0]
 8004af6:	f001 ff23 	bl	8006940 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b2c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	440a      	add	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	011a      	lsls	r2, r3, #4
 8004b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	f001 b8b5 	b.w	8005cde <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f040 84c6 	bne.w	8005512 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a1a      	ldr	r2, [r3, #32]
 8004b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f240 8443 	bls.w	800542a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 823e 	beq.w	80050c2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c52:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 809a 	bne.w	8004da0 <USB_EPStartXfer+0x34c>
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c9e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	011a      	lsls	r2, r3, #4
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d122      	bne.n	8004d1e <USB_EPStartXfer+0x2ca>
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	e079      	b.n	8004e12 <USB_EPStartXfer+0x3be>
 8004d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d22:	2b3e      	cmp	r3, #62	; 0x3e
 8004d24:	d81b      	bhi.n	8004d5e <USB_EPStartXfer+0x30a>
 8004d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <USB_EPStartXfer+0x2f2>
 8004d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d40:	3301      	adds	r3, #1
 8004d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e059      	b.n	8004e12 <USB_EPStartXfer+0x3be>
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <USB_EPStartXfer+0x32a>
 8004d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	e038      	b.n	8004e12 <USB_EPStartXfer+0x3be>
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d130      	bne.n	8004e12 <USB_EPStartXfer+0x3be>
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	895b      	ldrh	r3, [r3, #10]
 8004e1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f001 fd7d 	bl	8006940 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	441a      	add	r2, r3
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d90f      	bls.n	8004ea0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	621a      	str	r2, [r3, #32]
 8004e9e:	e00e      	b.n	8004ebe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 809a 	bne.w	8005004 <USB_EPStartXfer+0x5b0>
 8004ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ed8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004edc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004efe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f02:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	440a      	add	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d122      	bne.n	8004f82 <USB_EPStartXfer+0x52e>
 8004f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e083      	b.n	800508a <USB_EPStartXfer+0x636>
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f86:	2b3e      	cmp	r3, #62	; 0x3e
 8004f88:	d81b      	bhi.n	8004fc2 <USB_EPStartXfer+0x56e>
 8004f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <USB_EPStartXfer+0x556>
 8004fa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004faa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	e063      	b.n	800508a <USB_EPStartXfer+0x636>
 8004fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <USB_EPStartXfer+0x58e>
 8004fd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	029b      	lsls	r3, r3, #10
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e042      	b.n	800508a <USB_EPStartXfer+0x636>
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d13a      	bne.n	800508a <USB_EPStartXfer+0x636>
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800501c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005020:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005046:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	440a      	add	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	011a      	lsls	r2, r3, #4
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4413      	add	r3, r2
 800506a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507c:	b29a      	uxth	r2, r3
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	891b      	ldrh	r3, [r3, #8]
 8005096:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050b8:	6800      	ldr	r0, [r0, #0]
 80050ba:	f001 fc41 	bl	8006940 <USB_WritePMA>
 80050be:	f000 be0e 	b.w	8005cde <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d16d      	bne.n	80051ae <USB_EPStartXfer+0x75a>
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f2:	4413      	add	r3, r2
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	011a      	lsls	r2, r3, #4
 8005104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005106:	4413      	add	r3, r2
 8005108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d112      	bne.n	800513c <USB_EPStartXfer+0x6e8>
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005120:	b29a      	uxth	r2, r3
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005134:	b29a      	uxth	r2, r3
 8005136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	e063      	b.n	8005204 <USB_EPStartXfer+0x7b0>
 800513c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005140:	2b3e      	cmp	r3, #62	; 0x3e
 8005142:	d817      	bhi.n	8005174 <USB_EPStartXfer+0x720>
 8005144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <USB_EPStartXfer+0x710>
 800515a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800515e:	3301      	adds	r3, #1
 8005160:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005164:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005168:	b29b      	uxth	r3, r3
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	b29a      	uxth	r2, r3
 800516e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	e047      	b.n	8005204 <USB_EPStartXfer+0x7b0>
 8005174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800517e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <USB_EPStartXfer+0x740>
 800518a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800518e:	3b01      	subs	r3, #1
 8005190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005194:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005198:	b29b      	uxth	r3, r3
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e02a      	b.n	8005204 <USB_EPStartXfer+0x7b0>
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d122      	bne.n	8005204 <USB_EPStartXfer+0x7b0>
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051de:	4413      	add	r3, r2
 80051e0:	653b      	str	r3, [r7, #80]	; 0x50
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	011a      	lsls	r2, r3, #4
 80051f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	891b      	ldrh	r3, [r3, #8]
 8005210:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6959      	ldr	r1, [r3, #20]
 8005220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005224:	b29b      	uxth	r3, r3
 8005226:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800522a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800522e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005232:	6800      	ldr	r0, [r0, #0]
 8005234:	f001 fb84 	bl	8006940 <USB_WritePMA>
            ep->xfer_buff += len;
 8005238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	441a      	add	r2, r3
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d90f      	bls.n	8005292 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005282:	1ad2      	subs	r2, r2, r3
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	621a      	str	r2, [r3, #32]
 8005290:	e00e      	b.n	80052b0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2200      	movs	r2, #0
 80052ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	643b      	str	r3, [r7, #64]	; 0x40
 80052bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d16d      	bne.n	80053a8 <USB_EPStartXfer+0x954>
 80052cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	4413      	add	r3, r2
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80052f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	011a      	lsls	r2, r3, #4
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	4413      	add	r3, r2
 8005302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d112      	bne.n	8005336 <USB_EPStartXfer+0x8e2>
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531a:	b29a      	uxth	r2, r3
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532e:	b29a      	uxth	r2, r3
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e05d      	b.n	80053f2 <USB_EPStartXfer+0x99e>
 8005336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533a:	2b3e      	cmp	r3, #62	; 0x3e
 800533c:	d817      	bhi.n	800536e <USB_EPStartXfer+0x91a>
 800533e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <USB_EPStartXfer+0x90a>
 8005354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005358:	3301      	adds	r3, #1
 800535a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800535e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005362:	b29b      	uxth	r3, r3
 8005364:	029b      	lsls	r3, r3, #10
 8005366:	b29a      	uxth	r2, r3
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e041      	b.n	80053f2 <USB_EPStartXfer+0x99e>
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <USB_EPStartXfer+0x93a>
 8005384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005388:	3b01      	subs	r3, #1
 800538a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800538e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e024      	b.n	80053f2 <USB_EPStartXfer+0x99e>
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d11c      	bne.n	80053f2 <USB_EPStartXfer+0x99e>
 80053b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053cc:	4413      	add	r3, r2
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	011a      	lsls	r2, r3, #4
 80053de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e0:	4413      	add	r3, r2
 80053e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	895b      	ldrh	r3, [r3, #10]
 80053fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6959      	ldr	r1, [r3, #20]
 800540e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005412:	b29b      	uxth	r3, r3
 8005414:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005418:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800541c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005420:	6800      	ldr	r0, [r0, #0]
 8005422:	f001 fa8d 	bl	8006940 <USB_WritePMA>
 8005426:	f000 bc5a 	b.w	8005cde <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b6:	4413      	add	r3, r2
 80054b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011a      	lsls	r2, r3, #4
 80054c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	891b      	ldrh	r3, [r3, #8]
 80054e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6959      	ldr	r1, [r3, #20]
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005502:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005506:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	f001 fa18 	bl	8006940 <USB_WritePMA>
 8005510:	e3e5      	b.n	8005cde <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800555a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005562:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556a:	b29b      	uxth	r3, r3
 800556c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 81bc 	beq.w	800592c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d16d      	bne.n	80056ae <USB_EPStartXfer+0xc5a>
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f2:	4413      	add	r3, r2
 80055f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	011a      	lsls	r2, r3, #4
 8005604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005606:	4413      	add	r3, r2
 8005608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800560c:	677b      	str	r3, [r7, #116]	; 0x74
 800560e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d112      	bne.n	800563c <USB_EPStartXfer+0xbe8>
 8005616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005620:	b29a      	uxth	r2, r3
 8005622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005634:	b29a      	uxth	r2, r3
 8005636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e060      	b.n	80056fe <USB_EPStartXfer+0xcaa>
 800563c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005640:	2b3e      	cmp	r3, #62	; 0x3e
 8005642:	d817      	bhi.n	8005674 <USB_EPStartXfer+0xc20>
 8005644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800564e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <USB_EPStartXfer+0xc10>
 800565a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800565e:	3301      	adds	r3, #1
 8005660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005664:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005668:	b29b      	uxth	r3, r3
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	b29a      	uxth	r2, r3
 800566e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e044      	b.n	80056fe <USB_EPStartXfer+0xcaa>
 8005674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800567e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <USB_EPStartXfer+0xc40>
 800568a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800568e:	3b01      	subs	r3, #1
 8005690:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005694:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005698:	b29b      	uxth	r3, r3
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e027      	b.n	80056fe <USB_EPStartXfer+0xcaa>
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d11f      	bne.n	80056fe <USB_EPStartXfer+0xcaa>
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056d4:	4413      	add	r3, r2
 80056d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	011a      	lsls	r2, r3, #4
 80056e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	895b      	ldrh	r3, [r3, #10]
 800570a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6959      	ldr	r1, [r3, #20]
 800571a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571e:	b29b      	uxth	r3, r3
 8005720:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005724:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005728:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f001 f907 	bl	8006940 <USB_WritePMA>
          ep->xfer_buff += len;
 8005732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005742:	441a      	add	r2, r3
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d90f      	bls.n	800578c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800576c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	1ad2      	subs	r2, r2, r3
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	621a      	str	r2, [r3, #32]
 800578a:	e00e      	b.n	80057aa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80057aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8295 	beq.w	8005cde <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d16d      	bne.n	80058a0 <USB_EPStartXfer+0xe4c>
 80057c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057e4:	4413      	add	r3, r2
 80057e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	011a      	lsls	r2, r3, #4
 80057f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d112      	bne.n	800582e <USB_EPStartXfer+0xdda>
 8005808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005812:	b29a      	uxth	r2, r3
 8005814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e063      	b.n	80058f6 <USB_EPStartXfer+0xea2>
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005832:	2b3e      	cmp	r3, #62	; 0x3e
 8005834:	d817      	bhi.n	8005866 <USB_EPStartXfer+0xe12>
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <USB_EPStartXfer+0xe02>
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005850:	3301      	adds	r3, #1
 8005852:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29a      	uxth	r2, r3
 8005860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e047      	b.n	80058f6 <USB_EPStartXfer+0xea2>
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <USB_EPStartXfer+0xe32>
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	3b01      	subs	r3, #1
 8005882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588a:	b29b      	uxth	r3, r3
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	b29b      	uxth	r3, r3
 8005890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005898:	b29a      	uxth	r2, r3
 800589a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e02a      	b.n	80058f6 <USB_EPStartXfer+0xea2>
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d122      	bne.n	80058f6 <USB_EPStartXfer+0xea2>
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	673b      	str	r3, [r7, #112]	; 0x70
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d0:	4413      	add	r3, r2
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	011a      	lsls	r2, r3, #4
 80058e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	891b      	ldrh	r3, [r3, #8]
 8005902:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6959      	ldr	r1, [r3, #20]
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	b29b      	uxth	r3, r3
 8005918:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800591c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005920:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005924:	6800      	ldr	r0, [r0, #0]
 8005926:	f001 f80b 	bl	8006940 <USB_WritePMA>
 800592a:	e1d8      	b.n	8005cde <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d178      	bne.n	8005a2e <USB_EPStartXfer+0xfda>
 800593c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005960:	4413      	add	r3, r2
 8005962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	011a      	lsls	r2, r3, #4
 8005974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005978:	4413      	add	r3, r2
 800597a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800597e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <USB_EPStartXfer+0xf64>
 800598a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	e06b      	b.n	8005a90 <USB_EPStartXfer+0x103c>
 80059b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059bc:	2b3e      	cmp	r3, #62	; 0x3e
 80059be:	d818      	bhi.n	80059f2 <USB_EPStartXfer+0xf9e>
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USB_EPStartXfer+0xf8c>
 80059d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059da:	3301      	adds	r3, #1
 80059dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e04e      	b.n	8005a90 <USB_EPStartXfer+0x103c>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_EPStartXfer+0xfbe>
 8005a08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	e030      	b.n	8005a90 <USB_EPStartXfer+0x103c>
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d128      	bne.n	8005a90 <USB_EPStartXfer+0x103c>
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a62:	4413      	add	r3, r2
 8005a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6959      	ldr	r1, [r3, #20]
 8005aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ab6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005aba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	f000 ff3e 	bl	8006940 <USB_WritePMA>
          ep->xfer_buff += len;
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad4:	441a      	add	r2, r3
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d90f      	bls.n	8005b1e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a1a      	ldr	r2, [r3, #32]
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	621a      	str	r2, [r3, #32]
 8005b1c:	e00e      	b.n	8005b3c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80cc 	beq.w	8005cde <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d178      	bne.n	8005c56 <USB_EPStartXfer+0x1202>
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b88:	4413      	add	r3, r2
 8005b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	011a      	lsls	r2, r3, #4
 8005b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d116      	bne.n	8005be0 <USB_EPStartXfer+0x118c>
 8005bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	e064      	b.n	8005caa <USB_EPStartXfer+0x1256>
 8005be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be4:	2b3e      	cmp	r3, #62	; 0x3e
 8005be6:	d818      	bhi.n	8005c1a <USB_EPStartXfer+0x11c6>
 8005be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <USB_EPStartXfer+0x11b4>
 8005bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c02:	3301      	adds	r3, #1
 8005c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	029b      	lsls	r3, r3, #10
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e047      	b.n	8005caa <USB_EPStartXfer+0x1256>
 8005c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <USB_EPStartXfer+0x11e6>
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c34:	3b01      	subs	r3, #1
 8005c36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e029      	b.n	8005caa <USB_EPStartXfer+0x1256>
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d121      	bne.n	8005caa <USB_EPStartXfer+0x1256>
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	011a      	lsls	r2, r3, #4
 8005c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c94:	4413      	add	r3, r2
 8005c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	895b      	ldrh	r3, [r3, #10]
 8005cb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6959      	ldr	r1, [r3, #20]
 8005cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cd8:	6800      	ldr	r0, [r0, #0]
 8005cda:	f000 fe31 	bl	8006940 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d00:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	8013      	strh	r3, [r2, #0]
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005d16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d1a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005d1e:	8812      	ldrh	r2, [r2, #0]
 8005d20:	f082 0210 	eor.w	r2, r2, #16
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005d2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d32:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005d36:	8812      	ldrh	r2, [r2, #0]
 8005d38:	f082 0220 	eor.w	r2, r2, #32
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
 8005d76:	f000 bc9f 	b.w	80066b8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	7b1b      	ldrb	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 80ae 	bne.w	8005ee8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d917      	bls.n	8005dd8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	619a      	str	r2, [r3, #24]
 8005dd6:	e00e      	b.n	8005df6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <USB_EPStartXfer+0x141e>
 8005e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e3e8      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	2b3e      	cmp	r3, #62	; 0x3e
 8005e78:	d818      	bhi.n	8005eac <USB_EPStartXfer+0x1458>
 8005e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <USB_EPStartXfer+0x1446>
 8005e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e3cb      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
 8005eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <USB_EPStartXfer+0x1478>
 8005ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e3ad      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	78db      	ldrb	r3, [r3, #3]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f040 8200 	bne.w	80062fa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8091 	bne.w	800602e <USB_EPStartXfer+0x15da>
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f30:	4413      	add	r3, r2
 8005f32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	011a      	lsls	r2, r3, #4
 8005f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <USB_EPStartXfer+0x153c>
 8005f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	e083      	b.n	8006098 <USB_EPStartXfer+0x1644>
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f9e:	d820      	bhi.n	8005fe2 <USB_EPStartXfer+0x158e>
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USB_EPStartXfer+0x157c>
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e05a      	b.n	8006098 <USB_EPStartXfer+0x1644>
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <USB_EPStartXfer+0x15be>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	3b01      	subs	r3, #1
 800600e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e034      	b.n	8006098 <USB_EPStartXfer+0x1644>
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d12c      	bne.n	8006098 <USB_EPStartXfer+0x1644>
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006062:	4413      	add	r3, r2
 8006064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800607a:	4413      	add	r3, r2
 800607c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 8091 	bne.w	80061da <USB_EPStartXfer+0x1786>
 80060b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060dc:	4413      	add	r3, r2
 80060de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	011a      	lsls	r2, r3, #4
 80060f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <USB_EPStartXfer+0x16e8>
 800610e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e07c      	b.n	8006236 <USB_EPStartXfer+0x17e2>
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b3e      	cmp	r3, #62	; 0x3e
 800614a:	d820      	bhi.n	800618e <USB_EPStartXfer+0x173a>
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <USB_EPStartXfer+0x1728>
 8006172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006176:	3301      	adds	r3, #1
 8006178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800617c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e053      	b.n	8006236 <USB_EPStartXfer+0x17e2>
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <USB_EPStartXfer+0x176a>
 80061b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e02d      	b.n	8006236 <USB_EPStartXfer+0x17e2>
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d125      	bne.n	8006236 <USB_EPStartXfer+0x17e2>
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006200:	4413      	add	r3, r2
 8006202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006218:	4413      	add	r3, r2
 800621a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800621e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006234:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 81fe 	beq.w	8006644 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006268:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800626c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <USB_EPStartXfer+0x182c>
 8006274:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10d      	bne.n	800629c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006280:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 81db 	bne.w	8006644 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800628e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 81d4 	bne.w	8006644 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]
 80062f8:	e1a4      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	78db      	ldrb	r3, [r3, #3]
 8006306:	2b01      	cmp	r3, #1
 8006308:	f040 819a 	bne.w	8006640 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	429a      	cmp	r2, r3
 8006326:	d917      	bls.n	8006358 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006348:	1ad2      	subs	r2, r2, r3
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	619a      	str	r2, [r3, #24]
 8006356:	e00e      	b.n	8006376 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d178      	bne.n	8006478 <USB_EPStartXfer+0x1a24>
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063aa:	4413      	add	r3, r2
 80063ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d116      	bne.n	8006402 <USB_EPStartXfer+0x19ae>
 80063d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e06b      	b.n	80064da <USB_EPStartXfer+0x1a86>
 8006402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006406:	2b3e      	cmp	r3, #62	; 0x3e
 8006408:	d818      	bhi.n	800643c <USB_EPStartXfer+0x19e8>
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <USB_EPStartXfer+0x19d6>
 8006420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006424:	3301      	adds	r3, #1
 8006426:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800642a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642e:	b29b      	uxth	r3, r3
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e04e      	b.n	80064da <USB_EPStartXfer+0x1a86>
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <USB_EPStartXfer+0x1a08>
 8006452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006456:	3b01      	subs	r3, #1
 8006458:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800645c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006460:	b29b      	uxth	r3, r3
 8006462:	029b      	lsls	r3, r3, #10
 8006464:	b29b      	uxth	r3, r3
 8006466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646e:	b29a      	uxth	r2, r3
 8006470:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e030      	b.n	80064da <USB_EPStartXfer+0x1a86>
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d128      	bne.n	80064da <USB_EPStartXfer+0x1a86>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	011a      	lsls	r2, r3, #4
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d178      	bne.n	80065ea <USB_EPStartXfer+0x1b96>
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651c:	4413      	add	r3, r2
 800651e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	011a      	lsls	r2, r3, #4
 8006530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006534:	4413      	add	r3, r2
 8006536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800653a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d116      	bne.n	8006574 <USB_EPStartXfer+0x1b20>
 8006546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006552:	b29a      	uxth	r2, r3
 8006554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e067      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	2b3e      	cmp	r3, #62	; 0x3e
 800657a:	d818      	bhi.n	80065ae <USB_EPStartXfer+0x1b5a>
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <USB_EPStartXfer+0x1b48>
 8006592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006596:	3301      	adds	r3, #1
 8006598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800659c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	029b      	lsls	r3, r3, #10
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e04a      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <USB_EPStartXfer+0x1b7a>
 80065c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c8:	3b01      	subs	r3, #1
 80065ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e02c      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d124      	bne.n	8006644 <USB_EPStartXfer+0x1bf0>
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006610:	4413      	add	r3, r2
 8006612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	011a      	lsls	r2, r3, #4
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	4413      	add	r3, r2
 800662a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800662e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e001      	b.n	8006644 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e03a      	b.n	80066ba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800666e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006672:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006676:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800667a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800667e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006682:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d020      	beq.n	8006718 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ec:	81bb      	strh	r3, [r7, #12]
 80066ee:	89bb      	ldrh	r3, [r7, #12]
 80066f0:	f083 0310 	eor.w	r3, r3, #16
 80066f4:	81bb      	strh	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	89bb      	ldrh	r3, [r7, #12]
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
 8006716:	e01f      	b.n	8006758 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	81fb      	strh	r3, [r7, #14]
 8006730:	89fb      	ldrh	r3, [r7, #14]
 8006732:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006736:	81fb      	strh	r3, [r7, #14]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	89fb      	ldrh	r3, [r7, #14]
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	7b1b      	ldrb	r3, [r3, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f040 809d 	bne.w	80068b2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d04c      	beq.n	800681a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	823b      	strh	r3, [r7, #16]
 800678e:	8a3b      	ldrh	r3, [r7, #16]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <USB_EPClearStall+0x6c>
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	81fb      	strh	r3, [r7, #14]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d06c      	beq.n	80068b2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	81bb      	strh	r3, [r7, #12]
 80067f0:	89bb      	ldrh	r3, [r7, #12]
 80067f2:	f083 0320 	eor.w	r3, r3, #32
 80067f6:	81bb      	strh	r3, [r7, #12]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
 8006818:	e04b      	b.n	80068b2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	82fb      	strh	r3, [r7, #22]
 8006828:	8afb      	ldrh	r3, [r7, #22]
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <USB_EPClearStall+0x106>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	82bb      	strh	r3, [r7, #20]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	8abb      	ldrh	r3, [r7, #20]
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	827b      	strh	r3, [r7, #18]
 8006882:	8a7b      	ldrh	r3, [r7, #18]
 8006884:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006888:	827b      	strh	r3, [r7, #18]
 800688a:	8a7b      	ldrh	r3, [r7, #18]
 800688c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006890:	827b      	strh	r3, [r7, #18]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8a7b      	ldrh	r3, [r7, #18]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800691a:	b29b      	uxth	r3, r3
 800691c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006940:	b480      	push	{r7}
 8006942:	b08d      	sub	sp, #52	; 0x34
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4611      	mov	r1, r2
 800694c:	461a      	mov	r2, r3
 800694e:	460b      	mov	r3, r1
 8006950:	80fb      	strh	r3, [r7, #6]
 8006952:	4613      	mov	r3, r2
 8006954:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	3301      	adds	r3, #1
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	005a      	lsls	r2, r3, #1
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006978:	e01e      	b.n	80069b8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	3301      	adds	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	b29a      	uxth	r2, r3
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	3302      	adds	r3, #2
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	3302      	adds	r3, #2
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	3301      	adds	r3, #1
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	3b01      	subs	r3, #1
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1dd      	bne.n	800697a <USB_WritePMA+0x3a>
  }
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3734      	adds	r7, #52	; 0x34
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b08b      	sub	sp, #44	; 0x2c
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	4611      	mov	r1, r2
 80069d6:	461a      	mov	r2, r3
 80069d8:	460b      	mov	r3, r1
 80069da:	80fb      	strh	r3, [r7, #6]
 80069dc:	4613      	mov	r3, r2
 80069de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80069e0:	88bb      	ldrh	r3, [r7, #4]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	005a      	lsls	r2, r3, #1
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069fc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	e01b      	b.n	8006a3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	3302      	adds	r3, #2
 8006a10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	3302      	adds	r3, #2
 8006a34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e0      	bne.n	8006a04 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a42:	88bb      	ldrh	r3, [r7, #4]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	701a      	strb	r2, [r3, #0]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	372c      	adds	r7, #44	; 0x2c
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006a74:	2304      	movs	r3, #4
 8006a76:	2203      	movs	r2, #3
 8006a78:	2181      	movs	r1, #129	; 0x81
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fc61 	bl	8008342 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a86:	2010      	movs	r0, #16
 8006a88:	f001 fd70 	bl	800856c <USBD_static_malloc>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e005      	b.n	8006aae <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006ac2:	2181      	movs	r1, #129	; 0x81
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fc62 	bl	800838e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fd4f 	bl	8008584 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b08:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d045      	beq.n	8006bb2 <USBD_HID_Setup+0xba>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 80d3 	bne.w	8006cd2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	3b02      	subs	r3, #2
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d835      	bhi.n	8006ba2 <USBD_HID_Setup+0xaa>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <USBD_HID_Setup+0x44>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b93 	.word	0x08006b93
 8006b40:	08006b73 	.word	0x08006b73
 8006b44:	08006ba3 	.word	0x08006ba3
 8006b48:	08006ba3 	.word	0x08006ba3
 8006b4c:	08006ba3 	.word	0x08006ba3
 8006b50:	08006ba3 	.word	0x08006ba3
 8006b54:	08006ba3 	.word	0x08006ba3
 8006b58:	08006ba3 	.word	0x08006ba3
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b65 	.word	0x08006b65
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	601a      	str	r2, [r3, #0]
          break;
 8006b70:	e01e      	b.n	8006bb0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2201      	movs	r2, #1
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f922 	bl	8007dc2 <USBD_CtlSendData>
          break;
 8006b7e:	e017      	b.n	8006bb0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	885b      	ldrh	r3, [r3, #2]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	605a      	str	r2, [r3, #4]
          break;
 8006b90:	e00e      	b.n	8006bb0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3304      	adds	r3, #4
 8006b96:	2201      	movs	r2, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f911 	bl	8007dc2 <USBD_CtlSendData>
          break;
 8006ba0:	e006      	b.n	8006bb0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f8a2 	bl	8007cee <USBD_CtlError>
          ret = USBD_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	75fb      	strb	r3, [r7, #23]
          break;
 8006bae:	bf00      	nop
      }
      break;
 8006bb0:	e096      	b.n	8006ce0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	2b0b      	cmp	r3, #11
 8006bb8:	f200 8083 	bhi.w	8006cc2 <USBD_HID_Setup+0x1ca>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBD_HID_Setup+0xcc>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006cc3 	.word	0x08006cc3
 8006bcc:	08006cc3 	.word	0x08006cc3
 8006bd0:	08006cc3 	.word	0x08006cc3
 8006bd4:	08006cc3 	.word	0x08006cc3
 8006bd8:	08006cc3 	.word	0x08006cc3
 8006bdc:	08006c1d 	.word	0x08006c1d
 8006be0:	08006cc3 	.word	0x08006cc3
 8006be4:	08006cc3 	.word	0x08006cc3
 8006be8:	08006cc3 	.word	0x08006cc3
 8006bec:	08006c75 	.word	0x08006c75
 8006bf0:	08006c9d 	.word	0x08006c9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d107      	bne.n	8006c0e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bfe:	f107 030e 	add.w	r3, r7, #14
 8006c02:	2202      	movs	r2, #2
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f8db 	bl	8007dc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c0c:	e060      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f86c 	bl	8007cee <USBD_CtlError>
            ret = USBD_FAIL;
 8006c16:	2302      	movs	r3, #2
 8006c18:	75fb      	strb	r3, [r7, #23]
          break;
 8006c1a:	e059      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b22      	cmp	r3, #34	; 0x22
 8006c26:	d108      	bne.n	8006c3a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	88db      	ldrh	r3, [r3, #6]
 8006c2c:	2b4a      	cmp	r3, #74	; 0x4a
 8006c2e:	bf28      	it	cs
 8006c30:	234a      	movcs	r3, #74	; 0x4a
 8006c32:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006c34:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <USBD_HID_Setup+0x1f4>)
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e015      	b.n	8006c66 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b21      	cmp	r3, #33	; 0x21
 8006c44:	d108      	bne.n	8006c58 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <USBD_HID_Setup+0x1f8>)
 8006c48:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	bf28      	it	cs
 8006c52:	2309      	movcs	r3, #9
 8006c54:	83fb      	strh	r3, [r7, #30]
 8006c56:	e006      	b.n	8006c66 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f847 	bl	8007cee <USBD_CtlError>
            ret = USBD_FAIL;
 8006c60:	2302      	movs	r3, #2
 8006c62:	75fb      	strb	r3, [r7, #23]
            break;
 8006c64:	e034      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006c66:	8bfb      	ldrh	r3, [r7, #30]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	69b9      	ldr	r1, [r7, #24]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 f8a8 	bl	8007dc2 <USBD_CtlSendData>
          break;
 8006c72:	e02d      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d107      	bne.n	8006c8e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3308      	adds	r3, #8
 8006c82:	2201      	movs	r2, #1
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 f89b 	bl	8007dc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c8c:	e020      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f82c 	bl	8007cee <USBD_CtlError>
            ret = USBD_FAIL;
 8006c96:	2302      	movs	r3, #2
 8006c98:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9a:	e019      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d106      	bne.n	8006cb4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cb2:	e00d      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f819 	bl	8007cee <USBD_CtlError>
            ret = USBD_FAIL;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8006cc0:	e006      	b.n	8006cd0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f812 	bl	8007cee <USBD_CtlError>
          ret = USBD_FAIL;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cce:	bf00      	nop
      }
      break;
 8006cd0:	e006      	b.n	8006ce0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f80a 	bl	8007cee <USBD_CtlError>
      ret = USBD_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cde:	bf00      	nop
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200000fc 	.word	0x200000fc
 8006cf0:	200000e4 	.word	0x200000e4

08006cf4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2222      	movs	r2, #34	; 0x22
 8006d00:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000078 	.word	0x20000078

08006d14 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2222      	movs	r2, #34	; 0x22
 8006d20:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006d22:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000009c 	.word	0x2000009c

08006d34 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2222      	movs	r2, #34	; 0x22
 8006d40:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	200000c0 	.word	0x200000c0

08006d54 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	2200      	movs	r2, #0
 8006d68:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
	...

08006d78 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	220a      	movs	r2, #10
 8006d84:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006d86:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	200000f0 	.word	0x200000f0

08006d98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	e01a      	b.n	8006de6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f001 fa4c 	bl	800827c <USBD_LL_Init>

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d006      	beq.n	8006e10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	e001      	b.n	8006e14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e10:	2302      	movs	r3, #2
 8006e12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fa6f 	bl	800830c <USBD_LL_Start>

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fed7 	bl	8007c76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d016      	beq.n	8006f1a <USBD_LL_SetupStage+0x6a>
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d81c      	bhi.n	8006f2a <USBD_LL_SetupStage+0x7a>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <USBD_LL_SetupStage+0x4a>
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d008      	beq.n	8006f0a <USBD_LL_SetupStage+0x5a>
 8006ef8:	e017      	b.n	8006f2a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f9ca 	bl	800729c <USBD_StdDevReq>
      break;
 8006f08:	e01a      	b.n	8006f40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa2c 	bl	8007370 <USBD_StdItfReq>
      break;
 8006f18:	e012      	b.n	8006f40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa6c 	bl	8007400 <USBD_StdEPReq>
      break;
 8006f28:	e00a      	b.n	8006f40 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fa47 	bl	80083cc <USBD_LL_StallEP>
      break;
 8006f3e:	bf00      	nop
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	460b      	mov	r3, r1
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14b      	bne.n	8006ff6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d134      	bne.n	8006fda <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d919      	bls.n	8006fb0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d203      	bcs.n	8006f9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	e002      	b.n	8006fa4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 ff38 	bl	8007e1e <USBD_CtlContinueRx>
 8006fae:	e038      	b.n	8007022 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d105      	bne.n	8006fd2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 ff35 	bl	8007e42 <USBD_CtlSendStatus>
 8006fd8:	e023      	b.n	8007022 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d11e      	bne.n	8007022 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006fec:	2100      	movs	r1, #0
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f001 f9ec 	bl	80083cc <USBD_LL_StallEP>
 8006ff4:	e015      	b.n	8007022 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007008:	2b03      	cmp	r3, #3
 800700a:	d108      	bne.n	800701e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	7afa      	ldrb	r2, [r7, #11]
 8007016:	4611      	mov	r1, r2
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	4798      	blx	r3
 800701c:	e001      	b.n	8007022 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	e000      	b.n	8007024 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	460b      	mov	r3, r1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d17f      	bne.n	8007140 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3314      	adds	r3, #20
 8007044:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800704c:	2b02      	cmp	r3, #2
 800704e:	d15c      	bne.n	800710a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	429a      	cmp	r2, r3
 800705a:	d915      	bls.n	8007088 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	b29b      	uxth	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fec0 	bl	8007dfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 fa4f 	bl	8008524 <USBD_LL_PrepareReceive>
 8007086:	e04e      	b.n	8007126 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	6912      	ldr	r2, [r2, #16]
 8007090:	fbb3 f1f2 	udiv	r1, r3, r2
 8007094:	fb01 f202 	mul.w	r2, r1, r2
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11c      	bne.n	80070d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d316      	bcc.n	80070d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d20f      	bcs.n	80070d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fe9c 	bl	8007dfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ca:	2300      	movs	r3, #0
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f001 fa27 	bl	8008524 <USBD_LL_PrepareReceive>
 80070d6:	e026      	b.n	8007126 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d105      	bne.n	80070fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f001 f965 	bl	80083cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 feb0 	bl	8007e68 <USBD_CtlReceiveStatus>
 8007108:	e00d      	b.n	8007126 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007110:	2b04      	cmp	r3, #4
 8007112:	d004      	beq.n	800711e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f001 f953 	bl	80083cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d11d      	bne.n	800716c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fe81 	bl	8006e38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800713e:	e015      	b.n	800716c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00d      	beq.n	8007168 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007152:	2b03      	cmp	r3, #3
 8007154:	d108      	bne.n	8007168 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	7afa      	ldrb	r2, [r7, #11]
 8007160:	4611      	mov	r1, r2
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	4798      	blx	r3
 8007166:	e001      	b.n	800716c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	e000      	b.n	800716e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	2200      	movs	r2, #0
 8007182:	2100      	movs	r1, #0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f8dc 	bl	8008342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2240      	movs	r2, #64	; 0x40
 8007196:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	2200      	movs	r2, #0
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f8ce 	bl	8008342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2240      	movs	r2, #64	; 0x40
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6852      	ldr	r2, [r2, #4]
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	4611      	mov	r1, r2
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
  }

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2204      	movs	r2, #4
 800722e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	2b04      	cmp	r3, #4
 800724e:	d105      	bne.n	800725c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	2b03      	cmp	r3, #3
 8007278:	d10b      	bne.n	8007292 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d005      	beq.n	80072c2 <USBD_StdDevReq+0x26>
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d84f      	bhi.n	800735a <USBD_StdDevReq+0xbe>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <USBD_StdDevReq+0x36>
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d14b      	bne.n	800735a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
      break;
 80072d0:	e048      	b.n	8007364 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d839      	bhi.n	800734e <USBD_StdDevReq+0xb2>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USBD_StdDevReq+0x44>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007331 	.word	0x08007331
 80072e4:	08007345 	.word	0x08007345
 80072e8:	0800734f 	.word	0x0800734f
 80072ec:	0800733b 	.word	0x0800733b
 80072f0:	0800734f 	.word	0x0800734f
 80072f4:	08007313 	.word	0x08007313
 80072f8:	08007309 	.word	0x08007309
 80072fc:	0800734f 	.word	0x0800734f
 8007300:	08007327 	.word	0x08007327
 8007304:	0800731d 	.word	0x0800731d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9dc 	bl	80076c8 <USBD_GetDescriptor>
          break;
 8007310:	e022      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fb3f 	bl	8007998 <USBD_SetAddress>
          break;
 800731a:	e01d      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fb7e 	bl	8007a20 <USBD_SetConfig>
          break;
 8007324:	e018      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fc07 	bl	8007b3c <USBD_GetConfig>
          break;
 800732e:	e013      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc37 	bl	8007ba6 <USBD_GetStatus>
          break;
 8007338:	e00e      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc65 	bl	8007c0c <USBD_SetFeature>
          break;
 8007342:	e009      	b.n	8007358 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fc74 	bl	8007c34 <USBD_ClrFeature>
          break;
 800734c:	e004      	b.n	8007358 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fccc 	bl	8007cee <USBD_CtlError>
          break;
 8007356:	bf00      	nop
      }
      break;
 8007358:	e004      	b.n	8007364 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fcc6 	bl	8007cee <USBD_CtlError>
      break;
 8007362:	bf00      	nop
  }

  return ret;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop

08007370 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d005      	beq.n	8007396 <USBD_StdItfReq+0x26>
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d82e      	bhi.n	80073ec <USBD_StdItfReq+0x7c>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <USBD_StdItfReq+0x26>
 8007392:	2b20      	cmp	r3, #32
 8007394:	d12a      	bne.n	80073ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739c:	3b01      	subs	r3, #1
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d81d      	bhi.n	80073de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d813      	bhi.n	80073d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	88db      	ldrh	r3, [r3, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d110      	bne.n	80073e8 <USBD_StdItfReq+0x78>
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fd38 	bl	8007e42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073d2:	e009      	b.n	80073e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc89 	bl	8007cee <USBD_CtlError>
          break;
 80073dc:	e004      	b.n	80073e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc84 	bl	8007cee <USBD_CtlError>
          break;
 80073e6:	e000      	b.n	80073ea <USBD_StdItfReq+0x7a>
          break;
 80073e8:	bf00      	nop
      }
      break;
 80073ea:	e004      	b.n	80073f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc7d 	bl	8007cee <USBD_CtlError>
      break;
 80073f4:	bf00      	nop
  }

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	889b      	ldrh	r3, [r3, #4]
 8007412:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d007      	beq.n	8007430 <USBD_StdEPReq+0x30>
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	f200 8146 	bhi.w	80076b2 <USBD_StdEPReq+0x2b2>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <USBD_StdEPReq+0x40>
 800742a:	2b20      	cmp	r3, #32
 800742c:	f040 8141 	bne.w	80076b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
      break;
 800743e:	e13d      	b.n	80076bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007448:	2b20      	cmp	r3, #32
 800744a:	d10a      	bne.n	8007462 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	e12d      	b.n	80076be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b03      	cmp	r3, #3
 8007468:	d007      	beq.n	800747a <USBD_StdEPReq+0x7a>
 800746a:	2b03      	cmp	r3, #3
 800746c:	f300 811b 	bgt.w	80076a6 <USBD_StdEPReq+0x2a6>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d072      	beq.n	800755a <USBD_StdEPReq+0x15a>
 8007474:	2b01      	cmp	r3, #1
 8007476:	d03a      	beq.n	80074ee <USBD_StdEPReq+0xee>
 8007478:	e115      	b.n	80076a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	2b02      	cmp	r3, #2
 8007482:	d002      	beq.n	800748a <USBD_StdEPReq+0x8a>
 8007484:	2b03      	cmp	r3, #3
 8007486:	d015      	beq.n	80074b4 <USBD_StdEPReq+0xb4>
 8007488:	e02b      	b.n	80074e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00c      	beq.n	80074aa <USBD_StdEPReq+0xaa>
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d009      	beq.n	80074aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 ff96 	bl	80083cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 ff92 	bl	80083cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074a8:	e020      	b.n	80074ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fc1e 	bl	8007cee <USBD_CtlError>
              break;
 80074b2:	e01b      	b.n	80074ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	885b      	ldrh	r3, [r3, #2]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10e      	bne.n	80074da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <USBD_StdEPReq+0xda>
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b80      	cmp	r3, #128	; 0x80
 80074c6:	d008      	beq.n	80074da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	88db      	ldrh	r3, [r3, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 ff79 	bl	80083cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fcb1 	bl	8007e42 <USBD_CtlSendStatus>

              break;
 80074e0:	e004      	b.n	80074ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc02 	bl	8007cee <USBD_CtlError>
              break;
 80074ea:	bf00      	nop
          }
          break;
 80074ec:	e0e0      	b.n	80076b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <USBD_StdEPReq+0xfe>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d015      	beq.n	8007528 <USBD_StdEPReq+0x128>
 80074fc:	e026      	b.n	800754c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00c      	beq.n	800751e <USBD_StdEPReq+0x11e>
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d009      	beq.n	800751e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 ff5c 	bl	80083cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007514:	2180      	movs	r1, #128	; 0x80
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 ff58 	bl	80083cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800751c:	e01c      	b.n	8007558 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fbe4 	bl	8007cee <USBD_CtlError>
              break;
 8007526:	e017      	b.n	8007558 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	885b      	ldrh	r3, [r3, #2]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d112      	bne.n	8007556 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 ff63 	bl	800840a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc7c 	bl	8007e42 <USBD_CtlSendStatus>
              }
              break;
 800754a:	e004      	b.n	8007556 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fbcd 	bl	8007cee <USBD_CtlError>
              break;
 8007554:	e000      	b.n	8007558 <USBD_StdEPReq+0x158>
              break;
 8007556:	bf00      	nop
          }
          break;
 8007558:	e0aa      	b.n	80076b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	2b02      	cmp	r3, #2
 8007562:	d002      	beq.n	800756a <USBD_StdEPReq+0x16a>
 8007564:	2b03      	cmp	r3, #3
 8007566:	d032      	beq.n	80075ce <USBD_StdEPReq+0x1ce>
 8007568:	e097      	b.n	800769a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <USBD_StdEPReq+0x180>
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d004      	beq.n	8007580 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fbb8 	bl	8007cee <USBD_CtlError>
                break;
 800757e:	e091      	b.n	80076a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da0b      	bge.n	80075a0 <USBD_StdEPReq+0x1a0>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	3310      	adds	r3, #16
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	e00b      	b.n	80075b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	4413      	add	r3, r2
 80075b6:	3304      	adds	r3, #4
 80075b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2202      	movs	r2, #2
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fbfb 	bl	8007dc2 <USBD_CtlSendData>
              break;
 80075cc:	e06a      	b.n	80076a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	da11      	bge.n	80075fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	f003 020f 	and.w	r2, r3, #15
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	3318      	adds	r3, #24
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d117      	bne.n	8007620 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb7b 	bl	8007cee <USBD_CtlError>
                  break;
 80075f8:	e054      	b.n	80076a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb68 	bl	8007cee <USBD_CtlError>
                  break;
 800761e:	e041      	b.n	80076a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	da0b      	bge.n	8007640 <USBD_StdEPReq+0x240>
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	3310      	adds	r3, #16
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	4413      	add	r3, r2
 800763c:	3304      	adds	r3, #4
 800763e:	e00b      	b.n	8007658 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	3304      	adds	r3, #4
 8007658:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <USBD_StdEPReq+0x266>
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d103      	bne.n	800766e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e00e      	b.n	800768c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fee8 	bl	8008448 <USBD_LL_IsStallEP>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e002      	b.n	800768c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2202      	movs	r2, #2
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb95 	bl	8007dc2 <USBD_CtlSendData>
              break;
 8007698:	e004      	b.n	80076a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fb26 	bl	8007cee <USBD_CtlError>
              break;
 80076a2:	bf00      	nop
          }
          break;
 80076a4:	e004      	b.n	80076b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb20 	bl	8007cee <USBD_CtlError>
          break;
 80076ae:	bf00      	nop
      }
      break;
 80076b0:	e004      	b.n	80076bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fb1a 	bl	8007cee <USBD_CtlError>
      break;
 80076ba:	bf00      	nop
  }

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	f200 8128 	bhi.w	800793e <USBD_GetDescriptor+0x276>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <USBD_GetDescriptor+0x2c>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007711 	.word	0x08007711
 80076f8:	08007729 	.word	0x08007729
 80076fc:	08007769 	.word	0x08007769
 8007700:	0800793f 	.word	0x0800793f
 8007704:	0800793f 	.word	0x0800793f
 8007708:	080078df 	.word	0x080078df
 800770c:	0800790b 	.word	0x0800790b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	f107 0108 	add.w	r1, r7, #8
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
      break;
 8007726:	e112      	b.n	800794e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	7c1b      	ldrb	r3, [r3, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f107 0208 	add.w	r2, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	2202      	movs	r2, #2
 8007748:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800774a:	e100      	b.n	800794e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	f107 0208 	add.w	r2, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	2202      	movs	r2, #2
 8007764:	701a      	strb	r2, [r3, #0]
      break;
 8007766:	e0f2      	b.n	800794e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b05      	cmp	r3, #5
 8007770:	f200 80ac 	bhi.w	80078cc <USBD_GetDescriptor+0x204>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <USBD_GetDescriptor+0xb4>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	08007795 	.word	0x08007795
 8007780:	080077c9 	.word	0x080077c9
 8007784:	080077fd 	.word	0x080077fd
 8007788:	08007831 	.word	0x08007831
 800778c:	08007865 	.word	0x08007865
 8007790:	08007899 	.word	0x08007899
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 0108 	add.w	r1, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b6:	e091      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa97 	bl	8007cee <USBD_CtlError>
            err++;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	3301      	adds	r3, #1
 80077c4:	72fb      	strb	r3, [r7, #11]
          break;
 80077c6:	e089      	b.n	80078dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ea:	e077      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa7d 	bl	8007cee <USBD_CtlError>
            err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
          break;
 80077fa:	e06f      	b.n	80078dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7c12      	ldrb	r2, [r2, #16]
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781e:	e05d      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa63 	bl	8007cee <USBD_CtlError>
            err++;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
          break;
 800782e:	e055      	b.n	80078dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	7c12      	ldrb	r2, [r2, #16]
 8007848:	f107 0108 	add.w	r1, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007852:	e043      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa49 	bl	8007cee <USBD_CtlError>
            err++;
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	3301      	adds	r3, #1
 8007860:	72fb      	strb	r3, [r7, #11]
          break;
 8007862:	e03b      	b.n	80078dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	7c12      	ldrb	r2, [r2, #16]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007886:	e029      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa2f 	bl	8007cee <USBD_CtlError>
            err++;
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	3301      	adds	r3, #1
 8007894:	72fb      	strb	r3, [r7, #11]
          break;
 8007896:	e021      	b.n	80078dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7c12      	ldrb	r2, [r2, #16]
 80078b0:	f107 0108 	add.w	r1, r7, #8
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ba:	e00f      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa15 	bl	8007cee <USBD_CtlError>
            err++;
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	3301      	adds	r3, #1
 80078c8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ca:	e007      	b.n	80078dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa0d 	bl	8007cee <USBD_CtlError>
          err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80078da:	e038      	b.n	800794e <USBD_GetDescriptor+0x286>
 80078dc:	e037      	b.n	800794e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7c1b      	ldrb	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	f107 0208 	add.w	r2, r7, #8
 80078f2:	4610      	mov	r0, r2
 80078f4:	4798      	blx	r3
 80078f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078f8:	e029      	b.n	800794e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9f6 	bl	8007cee <USBD_CtlError>
        err++;
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	3301      	adds	r3, #1
 8007906:	72fb      	strb	r3, [r7, #11]
      break;
 8007908:	e021      	b.n	800794e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10d      	bne.n	800792e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f107 0208 	add.w	r2, r7, #8
 800791e:	4610      	mov	r0, r2
 8007920:	4798      	blx	r3
 8007922:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	2207      	movs	r2, #7
 800792a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800792c:	e00f      	b.n	800794e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f9dc 	bl	8007cee <USBD_CtlError>
        err++;
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	3301      	adds	r3, #1
 800793a:	72fb      	strb	r3, [r7, #11]
      break;
 800793c:	e007      	b.n	800794e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f9d4 	bl	8007cee <USBD_CtlError>
      err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	bf00      	nop
  }

  if (err != 0U)
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11c      	bne.n	800798e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007954:	893b      	ldrh	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d011      	beq.n	800797e <USBD_GetDescriptor+0x2b6>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	88db      	ldrh	r3, [r3, #6]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	88da      	ldrh	r2, [r3, #6]
 8007966:	893b      	ldrh	r3, [r7, #8]
 8007968:	4293      	cmp	r3, r2
 800796a:	bf28      	it	cs
 800796c:	4613      	movcs	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007972:	893b      	ldrh	r3, [r7, #8]
 8007974:	461a      	mov	r2, r3
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fa22 	bl	8007dc2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa5b 	bl	8007e42 <USBD_CtlSendStatus>
 800798c:	e000      	b.n	8007990 <USBD_GetDescriptor+0x2c8>
    return;
 800798e:	bf00      	nop
    }
  }
}
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop

08007998 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	889b      	ldrh	r3, [r3, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d130      	bne.n	8007a0c <USBD_SetAddress+0x74>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	88db      	ldrh	r3, [r3, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12c      	bne.n	8007a0c <USBD_SetAddress+0x74>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	2b7f      	cmp	r3, #127	; 0x7f
 80079b8:	d828      	bhi.n	8007a0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	885b      	ldrh	r3, [r3, #2]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d104      	bne.n	80079da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f98b 	bl	8007cee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	e01d      	b.n	8007a16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7bfa      	ldrb	r2, [r7, #15]
 80079de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd5a 	bl	80084a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa28 	bl	8007e42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	e009      	b.n	8007a16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0a:	e004      	b.n	8007a16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f96d 	bl	8007cee <USBD_CtlError>
  }
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	4b41      	ldr	r3, [pc, #260]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a34:	4b40      	ldr	r3, [pc, #256]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d904      	bls.n	8007a46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f955 	bl	8007cee <USBD_CtlError>
 8007a44:	e075      	b.n	8007b32 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d002      	beq.n	8007a56 <USBD_SetConfig+0x36>
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d023      	beq.n	8007a9c <USBD_SetConfig+0x7c>
 8007a54:	e062      	b.n	8007b1c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a56:	4b38      	ldr	r3, [pc, #224]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01a      	beq.n	8007a94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a5e:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a70:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff f9e8 	bl	8006e4c <USBD_SetClassConfig>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d104      	bne.n	8007a8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f932 	bl	8007cee <USBD_CtlError>
            return;
 8007a8a:	e052      	b.n	8007b32 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9d8 	bl	8007e42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a92:	e04e      	b.n	8007b32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f9d4 	bl	8007e42 <USBD_CtlSendStatus>
        break;
 8007a9a:	e04a      	b.n	8007b32 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a9c:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <USBD_SetConfig+0x118>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d112      	bne.n	8007aca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007aac:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <USBD_SetConfig+0x118>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <USBD_SetConfig+0x118>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff f9e4 	bl	8006e8a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9bd 	bl	8007e42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ac8:	e033      	b.n	8007b32 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <USBD_SetConfig+0x118>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d01d      	beq.n	8007b14 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff f9d2 	bl	8006e8a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <USBD_SetConfig+0x118>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007af0:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <USBD_SetConfig+0x118>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff f9a8 	bl	8006e4c <USBD_SetClassConfig>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d104      	bne.n	8007b0c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8f2 	bl	8007cee <USBD_CtlError>
            return;
 8007b0a:	e012      	b.n	8007b32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f998 	bl	8007e42 <USBD_CtlSendStatus>
        break;
 8007b12:	e00e      	b.n	8007b32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f994 	bl	8007e42 <USBD_CtlSendStatus>
        break;
 8007b1a:	e00a      	b.n	8007b32 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8e5 	bl	8007cee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b24:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <USBD_SetConfig+0x118>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff f9ad 	bl	8006e8a <USBD_ClrClassConfig>
        break;
 8007b30:	bf00      	nop
    }
  }
}
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000638 	.word	0x20000638

08007b3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d004      	beq.n	8007b58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f8cc 	bl	8007cee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b56:	e022      	b.n	8007b9e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	dc02      	bgt.n	8007b68 <USBD_GetConfig+0x2c>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc03      	bgt.n	8007b6e <USBD_GetConfig+0x32>
 8007b66:	e015      	b.n	8007b94 <USBD_GetConfig+0x58>
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d00b      	beq.n	8007b84 <USBD_GetConfig+0x48>
 8007b6c:	e012      	b.n	8007b94 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3308      	adds	r3, #8
 8007b78:	2201      	movs	r2, #1
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f920 	bl	8007dc2 <USBD_CtlSendData>
        break;
 8007b82:	e00c      	b.n	8007b9e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f918 	bl	8007dc2 <USBD_CtlSendData>
        break;
 8007b92:	e004      	b.n	8007b9e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8a9 	bl	8007cee <USBD_CtlError>
        break;
 8007b9c:	bf00      	nop
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d81e      	bhi.n	8007bfa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	88db      	ldrh	r3, [r3, #6]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d004      	beq.n	8007bce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f891 	bl	8007cee <USBD_CtlError>
        break;
 8007bcc:	e01a      	b.n	8007c04 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f043 0202 	orr.w	r2, r3, #2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	330c      	adds	r3, #12
 8007bee:	2202      	movs	r2, #2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f8e5 	bl	8007dc2 <USBD_CtlSendData>
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f876 	bl	8007cee <USBD_CtlError>
      break;
 8007c02:	bf00      	nop
  }
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d106      	bne.n	8007c2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f90b 	bl	8007e42 <USBD_CtlSendStatus>
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c44:	3b01      	subs	r3, #1
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d80b      	bhi.n	8007c62 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10c      	bne.n	8007c6c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8f1 	bl	8007e42 <USBD_CtlSendStatus>
      }
      break;
 8007c60:	e004      	b.n	8007c6c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f842 	bl	8007cee <USBD_CtlError>
      break;
 8007c6a:	e000      	b.n	8007c6e <USBD_ClrFeature+0x3a>
      break;
 8007c6c:	bf00      	nop
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785a      	ldrb	r2, [r3, #1]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	3302      	adds	r3, #2
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	3303      	adds	r3, #3
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	3305      	adds	r3, #5
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3306      	adds	r3, #6
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	3307      	adds	r3, #7
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	4413      	add	r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	80da      	strh	r2, [r3, #6]

}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007cf8:	2180      	movs	r1, #128	; 0x80
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fb66 	bl	80083cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb62 	bl	80083cc <USBD_LL_StallEP>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d032      	beq.n	8007d8c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f834 	bl	8007d94 <USBD_GetLen>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	3301      	adds	r3, #1
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	75fa      	strb	r2, [r7, #23]
 8007d40:	461a      	mov	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4413      	add	r3, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	7812      	ldrb	r2, [r2, #0]
 8007d4a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	75fa      	strb	r2, [r7, #23]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4413      	add	r3, r2
 8007d58:	2203      	movs	r2, #3
 8007d5a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d5c:	e012      	b.n	8007d84 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	60fa      	str	r2, [r7, #12]
 8007d64:	7dfa      	ldrb	r2, [r7, #23]
 8007d66:	1c51      	adds	r1, r2, #1
 8007d68:	75f9      	strb	r1, [r7, #23]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	440a      	add	r2, r1
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	75fa      	strb	r2, [r7, #23]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4413      	add	r3, r2
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e8      	bne.n	8007d5e <USBD_GetString+0x4e>
    }
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007da0:	e005      	b.n	8007dae <USBD_GetLen+0x1a>
  {
    len++;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	3301      	adds	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3301      	adds	r3, #1
 8007dac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f5      	bne.n	8007da2 <USBD_GetLen+0xe>
  }

  return len;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fb77 	bl	80084de <USBD_LL_Transmit>

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fb65 	bl	80084de <USBD_LL_Transmit>

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fb76 	bl	8008524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e52:	2300      	movs	r3, #0
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fb40 	bl	80084de <USBD_LL_Transmit>

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2205      	movs	r2, #5
 8007e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb50 	bl	8008524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e94:	2200      	movs	r2, #0
 8007e96:	490e      	ldr	r1, [pc, #56]	; (8007ed0 <MX_USB_DEVICE_Init+0x40>)
 8007e98:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <MX_USB_DEVICE_Init+0x44>)
 8007e9a:	f7fe ff7d 	bl	8006d98 <USBD_Init>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ea4:	f7f8 fa7e 	bl	80003a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007ea8:	490b      	ldr	r1, [pc, #44]	; (8007ed8 <MX_USB_DEVICE_Init+0x48>)
 8007eaa:	480a      	ldr	r0, [pc, #40]	; (8007ed4 <MX_USB_DEVICE_Init+0x44>)
 8007eac:	f7fe ff9f 	bl	8006dee <USBD_RegisterClass>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eb6:	f7f8 fa75 	bl	80003a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007eba:	4806      	ldr	r0, [pc, #24]	; (8007ed4 <MX_USB_DEVICE_Init+0x44>)
 8007ebc:	f7fe ffb0 	bl	8006e20 <USBD_Start>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007ec6:	f7f8 fa6d 	bl	80003a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000148 	.word	0x20000148
 8007ed4:	2000063c 	.word	0x2000063c
 8007ed8:	20000040 	.word	0x20000040

08007edc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2212      	movs	r2, #18
 8007eec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000164 	.word	0x20000164

08007f00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2204      	movs	r2, #4
 8007f10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f12:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20000178 	.word	0x20000178

08007f24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4907      	ldr	r1, [pc, #28]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f3a:	4808      	ldr	r0, [pc, #32]	; (8007f5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f3c:	f7ff fee8 	bl	8007d10 <USBD_GetString>
 8007f40:	e004      	b.n	8007f4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4904      	ldr	r1, [pc, #16]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f48:	f7ff fee2 	bl	8007d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000900 	.word	0x20000900
 8007f5c:	0800869c 	.word	0x0800869c

08007f60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	4904      	ldr	r1, [pc, #16]	; (8007f80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f70:	4804      	ldr	r0, [pc, #16]	; (8007f84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f72:	f7ff fecd 	bl	8007d10 <USBD_GetString>
  return USBD_StrDesc;
 8007f76:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20000900 	.word	0x20000900
 8007f84:	080086a8 	.word	0x080086a8

08007f88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	221a      	movs	r2, #26
 8007f98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f9a:	f000 f843 	bl	8008024 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f9e:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	2000017c 	.word	0x2000017c

08007fac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4907      	ldr	r1, [pc, #28]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fc2:	4808      	ldr	r0, [pc, #32]	; (8007fe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fc4:	f7ff fea4 	bl	8007d10 <USBD_GetString>
 8007fc8:	e004      	b.n	8007fd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4904      	ldr	r1, [pc, #16]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fd0:	f7ff fe9e 	bl	8007d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000900 	.word	0x20000900
 8007fe4:	080086bc 	.word	0x080086bc

08007fe8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ffe:	4808      	ldr	r0, [pc, #32]	; (8008020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008000:	f7ff fe86 	bl	8007d10 <USBD_GetString>
 8008004:	e004      	b.n	8008010 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800800a:	4805      	ldr	r0, [pc, #20]	; (8008020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800800c:	f7ff fe80 	bl	8007d10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000900 	.word	0x20000900
 8008020:	080086c8 	.word	0x080086c8

08008024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <Get_SerialNum+0x44>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <Get_SerialNum+0x48>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <Get_SerialNum+0x4c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4413      	add	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800804a:	2208      	movs	r2, #8
 800804c:	4909      	ldr	r1, [pc, #36]	; (8008074 <Get_SerialNum+0x50>)
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f814 	bl	800807c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008054:	2204      	movs	r2, #4
 8008056:	4908      	ldr	r1, [pc, #32]	; (8008078 <Get_SerialNum+0x54>)
 8008058:	68b8      	ldr	r0, [r7, #8]
 800805a:	f000 f80f 	bl	800807c <IntToUnicode>
  }
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	1ffff7e8 	.word	0x1ffff7e8
 800806c:	1ffff7ec 	.word	0x1ffff7ec
 8008070:	1ffff7f0 	.word	0x1ffff7f0
 8008074:	2000017e 	.word	0x2000017e
 8008078:	2000018e 	.word	0x2000018e

0800807c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]
 8008092:	e027      	b.n	80080e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	0f1b      	lsrs	r3, r3, #28
 8008098:	2b09      	cmp	r3, #9
 800809a:	d80b      	bhi.n	80080b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	0f1b      	lsrs	r3, r3, #28
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4619      	mov	r1, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	440b      	add	r3, r1
 80080ac:	3230      	adds	r2, #48	; 0x30
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e00a      	b.n	80080ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	0f1b      	lsrs	r3, r3, #28
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4619      	mov	r1, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	440b      	add	r3, r1
 80080c4:	3237      	adds	r2, #55	; 0x37
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	3301      	adds	r3, #1
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	4413      	add	r3, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	3301      	adds	r3, #1
 80080e2:	75fb      	strb	r3, [r7, #23]
 80080e4:	7dfa      	ldrb	r2, [r7, #23]
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d3d3      	bcc.n	8008094 <IntToUnicode+0x18>
  }
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <HAL_PCD_MspInit+0x44>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d113      	bne.n	8008132 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <HAL_PCD_MspInit+0x48>)
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <HAL_PCD_MspInit+0x48>)
 8008110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008114:	61d3      	str	r3, [r2, #28]
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <HAL_PCD_MspInit+0x48>)
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008122:	2200      	movs	r2, #0
 8008124:	2100      	movs	r1, #0
 8008126:	2014      	movs	r0, #20
 8008128:	f7f8 ff03 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800812c:	2014      	movs	r0, #20
 800812e:	f7f8 ff1c 	bl	8000f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	40005c00 	.word	0x40005c00
 8008140:	40021000 	.word	0x40021000

08008144 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe fea8 	bl	8006eb0 <USBD_LL_SetupStage>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	440b      	add	r3, r1
 8008188:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	4619      	mov	r1, r3
 8008192:	f7fe feda 	bl	8006f4a <USBD_LL_DataOutStage>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	440b      	add	r3, r1
 80081be:	333c      	adds	r3, #60	; 0x3c
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7fe ff31 	bl	800702c <USBD_LL_DataInStage>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff f841 	bl	8007268 <USBD_LL_SOF>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d001      	beq.n	8008206 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008202:	f7f8 f8cf 	bl	80003a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800820c:	7bfa      	ldrb	r2, [r7, #15]
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fff1 	bl	80071f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe ffaa 	bl	8007176 <USBD_LL_Reset>
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe ffeb 	bl	8007216 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <HAL_PCD_SuspendCallback+0x30>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	4a03      	ldr	r2, [pc, #12]	; (800825c <HAL_PCD_SuspendCallback+0x30>)
 800824e:	f043 0306 	orr.w	r3, r3, #6
 8008252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe ffe5 	bl	800723e <USBD_LL_Resume>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008284:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <USBD_LL_Init+0x88>)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <USBD_LL_Init+0x88>)
 8008290:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <USBD_LL_Init+0x88>)
 8008296:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <USBD_LL_Init+0x8c>)
 8008298:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <USBD_LL_Init+0x88>)
 800829c:	2208      	movs	r2, #8
 800829e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80082a0:	4b18      	ldr	r3, [pc, #96]	; (8008304 <USBD_LL_Init+0x88>)
 80082a2:	2202      	movs	r2, #2
 80082a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80082a6:	4b17      	ldr	r3, [pc, #92]	; (8008304 <USBD_LL_Init+0x88>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80082ac:	4b15      	ldr	r3, [pc, #84]	; (8008304 <USBD_LL_Init+0x88>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80082b2:	4b14      	ldr	r3, [pc, #80]	; (8008304 <USBD_LL_Init+0x88>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80082b8:	4812      	ldr	r0, [pc, #72]	; (8008304 <USBD_LL_Init+0x88>)
 80082ba:	f7f9 fca1 	bl	8001c00 <HAL_PCD_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80082c4:	f7f8 f86e 	bl	80003a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082ce:	2318      	movs	r3, #24
 80082d0:	2200      	movs	r2, #0
 80082d2:	2100      	movs	r1, #0
 80082d4:	f7fb f8fe 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082de:	2358      	movs	r3, #88	; 0x58
 80082e0:	2200      	movs	r2, #0
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	f7fb f8f6 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f2:	2200      	movs	r2, #0
 80082f4:	2181      	movs	r1, #129	; 0x81
 80082f6:	f7fb f8ed 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000b00 	.word	0x20000b00
 8008308:	40005c00 	.word	0x40005c00

0800830c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008322:	4618      	mov	r0, r3
 8008324:	f7f9 fd77 	bl	8001e16 <HAL_PCD_Start>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f93c 	bl	80085ac <USBD_Get_USB_Status>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008338:	7bbb      	ldrb	r3, [r7, #14]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	461a      	mov	r2, r3
 8008350:	4603      	mov	r3, r0
 8008352:	70fb      	strb	r3, [r7, #3]
 8008354:	460b      	mov	r3, r1
 8008356:	70bb      	strb	r3, [r7, #2]
 8008358:	4613      	mov	r3, r2
 800835a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800836a:	78bb      	ldrb	r3, [r7, #2]
 800836c:	883a      	ldrh	r2, [r7, #0]
 800836e:	78f9      	ldrb	r1, [r7, #3]
 8008370:	f7f9 feef 	bl	8002152 <HAL_PCD_EP_Open>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f916 	bl	80085ac <USBD_Get_USB_Status>
 8008380:	4603      	mov	r3, r0
 8008382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008384:	7bbb      	ldrb	r3, [r7, #14]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7f9 ff36 	bl	800221e <HAL_PCD_EP_Close>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 f8f7 	bl	80085ac <USBD_Get_USB_Status>
 80083be:	4603      	mov	r3, r0
 80083c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f9 ffdf 	bl	80023ae <HAL_PCD_EP_SetStall>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 f8d8 	bl	80085ac <USBD_Get_USB_Status>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008400:	7bbb      	ldrb	r3, [r7, #14]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f7fa f820 	bl	800246e <HAL_PCD_EP_ClrStall>
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f8b9 	bl	80085ac <USBD_Get_USB_Status>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800843e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800845a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800845c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008460:	2b00      	cmp	r3, #0
 8008462:	da0c      	bge.n	800847e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846a:	68f9      	ldr	r1, [r7, #12]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	440b      	add	r3, r1
 8008478:	3302      	adds	r3, #2
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	e00b      	b.n	8008496 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008484:	68f9      	ldr	r1, [r7, #12]
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	440b      	add	r3, r1
 8008490:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008494:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f9 fe22 	bl	8002108 <HAL_PCD_SetAddress>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f86e 	bl	80085ac <USBD_Get_USB_Status>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	461a      	mov	r2, r3
 80084ea:	460b      	mov	r3, r1
 80084ec:	72fb      	strb	r3, [r7, #11]
 80084ee:	4613      	mov	r3, r2
 80084f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008500:	893b      	ldrh	r3, [r7, #8]
 8008502:	7af9      	ldrb	r1, [r7, #11]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	f7f9 ff0f 	bl	8002328 <HAL_PCD_EP_Transmit>
 800850a:	4603      	mov	r3, r0
 800850c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f84b 	bl	80085ac <USBD_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800851a:	7dbb      	ldrb	r3, [r7, #22]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	461a      	mov	r2, r3
 8008530:	460b      	mov	r3, r1
 8008532:	72fb      	strb	r3, [r7, #11]
 8008534:	4613      	mov	r3, r2
 8008536:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008546:	893b      	ldrh	r3, [r7, #8]
 8008548:	7af9      	ldrb	r1, [r7, #11]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	f7f9 feaf 	bl	80022ae <HAL_PCD_EP_Receive>
 8008550:	4603      	mov	r3, r0
 8008552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f828 	bl	80085ac <USBD_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008560:	7dbb      	ldrb	r3, [r7, #22]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <USBD_static_malloc+0x14>)
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr
 8008580:	20000dec 	.word	0x20000dec

08008584 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d817      	bhi.n	80085f0 <USBD_Get_USB_Status+0x44>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBD_Get_USB_Status+0x1c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085df 	.word	0x080085df
 80085d0:	080085e5 	.word	0x080085e5
 80085d4:	080085eb 	.word	0x080085eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
    break;
 80085dc:	e00b      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085de:	2302      	movs	r3, #2
 80085e0:	73fb      	strb	r3, [r7, #15]
    break;
 80085e2:	e008      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e005      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e002      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085f0:	2302      	movs	r3, #2
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	bf00      	nop
  }
  return usb_status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	2600      	movs	r6, #0
 8008608:	4d0c      	ldr	r5, [pc, #48]	; (800863c <__libc_init_array+0x38>)
 800860a:	4c0d      	ldr	r4, [pc, #52]	; (8008640 <__libc_init_array+0x3c>)
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	42a6      	cmp	r6, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	f000 f822 	bl	800865c <_init>
 8008618:	2600      	movs	r6, #0
 800861a:	4d0a      	ldr	r5, [pc, #40]	; (8008644 <__libc_init_array+0x40>)
 800861c:	4c0a      	ldr	r4, [pc, #40]	; (8008648 <__libc_init_array+0x44>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	42a6      	cmp	r6, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	f855 3b04 	ldr.w	r3, [r5], #4
 800862c:	4798      	blx	r3
 800862e:	3601      	adds	r6, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	f855 3b04 	ldr.w	r3, [r5], #4
 8008636:	4798      	blx	r3
 8008638:	3601      	adds	r6, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	0800944c 	.word	0x0800944c
 8008640:	0800944c 	.word	0x0800944c
 8008644:	0800944c 	.word	0x0800944c
 8008648:	08009450 	.word	0x08009450

0800864c <memset>:
 800864c:	4603      	mov	r3, r0
 800864e:	4402      	add	r2, r0
 8008650:	4293      	cmp	r3, r2
 8008652:	d100      	bne.n	8008656 <memset+0xa>
 8008654:	4770      	bx	lr
 8008656:	f803 1b01 	strb.w	r1, [r3], #1
 800865a:	e7f9      	b.n	8008650 <memset+0x4>

0800865c <_init>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	bf00      	nop
 8008660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008662:	bc08      	pop	{r3}
 8008664:	469e      	mov	lr, r3
 8008666:	4770      	bx	lr

08008668 <_fini>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr
