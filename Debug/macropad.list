
macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af1c  0800af1c  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800af1c  0800af1c  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af1c  0800af1c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800af24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  20000240  0800b164  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800b164  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013922  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003951  00000000  00000000  00033b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa91  00000000  00000000  000393a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155b1  00000000  00000000  00053e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008994c  00000000  00000000  000693ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff8  00000000  00000000  000f2d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000240 	.word	0x20000240
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a0b0 	.word	0x0800a0b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000244 	.word	0x20000244
 8000148:	0800a0b0 	.word	0x0800a0b0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f002 f8c8 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80b 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f892 	bl	8000294 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000170:	f009 fbb0 	bl	80098d4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000174:	f000 f860 	bl	8000238 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  systemInit();
 8000178:	f000 f930 	bl	80003dc <systemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  systemControl();
 800017c:	f000 f982 	bl	8000484 <systemControl>
 8000180:	e7fc      	b.n	800017c <main+0x1c>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b094      	sub	sp, #80	; 0x50
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018c:	2228      	movs	r2, #40	; 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f009 ff7d 	bl	800a090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	f107 0314 	add.w	r3, r7, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d8:	4618      	mov	r0, r3
 80001da:	f004 febd 	bl	8004f58 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e4:	f000 f9a8 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f005 f928 	bl	800545c <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000212:	f000 f991 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000216:	2310      	movs	r3, #16
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f005 fa9f 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800022c:	f000 f984 	bl	8000538 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	; 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_I2C1_Init+0x50>)
 800023e:	4a13      	ldr	r2, [pc, #76]	; (800028c <MX_I2C1_Init+0x54>)
 8000240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_I2C1_Init+0x50>)
 8000244:	4a12      	ldr	r2, [pc, #72]	; (8000290 <MX_I2C1_Init+0x58>)
 8000246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_I2C1_Init+0x50>)
 8000256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_I2C1_Init+0x50>)
 8000276:	f002 fd69 	bl	8002d4c <HAL_I2C_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 f95a 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000077c 	.word	0x2000077c
 800028c:	40005400 	.word	0x40005400
 8000290:	000186a0 	.word	0x000186a0

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a8:	4b48      	ldr	r3, [pc, #288]	; (80003cc <MX_GPIO_Init+0x138>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <MX_GPIO_Init+0x138>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b45      	ldr	r3, [pc, #276]	; (80003cc <MX_GPIO_Init+0x138>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b42      	ldr	r3, [pc, #264]	; (80003cc <MX_GPIO_Init+0x138>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a41      	ldr	r2, [pc, #260]	; (80003cc <MX_GPIO_Init+0x138>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <MX_GPIO_Init+0x138>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d8:	4b3c      	ldr	r3, [pc, #240]	; (80003cc <MX_GPIO_Init+0x138>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a3b      	ldr	r2, [pc, #236]	; (80003cc <MX_GPIO_Init+0x138>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b39      	ldr	r3, [pc, #228]	; (80003cc <MX_GPIO_Init+0x138>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0308 	and.w	r3, r3, #8
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	21c0      	movs	r1, #192	; 0xc0
 80002f4:	4836      	ldr	r0, [pc, #216]	; (80003d0 <MX_GPIO_Init+0x13c>)
 80002f6:	f002 fcf8 	bl	8002cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	4835      	ldr	r0, [pc, #212]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000300:	f002 fcf3 	bl	8002cea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000304:	23c0      	movs	r3, #192	; 0xc0
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	482d      	ldr	r0, [pc, #180]	; (80003d0 <MX_GPIO_Init+0x13c>)
 800031c:	f002 fb4a 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000320:	2303      	movs	r3, #3
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000328:	2302      	movs	r3, #2
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4827      	ldr	r0, [pc, #156]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000338:	f002 fb3c 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800033c:	f640 4304 	movw	r3, #3076	; 0xc04
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4820      	ldr	r0, [pc, #128]	; (80003d4 <MX_GPIO_Init+0x140>)
 8000352:	f002 fb2f 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x144>)
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	481a      	ldr	r0, [pc, #104]	; (80003d4 <MX_GPIO_Init+0x140>)
 800036c:	f002 fb22 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x144>)
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4812      	ldr	r0, [pc, #72]	; (80003d0 <MX_GPIO_Init+0x13c>)
 8000386:	f002 fb15 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800038a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x13c>)
 80003a0:	f002 fb08 	bl	80029b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2017      	movs	r0, #23
 80003aa:	f002 f902 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003ae:	2017      	movs	r0, #23
 80003b0:	f002 f91b 	bl	80025ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2028      	movs	r0, #40	; 0x28
 80003ba:	f002 f8fa 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f002 f913 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	10110000 	.word	0x10110000

080003dc <systemInit>:

/* USER CODE BEGIN 4 */
void systemInit()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	  EE_Init();
 80003e0:	f000 f9c6 	bl	8000770 <EE_Init>
	  EE_ReadEeprom();
 80003e4:	f000 f9a6 	bl	8000734 <EE_ReadEeprom>
	  ssd1306_Init(&hi2cScreen);
 80003e8:	4818      	ldr	r0, [pc, #96]	; (800044c <systemInit+0x70>)
 80003ea:	f001 fce3 	bl	8001db4 <ssd1306_Init>
	  ssd1306_Fill(Black);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f001 fe00 	bl	8001ff4 <ssd1306_Fill>
	  ssd1306_UpdateScreen(&hi2cScreen);
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <systemInit+0x70>)
 80003f6:	f001 fe1f 	bl	8002038 <ssd1306_UpdateScreen>
	  cursorPosition 	 = 1;
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <systemInit+0x74>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	701a      	strb	r2, [r3, #0]
	  topMenuPosition 	 = 1;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <systemInit+0x78>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
	  bottomMenuPosition = 3;
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <systemInit+0x7c>)
 8000408:	2203      	movs	r2, #3
 800040a:	701a      	strb	r2, [r3, #0]
	  Button		 	 = 0;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <systemInit+0x80>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	  rotary1Counter	 = 0;
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <systemInit+0x84>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
	  rotary2Counter	 = 0;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <systemInit+0x88>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	  lastDebounceTime = 0;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <systemInit+0x8c>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
	  menuFlag = 0;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <systemInit+0x90>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	  displayFlag = 1;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <systemInit+0x94>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
	  nodeTransition = idleE;
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <systemInit+0x98>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	  DisplayOption = DisplayAll;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <systemInit+0x9c>)
 8000438:	2200      	movs	r2, #0
 800043a:	801a      	strh	r2, [r3, #0]
	  InitMenu();
 800043c:	f000 fea2 	bl	8001184 <InitMenu>
	  currentM=&buttonM;
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <systemInit+0xa0>)
 8000442:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <systemInit+0xa4>)
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000077c 	.word	0x2000077c
 8000450:	2000085d 	.word	0x2000085d
 8000454:	200009b1 	.word	0x200009b1
 8000458:	200009b0 	.word	0x200009b0
 800045c:	20000800 	.word	0x20000800
 8000460:	200006a4 	.word	0x200006a4
 8000464:	20000808 	.word	0x20000808
 8000468:	20000888 	.word	0x20000888
 800046c:	20000804 	.word	0x20000804
 8000470:	200007d2 	.word	0x200007d2
 8000474:	200006a8 	.word	0x200006a8
 8000478:	20000806 	.word	0x20000806
 800047c:	200007fc 	.word	0x200007fc
 8000480:	20000860 	.word	0x20000860

08000484 <systemControl>:

void systemControl()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	buttonControl();
 8000488:	f001 faa4 	bl	80019d4 <buttonControl>
	encoderControl();
 800048c:	f001 fada 	bl	8001a44 <encoderControl>
	displayControl();
 8000490:	f001 fb74 	bl	8001b7c <displayControl>


}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
	 uint32_t currentTime = HAL_GetTick();
 80004a2:	f001 ff81 	bl	80023a8 <HAL_GetTick>
 80004a6:	60f8      	str	r0, [r7, #12]

	  if (currentTime < lastDebounceTime + DEBOUNCE_TIME_MS)
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <HAL_GPIO_EXTI_Callback+0x90>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3314      	adds	r3, #20
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d334      	bcc.n	800051e <HAL_GPIO_EXTI_Callback+0x86>
	  {
	    // Debounce period not yet expired, so return without updating the count
	    return;
	  }

	  if (GPIO_Pin == GPIO_PIN_8)
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004ba:	d115      	bne.n	80004e8 <HAL_GPIO_EXTI_Callback+0x50>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 80004bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c0:	481a      	ldr	r0, [pc, #104]	; (800052c <HAL_GPIO_EXTI_Callback+0x94>)
 80004c2:	f002 fbfb 	bl	8002cbc <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d105      	bne.n	80004d8 <HAL_GPIO_EXTI_Callback+0x40>
	    {
	    	rotary1Counter--;
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_GPIO_EXTI_Callback+0x98>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a17      	ldr	r2, [pc, #92]	; (8000530 <HAL_GPIO_EXTI_Callback+0x98>)
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	e004      	b.n	80004e2 <HAL_GPIO_EXTI_Callback+0x4a>
	    }
	    else
	    {
	    	rotary1Counter++;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_GPIO_EXTI_Callback+0x98>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_GPIO_EXTI_Callback+0x98>)
 80004e0:	6013      	str	r3, [r2, #0]
	    }

	   lastDebounceTime = currentTime;
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_GPIO_EXTI_Callback+0x90>)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6013      	str	r3, [r2, #0]
	  }

	  if (GPIO_Pin == GPIO_PIN_14)
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004ee:	d117      	bne.n	8000520 <HAL_GPIO_EXTI_Callback+0x88>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <HAL_GPIO_EXTI_Callback+0x94>)
 80004f6:	f002 fbe1 	bl	8002cbc <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d105      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x74>
	    {
	    	rotary2Counter--;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3b01      	subs	r3, #1
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	e004      	b.n	8000516 <HAL_GPIO_EXTI_Callback+0x7e>
	    }
	    else
	    {
	    	rotary2Counter++;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_GPIO_EXTI_Callback+0x9c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000514:	6013      	str	r3, [r2, #0]
	    }

	   lastDebounceTime = currentTime;
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_GPIO_EXTI_Callback+0x90>)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e000      	b.n	8000520 <HAL_GPIO_EXTI_Callback+0x88>
	    return;
 800051e:	bf00      	nop
	  }


}
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000888 	.word	0x20000888
 800052c:	40010c00 	.word	0x40010c00
 8000530:	200006a4 	.word	0x200006a4
 8000534:	20000808 	.word	0x20000808

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_MspInit+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x5c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_MspInit+0x60>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_MspInit+0x60>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <HAL_I2C_MspInit+0x90>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d132      	bne.n	800062e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_I2C_MspInit+0x94>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <HAL_I2C_MspInit+0x94>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_I2C_MspInit+0x94>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e6:	2312      	movs	r3, #18
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <HAL_I2C_MspInit+0x98>)
 80005f6:	f002 f9dd 	bl	80029b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_I2C_MspInit+0x9c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000602:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <HAL_I2C_MspInit+0x9c>)
 8000612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000614:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_I2C_MspInit+0x94>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_I2C_MspInit+0x94>)
 800061c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_I2C_MspInit+0x94>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40005400 	.word	0x40005400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010c00 	.word	0x40010c00
 8000644:	40010000 	.word	0x40010000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f001 fe79 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800069e:	f003 f8e0 	bl	8003862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000ed4 	.word	0x20000ed4

080006ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80006b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006b4:	f002 fb32 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006c4:	f002 fb2a 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80006c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006cc:	f002 fb26 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80006d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006d4:	f002 fb22 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070e:	f7ff ffe5 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f009 fc99 	bl	800a048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fd23 	bl	8000160 <main>
  bx lr
 800071a:	4770      	bx	lr
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8000724:	0800af24 	.word	0x0800af24
  ldr r2, =_sbss
 8000728:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800072c:	200011c0 	.word	0x200011c0

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <EE_ReadEeprom>:
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data);
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
static uint16_t EE_VerifyPageFullyErased(uint32_t Address);


void EE_ReadEeprom(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	EE_ReadVariable(DisplayOptionAddres, &DisplayOption);
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <EE_ReadEeprom+0x34>)
 800073a:	2000      	movs	r0, #0
 800073c:	f000 fa1c 	bl	8000b78 <EE_ReadVariable>
	EE_ReadVariable(ButtonModeAddres,&ButtonMode);
 8000740:	490a      	ldr	r1, [pc, #40]	; (800076c <EE_ReadEeprom+0x38>)
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fa18 	bl	8000b78 <EE_ReadVariable>

	if(DisplayOption < 0 || DisplayOption > 1)
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <EE_ReadEeprom+0x34>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d902      	bls.n	8000756 <EE_ReadEeprom+0x22>
	{
		DisplayOption = DisplayAll;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <EE_ReadEeprom+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	801a      	strh	r2, [r3, #0]
	}
	if(ButtonMode < 0 || ButtonMode > 6)
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <EE_ReadEeprom+0x38>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <EE_ReadEeprom+0x30>
	{
		DisplayOption = ModeEagle;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <EE_ReadEeprom+0x34>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
	}

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000806 	.word	0x20000806
 800076c:	200007d0 	.word	0x200007d0

08000770 <EE_Init>:




uint16_t EE_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000776:	2306      	movs	r3, #6
 8000778:	847b      	strh	r3, [r7, #34]	; 0x22
 800077a:	2306      	movs	r3, #6
 800077c:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	83fb      	strh	r3, [r7, #30]
 8000786:	2300      	movs	r3, #0
 8000788:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000794:	4ba0      	ldr	r3, [pc, #640]	; (8000a18 <EE_Init+0x2a8>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800079a:	4ba0      	ldr	r3, [pc, #640]	; (8000a1c <EE_Init+0x2ac>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80007a4:	4b9c      	ldr	r3, [pc, #624]	; (8000a18 <EE_Init+0x2a8>)
 80007a6:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80007ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d00b      	beq.n	80007ce <EE_Init+0x5e>
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	f280 8196 	bge.w	8000aea <EE_Init+0x37a>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 80f8 	beq.w	80009b4 <EE_Init+0x244>
 80007c4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d050      	beq.n	800086e <EE_Init+0xfe>
 80007cc:	e18d      	b.n	8000aea <EE_Init+0x37a>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80007ce:	8c3b      	ldrh	r3, [r7, #32]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d116      	bne.n	8000802 <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80007d4:	4890      	ldr	r0, [pc, #576]	; (8000a18 <EE_Init+0x2a8>)
 80007d6:	f000 f9a9 	bl	8000b2c <EE_VerifyPageFullyErased>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f040 818e 	bne.w	8000afe <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80007e2:	f107 0214 	add.w	r2, r7, #20
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f83a 	bl	8002864 <HAL_FLASHEx_Erase>
 80007f0:	4603      	mov	r3, r0
 80007f2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80007f4:	7efb      	ldrb	r3, [r7, #27]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 8181 	beq.w	8000afe <EE_Init+0x38e>
          {
            return flashstatus;
 80007fc:	7efb      	ldrb	r3, [r7, #27]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	e185      	b.n	8000b0e <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000802:	8c3b      	ldrh	r3, [r7, #32]
 8000804:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000808:	4293      	cmp	r3, r2
 800080a:	d125      	bne.n	8000858 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <EE_Init+0x2a8>)
 800080e:	f000 f98d 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10e      	bne.n	8000836 <EE_Init+0xc6>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000818:	f107 0214 	add.w	r2, r7, #20
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f002 f81f 	bl	8002864 <HAL_FLASHEx_Erase>
 8000826:	4603      	mov	r3, r0
 8000828:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800082a:	7efb      	ldrb	r3, [r7, #27]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <EE_Init+0xc6>
          {
            return flashstatus;
 8000830:	7efb      	ldrb	r3, [r7, #27]
 8000832:	b29b      	uxth	r3, r3
 8000834:	e16b      	b.n	8000b0e <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	4977      	ldr	r1, [pc, #476]	; (8000a1c <EE_Init+0x2ac>)
 8000840:	2001      	movs	r0, #1
 8000842:	f001 feed 	bl	8002620 <HAL_FLASH_Program>
 8000846:	4603      	mov	r3, r0
 8000848:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800084a:	7efb      	ldrb	r3, [r7, #27]
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 8156 	beq.w	8000afe <EE_Init+0x38e>
        {
          return flashstatus;
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	b29b      	uxth	r3, r3
 8000856:	e15a      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000858:	f000 f9fa 	bl	8000c50 <EE_Format>
 800085c:	4603      	mov	r3, r0
 800085e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000860:	7efb      	ldrb	r3, [r7, #27]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 814b 	beq.w	8000afe <EE_Init+0x38e>
        {
          return flashstatus;
 8000868:	7efb      	ldrb	r3, [r7, #27]
 800086a:	b29b      	uxth	r3, r3
 800086c:	e14f      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800086e:	8c3b      	ldrh	r3, [r7, #32]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d163      	bne.n	800093c <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000874:	2300      	movs	r3, #0
 8000876:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000878:	e030      	b.n	80008dc <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 800087a:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <EE_Init+0x2b0>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	b29a      	uxth	r2, r3
 8000880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000882:	4968      	ldr	r1, [pc, #416]	; (8000a24 <EE_Init+0x2b4>)
 8000884:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000888:	429a      	cmp	r2, r3
 800088a:	d101      	bne.n	8000890 <EE_Init+0x120>
          {
            x = varidx;
 800088c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800088e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000890:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000892:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000896:	429a      	cmp	r2, r3
 8000898:	d01d      	beq.n	80008d6 <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800089a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089c:	4a61      	ldr	r2, [pc, #388]	; (8000a24 <EE_Init+0x2b4>)
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	4961      	ldr	r1, [pc, #388]	; (8000a28 <EE_Init+0x2b8>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f967 	bl	8000b78 <EE_ReadVariable>
 80008aa:	4603      	mov	r3, r0
 80008ac:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80008ae:	8bbb      	ldrh	r3, [r7, #28]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d010      	beq.n	80008d6 <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80008b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b6:	4a5b      	ldr	r2, [pc, #364]	; (8000a24 <EE_Init+0x2b4>)
 80008b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008bc:	4a5a      	ldr	r2, [pc, #360]	; (8000a28 <EE_Init+0x2b8>)
 80008be:	8812      	ldrh	r2, [r2, #0]
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fa58 	bl	8000d78 <EE_VerifyPageFullWriteVariable>
 80008c8:	4603      	mov	r3, r0
 80008ca:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80008cc:	8bfb      	ldrh	r3, [r7, #30]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <EE_Init+0x166>
              {
                return eepromstatus;
 80008d2:	8bfb      	ldrh	r3, [r7, #30]
 80008d4:	e11b      	b.n	8000b0e <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80008d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008d8:	3301      	adds	r3, #1
 80008da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008de:	2b1a      	cmp	r3, #26
 80008e0:	d9cb      	bls.n	800087a <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	494b      	ldr	r1, [pc, #300]	; (8000a18 <EE_Init+0x2a8>)
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 fe97 	bl	8002620 <HAL_FLASH_Program>
 80008f2:	4603      	mov	r3, r0
 80008f4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80008f6:	7efb      	ldrb	r3, [r7, #27]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <EE_Init+0x192>
        {
          return flashstatus;
 80008fc:	7efb      	ldrb	r3, [r7, #27]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	e105      	b.n	8000b0e <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <EE_Init+0x2ac>)
 8000908:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800090e:	4843      	ldr	r0, [pc, #268]	; (8000a1c <EE_Init+0x2ac>)
 8000910:	f000 f90c 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 80f3 	bne.w	8000b02 <EE_Init+0x392>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800091c:	f107 0214 	add.w	r2, r7, #20
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f001 ff9d 	bl	8002864 <HAL_FLASHEx_Erase>
 800092a:	4603      	mov	r3, r0
 800092c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 80e6 	beq.w	8000b02 <EE_Init+0x392>
          {
            return flashstatus;
 8000936:	7efb      	ldrb	r3, [r7, #27]
 8000938:	b29b      	uxth	r3, r3
 800093a:	e0e8      	b.n	8000b0e <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 800093c:	8c3b      	ldrh	r3, [r7, #32]
 800093e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <EE_Init+0x22e>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <EE_Init+0x2ac>)
 800094c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000952:	4832      	ldr	r0, [pc, #200]	; (8000a1c <EE_Init+0x2ac>)
 8000954:	f000 f8ea 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <EE_Init+0x20c>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800095e:	f107 0214 	add.w	r2, r7, #20
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 ff7c 	bl	8002864 <HAL_FLASHEx_Erase>
 800096c:	4603      	mov	r3, r0
 800096e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000970:	7efb      	ldrb	r3, [r7, #27]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <EE_Init+0x20c>
          {
            return flashstatus;
 8000976:	7efb      	ldrb	r3, [r7, #27]
 8000978:	b29b      	uxth	r3, r3
 800097a:	e0c8      	b.n	8000b0e <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	4924      	ldr	r1, [pc, #144]	; (8000a18 <EE_Init+0x2a8>)
 8000986:	2001      	movs	r0, #1
 8000988:	f001 fe4a 	bl	8002620 <HAL_FLASH_Program>
 800098c:	4603      	mov	r3, r0
 800098e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80b5 	beq.w	8000b02 <EE_Init+0x392>
        {
          return flashstatus;
 8000998:	7efb      	ldrb	r3, [r7, #27]
 800099a:	b29b      	uxth	r3, r3
 800099c:	e0b7      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800099e:	f000 f957 	bl	8000c50 <EE_Format>
 80009a2:	4603      	mov	r3, r0
 80009a4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80009a6:	7efb      	ldrb	r3, [r7, #27]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80aa 	beq.w	8000b02 <EE_Init+0x392>
        {
          return flashstatus;
 80009ae:	7efb      	ldrb	r3, [r7, #27]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	e0ac      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80009b4:	8c3b      	ldrh	r3, [r7, #32]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10a      	bne.n	80009d0 <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80009ba:	f000 f949 	bl	8000c50 <EE_Format>
 80009be:	4603      	mov	r3, r0
 80009c0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 809e 	beq.w	8000b06 <EE_Init+0x396>
        {
          return flashstatus;
 80009ca:	7efb      	ldrb	r3, [r7, #27]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	e09e      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80009d0:	8c3b      	ldrh	r3, [r7, #32]
 80009d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d11b      	bne.n	8000a12 <EE_Init+0x2a2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <EE_Init+0x2ac>)
 80009e0:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <EE_Init+0x2ac>)
 80009e8:	f000 f8a0 	bl	8000b2c <EE_VerifyPageFullyErased>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8089 	bne.w	8000b06 <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80009f4:	f107 0214 	add.w	r2, r7, #20
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 ff31 	bl	8002864 <HAL_FLASHEx_Erase>
 8000a02:	4603      	mov	r3, r0
 8000a04:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d07c      	beq.n	8000b06 <EE_Init+0x396>
          {
            return flashstatus;
 8000a0c:	7efb      	ldrb	r3, [r7, #27]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	e07d      	b.n	8000b0e <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a16:	e03a      	b.n	8000a8e <EE_Init+0x31e>
 8000a18:	0801f800 	.word	0x0801f800
 8000a1c:	0801fc00 	.word	0x0801fc00
 8000a20:	0801f806 	.word	0x0801f806
 8000a24:	200009b4 	.word	0x200009b4
 8000a28:	2000025c 	.word	0x2000025c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <EE_Init+0x3a8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a34:	4939      	ldr	r1, [pc, #228]	; (8000b1c <EE_Init+0x3ac>)
 8000a36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d101      	bne.n	8000a42 <EE_Init+0x2d2>
          {
            x = varidx;
 8000a3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a40:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000a42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d01d      	beq.n	8000a88 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <EE_Init+0x3ac>)
 8000a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a54:	4932      	ldr	r1, [pc, #200]	; (8000b20 <EE_Init+0x3b0>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f88e 	bl	8000b78 <EE_ReadVariable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8000a60:	8bbb      	ldrh	r3, [r7, #28]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d010      	beq.n	8000a88 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000a66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a68:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <EE_Init+0x3ac>)
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <EE_Init+0x3b0>)
 8000a70:	8812      	ldrh	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f97f 	bl	8000d78 <EE_VerifyPageFullWriteVariable>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8000a7e:	8bfb      	ldrh	r3, [r7, #30]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <EE_Init+0x318>
              {
                return eepromstatus;
 8000a84:	8bfb      	ldrh	r3, [r7, #30]
 8000a86:	e042      	b.n	8000b0e <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a90:	2b1a      	cmp	r3, #26
 8000a92:	d9cb      	bls.n	8000a2c <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	4921      	ldr	r1, [pc, #132]	; (8000b24 <EE_Init+0x3b4>)
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f001 fdbe 	bl	8002620 <HAL_FLASH_Program>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000aa8:	7efb      	ldrb	r3, [r7, #27]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <EE_Init+0x344>
        {
          return flashstatus;
 8000aae:	7efb      	ldrb	r3, [r7, #27]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	e02c      	b.n	8000b0e <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <EE_Init+0x3b8>)
 8000aba:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <EE_Init+0x3b8>)
 8000ac2:	f000 f833 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11c      	bne.n	8000b06 <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000acc:	f107 0214 	add.w	r2, r7, #20
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 fec5 	bl	8002864 <HAL_FLASHEx_Erase>
 8000ada:	4603      	mov	r3, r0
 8000adc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000ade:	7efb      	ldrb	r3, [r7, #27]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d010      	beq.n	8000b06 <EE_Init+0x396>
          {
            return flashstatus;
 8000ae4:	7efb      	ldrb	r3, [r7, #27]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	e011      	b.n	8000b0e <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8000aea:	f000 f8b1 	bl	8000c50 <EE_Format>
 8000aee:	4603      	mov	r3, r0
 8000af0:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000af2:	7efb      	ldrb	r3, [r7, #27]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <EE_Init+0x39a>
      {
        return flashstatus;
 8000af8:	7efb      	ldrb	r3, [r7, #27]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	e007      	b.n	8000b0e <EE_Init+0x39e>
      break;
 8000afe:	bf00      	nop
 8000b00:	e004      	b.n	8000b0c <EE_Init+0x39c>
      break;
 8000b02:	bf00      	nop
 8000b04:	e002      	b.n	8000b0c <EE_Init+0x39c>
      break;
 8000b06:	bf00      	nop
 8000b08:	e000      	b.n	8000b0c <EE_Init+0x39c>
      }
      break;
 8000b0a:	bf00      	nop
  }

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	0801fc06 	.word	0x0801fc06
 8000b1c:	200009b4 	.word	0x200009b4
 8000b20:	2000025c 	.word	0x2000025c
 8000b24:	0801fc00 	.word	0x0801fc00
 8000b28:	0801f800 	.word	0x0801f800

08000b2c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8000b38:	f245 5355 	movw	r3, #21845	; 0x5555
 8000b3c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000b3e:	e00d      	b.n	8000b5c <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8000b46:	897b      	ldrh	r3, [r7, #10]
 8000b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d002      	beq.n	8000b56 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]

      break;
 8000b54:	e006      	b.n	8000b64 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <EE_VerifyPageFullyErased+0x48>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d3ed      	bcc.n	8000b40 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	b29b      	uxth	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	0801fc00 	.word	0x0801fc00

08000b78 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8000b88:	f245 5355 	movw	r3, #21845	; 0x5555
 8000b8c:	81bb      	strh	r3, [r7, #12]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <EE_ReadVariable+0x8c>)
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <EE_ReadVariable+0x8c>)
 8000b98:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8a8 	bl	8000cf0 <EE_FindValidPage>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	2bab      	cmp	r3, #171	; 0xab
 8000ba8:	d101      	bne.n	8000bae <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000baa:	23ab      	movs	r3, #171	; 0xab
 8000bac:	e025      	b.n	8000bfa <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000bb4:	337e      	adds	r3, #126	; 0x7e
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	029a      	lsls	r2, r3, #10
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <EE_ReadVariable+0x90>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8000bc6:	e012      	b.n	8000bee <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8000bce:	89ba      	ldrh	r2, [r7, #12]
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d108      	bne.n	8000be8 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	3b02      	subs	r3, #2
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	82fb      	strh	r3, [r7, #22]

      break;
 8000be6:	e007      	b.n	8000bf8 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	3b04      	subs	r3, #4
 8000bec:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8e7      	bhi.n	8000bc8 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8000bf8:	8afb      	ldrh	r3, [r7, #22]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0801f800 	.word	0x0801f800
 8000c08:	0801f7fe 	.word	0x0801f7fe

08000c0c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	80fb      	strh	r3, [r7, #6]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8a6 	bl	8000d78 <EE_VerifyPageFullWriteVariable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	2b80      	cmp	r3, #128	; 0x80
 8000c34:	d107      	bne.n	8000c46 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000c36:	88ba      	ldrh	r2, [r7, #4]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8fd 	bl	8000e3c <EE_PageTransfer>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000c46:	89fb      	ldrh	r3, [r7, #14]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <EE_Format+0x98>)
 8000c64:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000c6a:	481f      	ldr	r0, [pc, #124]	; (8000ce8 <EE_Format+0x98>)
 8000c6c:	f7ff ff5e 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10d      	bne.n	8000c92 <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8000c76:	f107 0210 	add.w	r2, r7, #16
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fdf0 	bl	8002864 <HAL_FLASHEx_Erase>
 8000c84:	4603      	mov	r3, r0
 8000c86:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <EE_Format+0x42>
    {
      return flashstatus;
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	e025      	b.n	8000cde <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	4913      	ldr	r1, [pc, #76]	; (8000ce8 <EE_Format+0x98>)
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f001 fcbf 	bl	8002620 <HAL_FLASH_Program>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <EE_Format+0x60>
  {
    return flashstatus;
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	e016      	b.n	8000cde <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <EE_Format+0x9c>)
 8000cb2:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <EE_Format+0x9c>)
 8000cb6:	f7ff ff39 	bl	8000b2c <EE_VerifyPageFullyErased>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10d      	bne.n	8000cdc <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fdcb 	bl	8002864 <HAL_FLASHEx_Erase>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <EE_Format+0x8c>
    {
      return flashstatus;
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	e000      	b.n	8000cde <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	0801f800 	.word	0x0801f800
 8000cec:	0801fc00 	.word	0x0801fc00

08000cf0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	81fb      	strh	r3, [r7, #14]
 8000cfe:	2306      	movs	r3, #6
 8000d00:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <EE_FindValidPage+0x80>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <EE_FindValidPage+0x84>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01b      	beq.n	8000d4c <EE_FindValidPage+0x5c>
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d125      	bne.n	8000d64 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d108      	bne.n	8000d30 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e01c      	b.n	8000d66 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e01a      	b.n	8000d66 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d108      	bne.n	8000d48 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000d40:	2301      	movs	r3, #1
 8000d42:	e010      	b.n	8000d66 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000d44:	2300      	movs	r3, #0
 8000d46:	e00e      	b.n	8000d66 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000d48:	23ab      	movs	r3, #171	; 0xab
 8000d4a:	e00c      	b.n	8000d66 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000d52:	2300      	movs	r3, #0
 8000d54:	e007      	b.n	8000d66 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e002      	b.n	8000d66 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000d60:	23ab      	movs	r3, #171	; 0xab
 8000d62:	e000      	b.n	8000d66 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000d64:	2300      	movs	r3, #0
  }
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	0801f800 	.word	0x0801f800
 8000d74:	0801fc00 	.word	0x0801fc00

08000d78 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	460a      	mov	r2, r1
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4613      	mov	r3, r2
 8000d88:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ffa8 	bl	8000cf0 <EE_FindValidPage>
 8000da0:	4603      	mov	r3, r0
 8000da2:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000da4:	8a3b      	ldrh	r3, [r7, #16]
 8000da6:	2bab      	cmp	r3, #171	; 0xab
 8000da8:	d101      	bne.n	8000dae <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000daa:	23ab      	movs	r3, #171	; 0xab
 8000dac:	e03b      	b.n	8000e26 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8000dae:	8a3b      	ldrh	r3, [r7, #16]
 8000db0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000db4:	337e      	adds	r3, #126	; 0x7e
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8000dba:	8a3b      	ldrh	r3, [r7, #16]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	029a      	lsls	r2, r3, #10
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <EE_VerifyPageFullWriteVariable+0xc0>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8000dc6:	e029      	b.n	8000e1c <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d121      	bne.n	8000e16 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	4615      	mov	r5, r2
 8000dda:	4622      	mov	r2, r4
 8000ddc:	462b      	mov	r3, r5
 8000dde:	6979      	ldr	r1, [r7, #20]
 8000de0:	2001      	movs	r0, #1
 8000de2:	f001 fc1d 	bl	8002620 <HAL_FLASH_Program>
 8000de6:	4603      	mov	r3, r0
 8000de8:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000dea:	7cfb      	ldrb	r3, [r7, #19]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	e017      	b.n	8000e26 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	1c99      	adds	r1, r3, #2
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4698      	mov	r8, r3
 8000e00:	4691      	mov	r9, r2
 8000e02:	4642      	mov	r2, r8
 8000e04:	464b      	mov	r3, r9
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 fc0a 	bl	8002620 <HAL_FLASH_Program>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8000e10:	7cfb      	ldrb	r3, [r7, #19]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	e007      	b.n	8000e26 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3d1      	bcc.n	8000dc8 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000e24:	2380      	movs	r3, #128	; 0x80
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e30:	0801f800 	.word	0x0801f800
 8000e34:	0801fc00 	.word	0x0801fc00
 8000e38:	0801f7ff 	.word	0x0801f7ff

08000e3c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8000e52:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <EE_PageTransfer+0x164>)
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8000e5e:	2300      	movs	r3, #0
 8000e60:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	843b      	strh	r3, [r7, #32]
 8000e66:	2300      	movs	r3, #0
 8000e68:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff3e 	bl	8000cf0 <EE_FindValidPage>
 8000e74:	4603      	mov	r3, r0
 8000e76:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8000e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d104      	bne.n	8000e88 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <EE_PageTransfer+0x164>)
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <EE_PageTransfer+0x168>)
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e86:	e009      	b.n	8000e9c <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8000e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8000e8e:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <EE_PageTransfer+0x168>)
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <EE_PageTransfer+0x164>)
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e96:	e001      	b.n	8000e9c <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000e98:	23ab      	movs	r3, #171	; 0xab
 8000e9a:	e07c      	b.n	8000f96 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8000e9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f001 fbba 	bl	8002620 <HAL_FLASH_Program>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8000eba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	e069      	b.n	8000f96 <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000ec2:	88ba      	ldrh	r2, [r7, #4]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff55 	bl	8000d78 <EE_VerifyPageFullWriteVariable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8000ed2:	8c3b      	ldrh	r3, [r7, #32]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 8000ed8:	8c3b      	ldrh	r3, [r7, #32]
 8000eda:	e05c      	b.n	8000f96 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ee0:	e027      	b.n	8000f32 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000ee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ee4:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <EE_PageTransfer+0x16c>)
 8000ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d01d      	beq.n	8000f2c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef2:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <EE_PageTransfer+0x16c>)
 8000ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef8:	492c      	ldr	r1, [pc, #176]	; (8000fac <EE_PageTransfer+0x170>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe3c 	bl	8000b78 <EE_ReadVariable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8000f04:	8bfb      	ldrh	r3, [r7, #30]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d010      	beq.n	8000f2c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <EE_PageTransfer+0x16c>)
 8000f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f12:	4a26      	ldr	r2, [pc, #152]	; (8000fac <EE_PageTransfer+0x170>)
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff2d 	bl	8000d78 <EE_VerifyPageFullWriteVariable>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8000f22:	8c3b      	ldrh	r3, [r7, #32]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8000f28:	8c3b      	ldrh	r3, [r7, #32]
 8000f2a:	e034      	b.n	8000f96 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000f2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f2e:	3301      	adds	r3, #1
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f34:	2b1a      	cmp	r3, #26
 8000f36:	d9d4      	bls.n	8000ee2 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8000f44:	f107 0218 	add.w	r2, r7, #24
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fc88 	bl	8002864 <HAL_FLASHEx_Erase>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8000f62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	e015      	b.n	8000f96 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 fb53 	bl	8002620 <HAL_FLASH_Program>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000f80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8000f88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	e002      	b.n	8000f96 <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8000f90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f94:	b29b      	uxth	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3730      	adds	r7, #48	; 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0801f800 	.word	0x0801f800
 8000fa4:	0801fc00 	.word	0x0801fc00
 8000fa8:	200009b4 	.word	0x200009b4
 8000fac:	2000025c 	.word	0x2000025c

08000fb0 <rowread>:





GPIO_PinState rowread(uint8_t rowNumber){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(rowPort[rowNumber],rowPin[rowNumber]);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <rowread+0x2c>)
 8000fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <rowread+0x30>)
 8000fc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4610      	mov	r0, r2
 8000fce:	f001 fe75 	bl	8002cbc <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000c4 	.word	0x200000c4
 8000fe0:	200000b4 	.word	0x200000b4

08000fe4 <setcolumn>:

void setcolumn(uint8_t columnNumber){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_SET);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <setcolumn+0x78>)
 8000ff2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <setcolumn+0x7c>)
 8000ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	f001 fe72 	bl	8002cea <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8001006:	2301      	movs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e01e      	b.n	800104a <setcolumn+0x66>
		HAL_GPIO_WritePin(columnPort[(columnNumber+i)%columnNumber],columnPin[(columnNumber+i)%columnNumber], GPIO_PIN_RESET);
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	fb93 f1f2 	sdiv	r1, r3, r2
 8001018:	fb01 f202 	mul.w	r2, r1, r2
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <setcolumn+0x78>)
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	79fa      	ldrb	r2, [r7, #7]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001030:	fb01 f202 	mul.w	r2, r1, r2
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <setcolumn+0x7c>)
 8001038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f001 fe53 	bl	8002cea <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbdc      	blt.n	800100c <setcolumn+0x28>
	}
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000d0 	.word	0x200000d0
 8001060:	200000bc 	.word	0x200000bc

08001064 <resetcolumn>:

void resetcolumn(uint8_t columnNumber){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_RESET);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <resetcolumn+0x2c>)
 8001072:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <resetcolumn+0x30>)
 800107a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	f001 fe32 	bl	8002cea <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000d0 	.word	0x200000d0
 8001094:	200000bc 	.word	0x200000bc

08001098 <scan>:

uint8_t scan(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
	uint8_t pressedButton=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]

	for(int i=0; i<ColumnNumber;i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	e03a      	b.n	800111e <scan+0x86>
	{

		HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f001 f987 	bl	80023bc <HAL_Delay>
		setcolumn(i);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff96 	bl	8000fe4 <setcolumn>
		for(int j=0;j<RowNumber;j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e024      	b.n	8001108 <scan+0x70>
		{
			if(rowread(j)==GPIO_PIN_SET)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff74 	bl	8000fb0 <rowread>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d110      	bne.n	80010f0 <scan+0x58>
			{
				pressedButton=j*4+i+1;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
				resetcolumn(i);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffbc 	bl	8001064 <resetcolumn>
				return pressedButton;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	e01a      	b.n	8001126 <scan+0x8e>

			}

			for(volatile int i=0; i<100;i++);
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	e002      	b.n	80010fc <scan+0x64>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b63      	cmp	r3, #99	; 0x63
 8001100:	ddf9      	ble.n	80010f6 <scan+0x5e>
		for(int j=0;j<RowNumber;j++)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b02      	cmp	r3, #2
 800110c:	ddd7      	ble.n	80010be <scan+0x26>
		}
		resetcolumn(i);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffa6 	bl	8001064 <resetcolumn>
	for(int i=0; i<ColumnNumber;i++)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b03      	cmp	r3, #3
 8001122:	ddc1      	ble.n	80010a8 <scan+0x10>
	}
	return pressedButton;
 8001124:	79fb      	ldrb	r3, [r7, #7]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <keystroke>:





void keystroke(uint8_t key, uint8_t modifier){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	  keyboardhid.MODIFIER=modifier;
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <keystroke+0x4c>)
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	7013      	strb	r3, [r2, #0]
	  keyboardhid.KEYKODE1=key;
 8001146:	4a0d      	ldr	r2, [pc, #52]	; (800117c <keystroke+0x4c>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	7093      	strb	r3, [r2, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&keyboardhid, sizeof(keyboardhid));
 800114c:	2208      	movs	r2, #8
 800114e:	490b      	ldr	r1, [pc, #44]	; (800117c <keystroke+0x4c>)
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <keystroke+0x50>)
 8001152:	f007 facf 	bl	80086f4 <USBD_HID_SendReport>
	  HAL_Delay(5);
 8001156:	2005      	movs	r0, #5
 8001158:	f001 f930 	bl	80023bc <HAL_Delay>
	  keyboardhid.KEYKODE1=0x00;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <keystroke+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	709a      	strb	r2, [r3, #2]
	  keyboardhid.MODIFIER=0x00;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <keystroke+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t *)&keyboardhid,sizeof(keyboardhid));
 8001168:	2208      	movs	r2, #8
 800116a:	4904      	ldr	r1, [pc, #16]	; (800117c <keystroke+0x4c>)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <keystroke+0x50>)
 800116e:	f007 fac1 	bl	80086f4 <USBD_HID_SendReport>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000260 	.word	0x20000260
 8001180:	20000a10 	.word	0x20000a10

08001184 <InitMenu>:





void InitMenu(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af04      	add	r7, sp, #16


	/*Prev Next Up Down*/
	BuildMenu(&mainM, "Main", 1, executeMain, 0, &buttonM, 0, 0);
 800118a:	2300      	movs	r3, #0
 800118c:	9303      	str	r3, [sp, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <InitMenu+0x19c>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <InitMenu+0x1a0>)
 800119c:	2201      	movs	r2, #1
 800119e:	4962      	ldr	r1, [pc, #392]	; (8001328 <InitMenu+0x1a4>)
 80011a0:	4862      	ldr	r0, [pc, #392]	; (800132c <InitMenu+0x1a8>)
 80011a2:	f000 f9d3 	bl	800154c <BuildMenu>
	BuildMenu(&buttonM, "Button", 2, executeButton, &mainM, &displayM, 0, &scrollM);
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <InitMenu+0x1ac>)
 80011a8:	9303      	str	r3, [sp, #12]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <InitMenu+0x1b0>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b5e      	ldr	r3, [pc, #376]	; (800132c <InitMenu+0x1a8>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b60      	ldr	r3, [pc, #384]	; (8001338 <InitMenu+0x1b4>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	4960      	ldr	r1, [pc, #384]	; (800133c <InitMenu+0x1b8>)
 80011bc:	4858      	ldr	r0, [pc, #352]	; (8001320 <InitMenu+0x19c>)
 80011be:	f000 f9c5 	bl	800154c <BuildMenu>
	BuildMenu(&scrollM, "Scroll",  2, executeScroll, &mainM, 0, &buttonM, 0);
 80011c2:	2300      	movs	r3, #0
 80011c4:	9303      	str	r3, [sp, #12]
 80011c6:	4b56      	ldr	r3, [pc, #344]	; (8001320 <InitMenu+0x19c>)
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	4b57      	ldr	r3, [pc, #348]	; (800132c <InitMenu+0x1a8>)
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <InitMenu+0x1bc>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	495b      	ldr	r1, [pc, #364]	; (8001344 <InitMenu+0x1c0>)
 80011d8:	4855      	ldr	r0, [pc, #340]	; (8001330 <InitMenu+0x1ac>)
 80011da:	f000 f9b7 	bl	800154c <BuildMenu>
	BuildMenu(&displayM, "Display", 2, executeDisplay, &buttonM, &allM, 0, &modeM);
 80011de:	4b5a      	ldr	r3, [pc, #360]	; (8001348 <InitMenu+0x1c4>)
 80011e0:	9303      	str	r3, [sp, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	4b59      	ldr	r3, [pc, #356]	; (800134c <InitMenu+0x1c8>)
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <InitMenu+0x19c>)
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <InitMenu+0x1cc>)
 80011f0:	2202      	movs	r2, #2
 80011f2:	4958      	ldr	r1, [pc, #352]	; (8001354 <InitMenu+0x1d0>)
 80011f4:	484f      	ldr	r0, [pc, #316]	; (8001334 <InitMenu+0x1b0>)
 80011f6:	f000 f9a9 	bl	800154c <BuildMenu>
	BuildMenu(&modeM, 	"Mode", 2, executeMode, &buttonM, &eagleM, &displayM, 0);
 80011fa:	2300      	movs	r3, #0
 80011fc:	9303      	str	r3, [sp, #12]
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <InitMenu+0x1b0>)
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	4b55      	ldr	r3, [pc, #340]	; (8001358 <InitMenu+0x1d4>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <InitMenu+0x19c>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <InitMenu+0x1d8>)
 800120c:	2202      	movs	r2, #2
 800120e:	4954      	ldr	r1, [pc, #336]	; (8001360 <InitMenu+0x1dc>)
 8001210:	484d      	ldr	r0, [pc, #308]	; (8001348 <InitMenu+0x1c4>)
 8001212:	f000 f99b 	bl	800154c <BuildMenu>
	BuildMenu(&allM, "All", 2, executeAll, &displayM, 0, 0, &pressedM);
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <InitMenu+0x1e0>)
 8001218:	9303      	str	r3, [sp, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2300      	movs	r3, #0
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <InitMenu+0x1b0>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b50      	ldr	r3, [pc, #320]	; (8001368 <InitMenu+0x1e4>)
 8001228:	2202      	movs	r2, #2
 800122a:	4950      	ldr	r1, [pc, #320]	; (800136c <InitMenu+0x1e8>)
 800122c:	4847      	ldr	r0, [pc, #284]	; (800134c <InitMenu+0x1c8>)
 800122e:	f000 f98d 	bl	800154c <BuildMenu>
	BuildMenu(&pressedM, "Pressed", 2, executePressed, &displayM, 0, &allM, 0);
 8001232:	2300      	movs	r3, #0
 8001234:	9303      	str	r3, [sp, #12]
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <InitMenu+0x1c8>)
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <InitMenu+0x1b0>)
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <InitMenu+0x1ec>)
 8001244:	2202      	movs	r2, #2
 8001246:	494b      	ldr	r1, [pc, #300]	; (8001374 <InitMenu+0x1f0>)
 8001248:	4846      	ldr	r0, [pc, #280]	; (8001364 <InitMenu+0x1e0>)
 800124a:	f000 f97f 	bl	800154c <BuildMenu>
	BuildMenu(&eagleM, "Eagle", 7, executeEagle, &modeM, 0, 0, &kicadM);
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <InitMenu+0x1f4>)
 8001250:	9303      	str	r3, [sp, #12]
 8001252:	2300      	movs	r3, #0
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <InitMenu+0x1c4>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <InitMenu+0x1f8>)
 8001260:	2207      	movs	r2, #7
 8001262:	4947      	ldr	r1, [pc, #284]	; (8001380 <InitMenu+0x1fc>)
 8001264:	483c      	ldr	r0, [pc, #240]	; (8001358 <InitMenu+0x1d4>)
 8001266:	f000 f971 	bl	800154c <BuildMenu>
	BuildMenu(&kicadM, "Kicad", 7, executeKicad, &modeM, 0, &eagleM, &photosopM);
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <InitMenu+0x200>)
 800126c:	9303      	str	r3, [sp, #12]
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <InitMenu+0x1d4>)
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2300      	movs	r3, #0
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <InitMenu+0x1c4>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <InitMenu+0x204>)
 800127c:	2207      	movs	r2, #7
 800127e:	4943      	ldr	r1, [pc, #268]	; (800138c <InitMenu+0x208>)
 8001280:	483d      	ldr	r0, [pc, #244]	; (8001378 <InitMenu+0x1f4>)
 8001282:	f000 f963 	bl	800154c <BuildMenu>
	BuildMenu(&photosopM, "Photoshop", 7, executePhotoshop, &modeM, 0, &kicadM, &premiereM);
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <InitMenu+0x20c>)
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <InitMenu+0x1f4>)
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2300      	movs	r3, #0
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <InitMenu+0x1c4>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <InitMenu+0x210>)
 8001298:	2207      	movs	r2, #7
 800129a:	493f      	ldr	r1, [pc, #252]	; (8001398 <InitMenu+0x214>)
 800129c:	4839      	ldr	r0, [pc, #228]	; (8001384 <InitMenu+0x200>)
 800129e:	f000 f955 	bl	800154c <BuildMenu>
	BuildMenu(&premiereM, "Premiere", 7, executePremiere, &modeM, 0, &photosopM, &custom1);
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <InitMenu+0x218>)
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <InitMenu+0x200>)
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2300      	movs	r3, #0
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <InitMenu+0x1c4>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <InitMenu+0x21c>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	493b      	ldr	r1, [pc, #236]	; (80013a4 <InitMenu+0x220>)
 80012b8:	4835      	ldr	r0, [pc, #212]	; (8001390 <InitMenu+0x20c>)
 80012ba:	f000 f947 	bl	800154c <BuildMenu>
	BuildMenu(&custom1, "Custom 1", 7, executeCustom1,	&modeM, 0, &premiereM, &custom2);
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <InitMenu+0x224>)
 80012c0:	9303      	str	r3, [sp, #12]
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <InitMenu+0x20c>)
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <InitMenu+0x1c4>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <InitMenu+0x228>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	4937      	ldr	r1, [pc, #220]	; (80013b0 <InitMenu+0x22c>)
 80012d4:	4831      	ldr	r0, [pc, #196]	; (800139c <InitMenu+0x218>)
 80012d6:	f000 f939 	bl	800154c <BuildMenu>
	BuildMenu(&custom2, "Custom 2", 7, executeCustom2,	&modeM, 0, &custom1, &custom3);
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <InitMenu+0x230>)
 80012dc:	9303      	str	r3, [sp, #12]
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <InitMenu+0x218>)
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <InitMenu+0x1c4>)
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <InitMenu+0x234>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	4933      	ldr	r1, [pc, #204]	; (80013bc <InitMenu+0x238>)
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <InitMenu+0x224>)
 80012f2:	f000 f92b 	bl	800154c <BuildMenu>
	BuildMenu(&custom3, "Custom 3", 7, executeCustom3,	&modeM, 0, &custom2, 0);
 80012f6:	2300      	movs	r3, #0
 80012f8:	9303      	str	r3, [sp, #12]
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <InitMenu+0x224>)
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <InitMenu+0x1c4>)
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <InitMenu+0x23c>)
 8001308:	2207      	movs	r2, #7
 800130a:	492e      	ldr	r1, [pc, #184]	; (80013c4 <InitMenu+0x240>)
 800130c:	4829      	ldr	r0, [pc, #164]	; (80013b4 <InitMenu+0x230>)
 800130e:	f000 f91d 	bl	800154c <BuildMenu>
	currentM=&mainM;
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <InitMenu+0x244>)
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <InitMenu+0x1a8>)
 8001316:	601a      	str	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000860 	.word	0x20000860
 8001324:	080013cd 	.word	0x080013cd
 8001328:	0800a0c8 	.word	0x0800a0c8
 800132c:	20000910 	.word	0x20000910
 8001330:	2000080c 	.word	0x2000080c
 8001334:	200008bc 	.word	0x200008bc
 8001338:	080013d9 	.word	0x080013d9
 800133c:	0800a0d0 	.word	0x0800a0d0
 8001340:	080013e5 	.word	0x080013e5
 8001344:	0800a0d8 	.word	0x0800a0d8
 8001348:	20000988 	.word	0x20000988
 800134c:	200007d4 	.word	0x200007d4
 8001350:	080013f1 	.word	0x080013f1
 8001354:	0800a0e0 	.word	0x0800a0e0
 8001358:	20000938 	.word	0x20000938
 800135c:	080013fd 	.word	0x080013fd
 8001360:	0800a0e8 	.word	0x0800a0e8
 8001364:	20000834 	.word	0x20000834
 8001368:	08001409 	.word	0x08001409
 800136c:	0800a0f0 	.word	0x0800a0f0
 8001370:	0800142d 	.word	0x0800142d
 8001374:	0800a0f4 	.word	0x0800a0f4
 8001378:	20000750 	.word	0x20000750
 800137c:	08001451 	.word	0x08001451
 8001380:	0800a0fc 	.word	0x0800a0fc
 8001384:	200008e4 	.word	0x200008e4
 8001388:	08001475 	.word	0x08001475
 800138c:	0800a104 	.word	0x0800a104
 8001390:	20000890 	.word	0x20000890
 8001394:	08001499 	.word	0x08001499
 8001398:	0800a10c 	.word	0x0800a10c
 800139c:	20000700 	.word	0x20000700
 80013a0:	080014bd 	.word	0x080014bd
 80013a4:	0800a118 	.word	0x0800a118
 80013a8:	20000728 	.word	0x20000728
 80013ac:	080014e1 	.word	0x080014e1
 80013b0:	0800a124 	.word	0x0800a124
 80013b4:	20000960 	.word	0x20000960
 80013b8:	08001505 	.word	0x08001505
 80013bc:	0800a130 	.word	0x0800a130
 80013c0:	08001529 	.word	0x08001529
 80013c4:	0800a13c 	.word	0x0800a13c
 80013c8:	200007fc 	.word	0x200007fc

080013cc <executeMain>:

/*------------------------------------------------------------------------------------*/
void executeMain(){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	//Print Buttons
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <executeButton>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeButton(){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	//Write Button To screen
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <executeScroll>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeScroll(){
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <executeDisplay>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeDisplay(){
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <executeMode>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeMode(){
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <executeAll>:

/*------------------------------------------------------------------------------------*/
void executeAll()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	DisplayOption = DisplayAll;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <executeAll+0x20>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, DisplayOption);
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <executeAll+0x20>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fbf7 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 800141e:	f000 fc1b 	bl	8001c58 <DisplaySaved>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000806 	.word	0x20000806

0800142c <executePressed>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePressed()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	DisplayOption = DisplayPressed;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <executePressed+0x20>)
 8001432:	2201      	movs	r2, #1
 8001434:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, DisplayOption);
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <executePressed+0x20>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fbe5 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 8001442:	f000 fc09 	bl	8001c58 <DisplaySaved>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000806 	.word	0x20000806

08001450 <executeEagle>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeEagle()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	ButtonMode = ModeEagle;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <executeEagle+0x20>)
 8001456:	2200      	movs	r2, #0
 8001458:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <executeEagle+0x20>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fbd3 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 8001466:	f000 fbf7 	bl	8001c58 <DisplaySaved>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200007d0 	.word	0x200007d0

08001474 <executeKicad>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeKicad()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	ButtonMode = ModeKicad;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <executeKicad+0x20>)
 800147a:	2201      	movs	r2, #1
 800147c:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <executeKicad+0x20>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fbc1 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 800148a:	f000 fbe5 	bl	8001c58 <DisplaySaved>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200007d0 	.word	0x200007d0

08001498 <executePhotoshop>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePhotoshop()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	ButtonMode = ModePhotoshop;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <executePhotoshop+0x20>)
 800149e:	2202      	movs	r2, #2
 80014a0:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <executePhotoshop+0x20>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fbaf 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 80014ae:	f000 fbd3 	bl	8001c58 <DisplaySaved>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200007d0 	.word	0x200007d0

080014bc <executePremiere>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executePremiere()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	ButtonMode = ModePremiere;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <executePremiere+0x20>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <executePremiere+0x20>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fb9d 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 80014d2:	f000 fbc1 	bl	8001c58 <DisplaySaved>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200007d0 	.word	0x200007d0

080014e0 <executeCustom1>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom1()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom1;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <executeCustom1+0x20>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <executeCustom1+0x20>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fb8b 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 80014f6:	f000 fbaf 	bl	8001c58 <DisplaySaved>
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200007d0 	.word	0x200007d0

08001504 <executeCustom2>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom2()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom2;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <executeCustom2+0x20>)
 800150a:	2205      	movs	r2, #5
 800150c:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <executeCustom2+0x20>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fb79 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 800151a:	f000 fb9d 	bl	8001c58 <DisplaySaved>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200007d0 	.word	0x200007d0

08001528 <executeCustom3>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeCustom3()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	ButtonMode = ModeCustom2;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <executeCustom3+0x20>)
 800152e:	2205      	movs	r2, #5
 8001530:	801a      	strh	r2, [r3, #0]
	EE_WriteVariable(DisplayOptionAddres, ButtonMode);
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <executeCustom3+0x20>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fb67 	bl	8000c0c <EE_WriteVariable>
	DisplaySaved();
 800153e:	f000 fb8b 	bl	8001c58 <DisplaySaved>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200007d0 	.word	0x200007d0

0800154c <BuildMenu>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void BuildMenu(struct level *currentNode, char name[16], uint8_t numberOfSiblings, void (*execute)(void) , struct level *prevNode, struct level *nextNode,struct level *upNode,struct level *downNode)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	71fb      	strb	r3, [r7, #7]
    strcpy(currentNode->name, name);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f008 fd9d 	bl	800a0a0 <strcpy>

   	currentNode->numberOfSiblings=numberOfSiblings;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	741a      	strb	r2, [r3, #16]
    currentNode->prev = prevNode;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	619a      	str	r2, [r3, #24]
    currentNode->next = nextNode;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	615a      	str	r2, [r3, #20]
    currentNode->up = upNode;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	621a      	str	r2, [r3, #32]
    currentNode->down = downNode;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	61da      	str	r2, [r3, #28]
    currentNode->execute = execute;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <Up>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Up(struct level **currentNode)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->up != 0)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <Up+0x1c>
  (*currentNode) = (*currentNode)->up;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a1a      	ldr	r2, [r3, #32]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <Down>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Down(struct level **currentNode)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->down != 0)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <Down+0x20>
  {
	(*currentNode) = (*currentNode)->down;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	601a      	str	r2, [r3, #0]
	setCursorPosition();
 80015d4:	f000 f976 	bl	80018c4 <setCursorPosition>
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Next>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Next(struct level **currentNode)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if((*currentNode)->execute != 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <Next+0x1a>
	{
		(*currentNode)->execute();
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4798      	blx	r3
	}
	if((*currentNode)->next != 0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <Next+0x32>
	{
		(*currentNode) = (*currentNode)->next;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]

		setCursorPosition();
 800160e:	f000 f959 	bl	80018c4 <setCursorPosition>
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <Prev>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void Prev(struct level **currentNode)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->prev != 0)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <Prev+0x1c>
  (*currentNode) = (*currentNode)->prev;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <MenuTransition>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void MenuTransition(uint8_t *task){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]



	switch(*task)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d862      	bhi.n	8001716 <MenuTransition+0xd6>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <MenuTransition+0x18>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001717 	.word	0x08001717
 800165c:	0800166d 	.word	0x0800166d
 8001660:	08001695 	.word	0x08001695
 8001664:	080016bd 	.word	0x080016bd
 8001668:	080016db 	.word	0x080016db
	{
		case idleE:

			break;
		case upE:
			Up(&currentM);
 800166c:	482c      	ldr	r0, [pc, #176]	; (8001720 <MenuTransition+0xe0>)
 800166e:	f7ff ff90 	bl	8001592 <Up>
			upMenuItem(currentM);
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MenuTransition+0xe0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f97a 	bl	8001970 <upMenuItem>
			drawMenu(currentM, cursorPosition);
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MenuTransition+0xe0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <MenuTransition+0xe4>)
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f88e 	bl	80017a8 <drawMenu>
			*task=idleE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
			break;
 8001692:	e041      	b.n	8001718 <MenuTransition+0xd8>
		case downE:
			Down(&currentM);
 8001694:	4822      	ldr	r0, [pc, #136]	; (8001720 <MenuTransition+0xe0>)
 8001696:	f7ff ff8f 	bl	80015b8 <Down>
			downMenuItem(currentM);
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MenuTransition+0xe0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f92e 	bl	8001900 <downMenuItem>
			drawMenu(currentM, cursorPosition);
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MenuTransition+0xe0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <MenuTransition+0xe4>)
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f87a 	bl	80017a8 <drawMenu>
			*task=idleE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
			break;
 80016ba:	e02d      	b.n	8001718 <MenuTransition+0xd8>
		case nextE:
			Next(&currentM);
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <MenuTransition+0xe0>)
 80016be:	f7ff ff8f 	bl	80015e0 <Next>
			drawMenu(currentM, cursorPosition);
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MenuTransition+0xe0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MenuTransition+0xe4>)
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f86b 	bl	80017a8 <drawMenu>
			*task=idleE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e01e      	b.n	8001718 <MenuTransition+0xd8>
		case prevE:
			Prev(&currentM);
 80016da:	4811      	ldr	r0, [pc, #68]	; (8001720 <MenuTransition+0xe0>)
 80016dc:	f7ff ff9d 	bl	800161a <Prev>
			if(strcmp(currentM->name,"Main") == 0){
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MenuTransition+0xe0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4910      	ldr	r1, [pc, #64]	; (8001728 <MenuTransition+0xe8>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fd30 	bl	800014c <strcmp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <MenuTransition+0xba>
				menuFlag = 0;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MenuTransition+0xec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e009      	b.n	800170e <MenuTransition+0xce>

			}else
			{
			  setCursorPosition();
 80016fa:	f000 f8e3 	bl	80018c4 <setCursorPosition>
			  drawMenu(currentM, cursorPosition);
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MenuTransition+0xe0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <MenuTransition+0xe4>)
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f84d 	bl	80017a8 <drawMenu>
			}
			*task=idleE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
			break;
 8001714:	e000      	b.n	8001718 <MenuTransition+0xd8>
		default:
			break;
 8001716:	bf00      	nop

	}
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200007fc 	.word	0x200007fc
 8001724:	2000085d 	.word	0x2000085d
 8001728:	0800a0c8 	.word	0x0800a0c8
 800172c:	20000804 	.word	0x20000804

08001730 <drawMenuItem>:

/*------------------------------------------------------------------------------------*/


void drawMenuItem(char *str, uint8_t line,uint8_t invert)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	4613      	mov	r3, r2
 800173e:	70bb      	strb	r3, [r7, #2]
	ssd1306_SetCursor(10, (line-1)*19+2);
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	461a      	mov	r2, r3
 8001744:	00d2      	lsls	r2, r2, #3
 8001746:	441a      	add	r2, r3
 8001748:	0052      	lsls	r2, r2, #1
 800174a:	4413      	add	r3, r2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3b11      	subs	r3, #17
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	200a      	movs	r0, #10
 8001756:	f000 fdb5 	bl	80022c4 <ssd1306_SetCursor>
	ssd1306_WriteString("          ", Font_11x18,White);
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <drawMenuItem+0x70>)
 800175c:	2301      	movs	r3, #1
 800175e:	ca06      	ldmia	r2, {r1, r2}
 8001760:	4810      	ldr	r0, [pc, #64]	; (80017a4 <drawMenuItem+0x74>)
 8001762:	f000 fd89 	bl	8002278 <ssd1306_WriteString>
	ssd1306_SetCursor(10, (line-1)*19+2);
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	461a      	mov	r2, r3
 800176a:	00d2      	lsls	r2, r2, #3
 800176c:	441a      	add	r2, r3
 800176e:	0052      	lsls	r2, r2, #1
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3b11      	subs	r3, #17
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	200a      	movs	r0, #10
 800177c:	f000 fda2 	bl	80022c4 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, invert==0 ? White : Black);
 8001780:	78bb      	ldrb	r3, [r7, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <drawMenuItem+0x70>)
 800178e:	ca06      	ldmia	r2, {r1, r2}
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fd71 	bl	8002278 <ssd1306_WriteString>

}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000004 	.word	0x20000004
 80017a4:	0800a148 	.word	0x0800a148

080017a8 <drawMenu>:
void drawMenu(struct level *currentNode, uint8_t selectedItem){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	ssd1306_Fill(Black);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 fc1d 	bl	8001ff4 <ssd1306_Fill>



	if(cursorPosition == topMenuPosition)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <drawMenu+0x108>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <drawMenu+0x10c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d126      	bne.n	8001814 <drawMenu+0x6c>
	{
		drawMenuItem(currentM->name, 1, White);
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <drawMenu+0x110>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffae 	bl	8001730 <drawMenuItem>
		if(bottomMenuPosition >= topMenuPosition + 1)
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <drawMenu+0x10c>)
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <drawMenu+0x114>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <drawMenu+0x48>
		drawMenuItem(currentM->down->name, 2, Black);
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <drawMenu+0x110>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2200      	movs	r2, #0
 80017e8:	2102      	movs	r1, #2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ffa0 	bl	8001730 <drawMenuItem>
		if(bottomMenuPosition == topMenuPosition + 2)
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <drawMenu+0x114>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <drawMenu+0x10c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	3302      	adds	r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d14f      	bne.n	80018a0 <drawMenu+0xf8>
		drawMenuItem(currentM->down->down->name, 3, Black);
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <drawMenu+0x110>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2200      	movs	r2, #0
 800180a:	2103      	movs	r1, #3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff8f 	bl	8001730 <drawMenuItem>
 8001812:	e045      	b.n	80018a0 <drawMenu+0xf8>

	}else if(cursorPosition - 1 == topMenuPosition)
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <drawMenu+0x108>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <drawMenu+0x10c>)
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4293      	cmp	r3, r2
 8001820:	d11f      	bne.n	8001862 <drawMenu+0xba>
	{
		drawMenuItem(currentM->up->name, 1, Black);
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <drawMenu+0x110>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	2200      	movs	r2, #0
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff7f 	bl	8001730 <drawMenuItem>
		drawMenuItem(currentM->name, 2, White);
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <drawMenu+0x110>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff78 	bl	8001730 <drawMenuItem>
		if(bottomMenuPosition == topMenuPosition + 2)
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <drawMenu+0x114>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <drawMenu+0x10c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3302      	adds	r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d127      	bne.n	80018a0 <drawMenu+0xf8>
		drawMenuItem(currentM->down->name, 3, Black);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <drawMenu+0x110>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2200      	movs	r2, #0
 8001858:	2103      	movs	r1, #3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff68 	bl	8001730 <drawMenuItem>
 8001860:	e01e      	b.n	80018a0 <drawMenu+0xf8>
	}else if(cursorPosition - 2 == topMenuPosition)
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <drawMenu+0x108>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3b02      	subs	r3, #2
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <drawMenu+0x10c>)
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4293      	cmp	r3, r2
 800186e:	d117      	bne.n	80018a0 <drawMenu+0xf8>
	{
		drawMenuItem(currentM->up->up->name, 1, Black);
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <drawMenu+0x110>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	2200      	movs	r2, #0
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff57 	bl	8001730 <drawMenuItem>
		drawMenuItem(currentM->up->name, 2, Black);
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <drawMenu+0x110>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2200      	movs	r2, #0
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff4f 	bl	8001730 <drawMenuItem>
		drawMenuItem(currentM->name, 3, White);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <drawMenu+0x110>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	2103      	movs	r1, #3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff48 	bl	8001730 <drawMenuItem>
	}
	ssd1306_UpdateScreen(&hi2cScreen);
 80018a0:	4807      	ldr	r0, [pc, #28]	; (80018c0 <drawMenu+0x118>)
 80018a2:	f000 fbc9 	bl	8002038 <ssd1306_UpdateScreen>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000085d 	.word	0x2000085d
 80018b4:	200009b1 	.word	0x200009b1
 80018b8:	200007fc 	.word	0x200007fc
 80018bc:	200009b0 	.word	0x200009b0
 80018c0:	2000077c 	.word	0x2000077c

080018c4 <setCursorPosition>:
/*------------------------------------------------------------------------------------*/

void setCursorPosition(){
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	topMenuPosition = 1;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <setCursorPosition+0x2c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
	bottomMenuPosition = currentM->numberOfSiblings <=3 ? currentM->numberOfSiblings : 3;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <setCursorPosition+0x30>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7c1b      	ldrb	r3, [r3, #16]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	bf28      	it	cs
 80018d8:	2303      	movcs	r3, #3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <setCursorPosition+0x34>)
 80018de:	701a      	strb	r2, [r3, #0]
	cursorPosition = 1;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <setCursorPosition+0x38>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]

}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200009b1 	.word	0x200009b1
 80018f4:	200007fc 	.word	0x200007fc
 80018f8:	200009b0 	.word	0x200009b0
 80018fc:	2000085d 	.word	0x2000085d

08001900 <downMenuItem>:

void downMenuItem(struct level *currentNode)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	cursorPosition++;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <downMenuItem+0x64>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <downMenuItem+0x64>)
 8001912:	701a      	strb	r2, [r3, #0]
	if(cursorPosition>bottomMenuPosition && cursorPosition <= currentNode->numberOfSiblings)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <downMenuItem+0x64>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <downMenuItem+0x68>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d911      	bls.n	8001944 <downMenuItem+0x44>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7c1a      	ldrb	r2, [r3, #16]
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <downMenuItem+0x64>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d30b      	bcc.n	8001944 <downMenuItem+0x44>
	{
		topMenuPosition++;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <downMenuItem+0x6c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <downMenuItem+0x6c>)
 8001936:	701a      	strb	r2, [r3, #0]
		bottomMenuPosition++;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <downMenuItem+0x68>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <downMenuItem+0x68>)
 8001942:	701a      	strb	r2, [r3, #0]
	}
	if(cursorPosition > currentNode->numberOfSiblings)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7c1a      	ldrb	r2, [r3, #16]
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <downMenuItem+0x64>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d203      	bcs.n	8001958 <downMenuItem+0x58>
	{
		cursorPosition = currentNode->numberOfSiblings;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7c1a      	ldrb	r2, [r3, #16]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <downMenuItem+0x64>)
 8001956:	701a      	strb	r2, [r3, #0]
	}
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000085d 	.word	0x2000085d
 8001968:	200009b0 	.word	0x200009b0
 800196c:	200009b1 	.word	0x200009b1

08001970 <upMenuItem>:

void upMenuItem(struct level *currentNode){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	cursorPosition--;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <upMenuItem+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <upMenuItem+0x58>)
 8001982:	701a      	strb	r2, [r3, #0]
	if(cursorPosition<topMenuPosition && cursorPosition>0)
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <upMenuItem+0x58>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <upMenuItem+0x5c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d20f      	bcs.n	80019b0 <upMenuItem+0x40>
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <upMenuItem+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <upMenuItem+0x40>
	{
		topMenuPosition--;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <upMenuItem+0x5c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3b01      	subs	r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <upMenuItem+0x5c>)
 80019a2:	701a      	strb	r2, [r3, #0]
		bottomMenuPosition--;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <upMenuItem+0x60>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <upMenuItem+0x60>)
 80019ae:	701a      	strb	r2, [r3, #0]
	}
	if(cursorPosition < 1)
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <upMenuItem+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <upMenuItem+0x4e>
	{
		cursorPosition = 1;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <upMenuItem+0x58>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	}
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	2000085d 	.word	0x2000085d
 80019cc:	200009b1 	.word	0x200009b1
 80019d0:	200009b0 	.word	0x200009b0

080019d4 <buttonControl>:

void buttonControl()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	pressedButton = scan();
 80019da:	f7ff fb5d 	bl	8001098 <scan>
 80019de:	4603      	mov	r3, r0
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <buttonControl+0x68>)
 80019e4:	701a      	strb	r2, [r3, #0]
	if(pressedButton != 0)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <buttonControl+0x68>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d021      	beq.n	8001a32 <buttonControl+0x5e>
	{
		int i = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
		while(modeEagleKeys[pressedButton-1][i] != NULL)
 80019f2:	e011      	b.n	8001a18 <buttonControl+0x44>
		{
			keystroke(modeEagleKeys[pressedButton-1][i], 0);
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <buttonControl+0x68>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	4911      	ldr	r1, [pc, #68]	; (8001a40 <buttonControl+0x6c>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	18ca      	adds	r2, r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb8f 	bl	8001130 <keystroke>
			i++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
		while(modeEagleKeys[pressedButton-1][i] != NULL)
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <buttonControl+0x68>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <buttonControl+0x6c>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	18ca      	adds	r2, r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e0      	bne.n	80019f4 <buttonControl+0x20>
		}
	}

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000805 	.word	0x20000805
 8001a40:	2000000c 	.word	0x2000000c

08001a44 <encoderControl>:

void encoderControl(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	if(menuFlag==0)
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <encoderControl+0x11c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d133      	bne.n	8001ab8 <encoderControl+0x74>
	{
		if(readRotary1Button==GPIO_PIN_RESET)
 8001a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a54:	4843      	ldr	r0, [pc, #268]	; (8001b64 <encoderControl+0x120>)
 8001a56:	f001 f931 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d125      	bne.n	8001aac <encoderControl+0x68>
		{
			if(HAL_GetTick() - menuEnterStartTime > menuDebounceTime)
 8001a60:	f000 fca2 	bl	80023a8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <encoderControl+0x124>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a70:	d973      	bls.n	8001b5a <encoderControl+0x116>
			{
				menuFlag=1;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <encoderControl+0x11c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
				rotary1Counter=0x0FFFFFFF;
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <encoderControl+0x128>)
 8001a7a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001a7e:	601a      	str	r2, [r3, #0]
				prevRotary1Counter=0x0FFFFFFF;
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <encoderControl+0x12c>)
 8001a82:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001a86:	601a      	str	r2, [r3, #0]
				setCursorPosition();
 8001a88:	f7ff ff1c 	bl	80018c4 <setCursorPosition>
				drawMenu(currentM,1);
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <encoderControl+0x130>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe88 	bl	80017a8 <drawMenu>
				while(readRotary1Button==GPIO_PIN_RESET);
 8001a98:	bf00      	nop
 8001a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9e:	4831      	ldr	r0, [pc, #196]	; (8001b64 <encoderControl+0x120>)
 8001aa0:	f001 f90c 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f7      	beq.n	8001a9a <encoderControl+0x56>
			}
			prevRotary1Counter=rotary1Counter;


		}
}
 8001aaa:	e056      	b.n	8001b5a <encoderControl+0x116>
			menuEnterStartTime = HAL_GetTick();
 8001aac:	f000 fc7c 	bl	80023a8 <HAL_GetTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <encoderControl+0x124>)
 8001ab4:	6013      	str	r3, [r2, #0]
}
 8001ab6:	e050      	b.n	8001b5a <encoderControl+0x116>
	else if(menuFlag==1)
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <encoderControl+0x11c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d14c      	bne.n	8001b5a <encoderControl+0x116>
			MenuTransition(&nodeTransition);
 8001ac0:	482d      	ldr	r0, [pc, #180]	; (8001b78 <encoderControl+0x134>)
 8001ac2:	f7ff fdbd 	bl	8001640 <MenuTransition>
			nodeTransition=0;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <encoderControl+0x134>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
			if(prevRotary1Counter != rotary1Counter){
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <encoderControl+0x12c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <encoderControl+0x128>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d012      	beq.n	8001afe <encoderControl+0xba>
				if(prevRotary1Counter > rotary1Counter)
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <encoderControl+0x12c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <encoderControl+0x128>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d903      	bls.n	8001aec <encoderControl+0xa8>
					nodeTransition = downE;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <encoderControl+0x134>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e008      	b.n	8001afe <encoderControl+0xba>
				}else if(prevRotary1Counter < rotary1Counter)
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <encoderControl+0x12c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <encoderControl+0x128>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d202      	bcs.n	8001afe <encoderControl+0xba>
					nodeTransition = upE;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <encoderControl+0x134>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - menuEnterStartTime > ButtonDebounceTime)
 8001afe:	f000 fc53 	bl	80023a8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <encoderControl+0x124>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001b0e:	d920      	bls.n	8001b52 <encoderControl+0x10e>
				if(readRotary1Button==GPIO_PIN_RESET)
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <encoderControl+0x120>)
 8001b16:	f001 f8d1 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d108      	bne.n	8001b32 <encoderControl+0xee>
					nodeTransition = nextE;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <encoderControl+0x134>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
					menuEnterStartTime = HAL_GetTick();
 8001b26:	f000 fc3f 	bl	80023a8 <HAL_GetTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <encoderControl+0x124>)
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e00f      	b.n	8001b52 <encoderControl+0x10e>
				}else if(readRotary2Button==GPIO_PIN_RESET)
 8001b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <encoderControl+0x120>)
 8001b38:	f001 f8c0 	bl	8002cbc <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <encoderControl+0x10e>
					nodeTransition = prevE;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <encoderControl+0x134>)
 8001b44:	2204      	movs	r2, #4
 8001b46:	701a      	strb	r2, [r3, #0]
					menuEnterStartTime = HAL_GetTick();
 8001b48:	f000 fc2e 	bl	80023a8 <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <encoderControl+0x124>)
 8001b50:	6013      	str	r3, [r2, #0]
			prevRotary1Counter=rotary1Counter;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <encoderControl+0x128>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <encoderControl+0x12c>)
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000804 	.word	0x20000804
 8001b64:	40010800 	.word	0x40010800
 8001b68:	200008b8 	.word	0x200008b8
 8001b6c:	200006a4 	.word	0x200006a4
 8001b70:	20000778 	.word	0x20000778
 8001b74:	200007fc 	.word	0x200007fc
 8001b78:	200006a8 	.word	0x200006a8

08001b7c <displayControl>:

void displayControl()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	if(menuFlag == 0){
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <displayControl+0xa4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d149      	bne.n	8001c1c <displayControl+0xa0>
		if(pressedButton != 0)
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <displayControl+0xa8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <displayControl+0x1e>
		{
			DisplayPressedButton();
 8001b90:	f000 f856 	bl	8001c40 <DisplayPressedButton>
			displayFlag = 1;
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <displayControl+0xac>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
		}
		if(displayFlag == 1)
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <displayControl+0xac>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d122      	bne.n	8001be8 <displayControl+0x6c>
		{
			if(DisplayOption == DisplayAll)
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <displayControl+0xb0>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d104      	bne.n	8001bb4 <displayControl+0x38>
			{
				DisplayItem(pressedButton);
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <displayControl+0xa8>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f874 	bl	8001c9c <DisplayItem>
			}else if(DisplayOption == DisplayPressed)
			{

			}
			if(ButtonMode == ModeEagle)
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <displayControl+0xb4>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <displayControl+0x66>
			{

			}else if(ButtonMode == ModeEagle)
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <displayControl+0xb4>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <displayControl+0x66>
			{

			}else if(ButtonMode == ModePhotoshop)
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <displayControl+0xb4>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d00a      	beq.n	8001be2 <displayControl+0x66>
			{

			}else if(ButtonMode == ModePremiere)
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <displayControl+0xb4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d006      	beq.n	8001be2 <displayControl+0x66>
			{

			}else if(ButtonMode == ModeCustom1)
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <displayControl+0xb4>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d002      	beq.n	8001be2 <displayControl+0x66>
			{

			}else if(ButtonMode == ModeCustom2)
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <displayControl+0xb4>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b05      	cmp	r3, #5

			}else if(ButtonMode == ModeCustom3)
			{

			}
			displayFlag = 0;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <displayControl+0xac>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
		}
		if(DisplayOption == DisplayPressed && HAL_GetTick() - displayStartTime > ButtonDisplayTime && updateFlag == 1)
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <displayControl+0xb0>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d115      	bne.n	8001c1c <displayControl+0xa0>
 8001bf0:	f000 fbda 	bl	80023a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <displayControl+0xb8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c00:	d90c      	bls.n	8001c1c <displayControl+0xa0>
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <displayControl+0xbc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <displayControl+0xa0>
		{
			updateFlag = 0;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <displayControl+0xbc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(Black);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f000 f9ef 	bl	8001ff4 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2cScreen);
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <displayControl+0xc0>)
 8001c18:	f000 fa0e 	bl	8002038 <ssd1306_UpdateScreen>

		}
	}
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000804 	.word	0x20000804
 8001c24:	20000805 	.word	0x20000805
 8001c28:	200007d2 	.word	0x200007d2
 8001c2c:	20000806 	.word	0x20000806
 8001c30:	200007d0 	.word	0x200007d0
 8001c34:	2000088c 	.word	0x2000088c
 8001c38:	2000090c 	.word	0x2000090c
 8001c3c:	2000077c 	.word	0x2000077c

08001c40 <DisplayPressedButton>:

void DisplayPressedButton(){
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	if(DisplayOption == DisplayAll)
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <DisplayPressedButton+0x14>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0

	}else if(DisplayOption == DisplayPressed)
	{

	}
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000806 	.word	0x20000806

08001c58 <DisplaySaved>:
void DisplaySaved(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 f9c9 	bl	8001ff4 <ssd1306_Fill>
	ssd1306_SetCursor(30, 20);
 8001c62:	2114      	movs	r1, #20
 8001c64:	201e      	movs	r0, #30
 8001c66:	f000 fb2d 	bl	80022c4 <ssd1306_SetCursor>
	ssd1306_WriteString("Saved", Font_11x18, Black);
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <DisplaySaved+0x38>)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	ca06      	ldmia	r2, {r1, r2}
 8001c70:	4808      	ldr	r0, [pc, #32]	; (8001c94 <DisplaySaved+0x3c>)
 8001c72:	f000 fb01 	bl	8002278 <ssd1306_WriteString>
	ssd1306_UpdateScreen(&hi2cScreen);
 8001c76:	4808      	ldr	r0, [pc, #32]	; (8001c98 <DisplaySaved+0x40>)
 8001c78:	f000 f9de 	bl	8002038 <ssd1306_UpdateScreen>
	HAL_Delay(750);
 8001c7c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001c80:	f000 fb9c 	bl	80023bc <HAL_Delay>
	ssd1306_Fill(Black);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 f9b5 	bl	8001ff4 <ssd1306_Fill>

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000004 	.word	0x20000004
 8001c94:	0800a154 	.word	0x0800a154
 8001c98:	2000077c 	.word	0x2000077c

08001c9c <DisplayItem>:
void DisplayItem(uint8_t Item)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	if(DisplayOption == DisplayAll)
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <DisplayItem+0xcc>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13b      	bne.n	8001d26 <DisplayItem+0x8a>
	{
		for(int i = 0; i<DisplayRowSize; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e034      	b.n	8001d1e <DisplayItem+0x82>
		{
			ssd1306_SetCursor(i%4*33, (i/4)*20);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	425a      	negs	r2, r3
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	bf58      	it	pl
 8001cc2:	4253      	negpl	r3, r2
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	0152      	lsls	r2, r2, #5
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da00      	bge.n	8001cd6 <DisplayItem+0x3a>
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	109b      	asrs	r3, r3, #2
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	0089      	lsls	r1, r1, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 faec 	bl	80022c4 <ssd1306_SetCursor>
			ssd1306_WriteString(modeEagleNames[i], Font_11x18, i == pressedButton ? Black : White);
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <DisplayItem+0xd0>)
 8001cf6:	1898      	adds	r0, r3, r2
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <DisplayItem+0xd4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <DisplayItem+0xd8>)
 8001d0c:	ca06      	ldmia	r2, {r1, r2}
 8001d0e:	f000 fab3 	bl	8002278 <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2cScreen);
 8001d12:	4819      	ldr	r0, [pc, #100]	; (8001d78 <DisplayItem+0xdc>)
 8001d14:	f000 f990 	bl	8002038 <ssd1306_UpdateScreen>
		for(int i = 0; i<DisplayRowSize; i++)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b0b      	cmp	r3, #11
 8001d22:	ddc7      	ble.n	8001cb4 <DisplayItem+0x18>
 8001d24:	e019      	b.n	8001d5a <DisplayItem+0xbe>
		}
	}else if(DisplayOption == DisplayPressed)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <DisplayItem+0xcc>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d115      	bne.n	8001d5a <DisplayItem+0xbe>
	{
		ssd1306_SetCursor(40, 20);
 8001d2e:	2114      	movs	r1, #20
 8001d30:	2028      	movs	r0, #40	; 0x28
 8001d32:	f000 fac7 	bl	80022c4 <ssd1306_SetCursor>
		ssd1306_WriteString(modeEagleNames[pressedButton-1],Font_11x18, White);
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <DisplayItem+0xd4>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <DisplayItem+0xd0>)
 8001d44:	1898      	adds	r0, r3, r2
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <DisplayItem+0xd8>)
 8001d48:	2301      	movs	r3, #1
 8001d4a:	ca06      	ldmia	r2, {r1, r2}
 8001d4c:	f000 fa94 	bl	8002278 <ssd1306_WriteString>
		displayStartTime = HAL_GetTick();
 8001d50:	f000 fb2a 	bl	80023a8 <HAL_GetTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <DisplayItem+0xe0>)
 8001d58:	6013      	str	r3, [r2, #0]
	}
	updateFlag = 1;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <DisplayItem+0xe4>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000806 	.word	0x20000806
 8001d6c:	20000060 	.word	0x20000060
 8001d70:	20000805 	.word	0x20000805
 8001d74:	20000004 	.word	0x20000004
 8001d78:	2000077c 	.word	0x2000077c
 8001d7c:	2000088c 	.word	0x2000088c
 8001d80:	2000090c 	.word	0x2000090c

08001d84 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001d90:	230a      	movs	r3, #10
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	2301      	movs	r3, #1
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	1cfb      	adds	r3, r7, #3
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f001 f916 	bl	8002fd4 <HAL_I2C_Mem_Write>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f000 fafd 	bl	80023bc <HAL_Delay>
    int status = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001dc6:	21ae      	movs	r1, #174	; 0xae
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffdb 	bl	8001d84 <ssd1306_WriteCommand>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001dd8:	2120      	movs	r1, #32
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffd2 	bl	8001d84 <ssd1306_WriteCommand>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001dea:	2110      	movs	r1, #16
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ffc9 	bl	8001d84 <ssd1306_WriteCommand>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001dfc:	21b0      	movs	r1, #176	; 0xb0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffc0 	bl	8001d84 <ssd1306_WriteCommand>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001e0e:	21c8      	movs	r1, #200	; 0xc8
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffb7 	bl	8001d84 <ssd1306_WriteCommand>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001e20:	2100      	movs	r1, #0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffae 	bl	8001d84 <ssd1306_WriteCommand>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001e32:	2110      	movs	r1, #16
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffa5 	bl	8001d84 <ssd1306_WriteCommand>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff9c 	bl	8001d84 <ssd1306_WriteCommand>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001e56:	2181      	movs	r1, #129	; 0x81
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff93 	bl	8001d84 <ssd1306_WriteCommand>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001e68:	21ff      	movs	r1, #255	; 0xff
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff8a 	bl	8001d84 <ssd1306_WriteCommand>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001e7a:	21a1      	movs	r1, #161	; 0xa1
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff81 	bl	8001d84 <ssd1306_WriteCommand>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001e8c:	21a6      	movs	r1, #166	; 0xa6
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff78 	bl	8001d84 <ssd1306_WriteCommand>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001e9e:	21a8      	movs	r1, #168	; 0xa8
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff6f 	bl	8001d84 <ssd1306_WriteCommand>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001eb0:	213f      	movs	r1, #63	; 0x3f
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff66 	bl	8001d84 <ssd1306_WriteCommand>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ec2:	21a4      	movs	r1, #164	; 0xa4
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff5d 	bl	8001d84 <ssd1306_WriteCommand>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001ed4:	21d3      	movs	r1, #211	; 0xd3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff54 	bl	8001d84 <ssd1306_WriteCommand>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff4b 	bl	8001d84 <ssd1306_WriteCommand>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001ef8:	21d5      	movs	r1, #213	; 0xd5
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff42 	bl	8001d84 <ssd1306_WriteCommand>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001f0a:	21f0      	movs	r1, #240	; 0xf0
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff39 	bl	8001d84 <ssd1306_WriteCommand>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001f1c:	21d9      	movs	r1, #217	; 0xd9
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff30 	bl	8001d84 <ssd1306_WriteCommand>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001f2e:	2122      	movs	r1, #34	; 0x22
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff27 	bl	8001d84 <ssd1306_WriteCommand>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001f40:	21da      	movs	r1, #218	; 0xda
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff1e 	bl	8001d84 <ssd1306_WriteCommand>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001f52:	2112      	movs	r1, #18
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff15 	bl	8001d84 <ssd1306_WriteCommand>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001f64:	21db      	movs	r1, #219	; 0xdb
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff0c 	bl	8001d84 <ssd1306_WriteCommand>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001f76:	2120      	movs	r1, #32
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff03 	bl	8001d84 <ssd1306_WriteCommand>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001f88:	218d      	movs	r1, #141	; 0x8d
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fefa 	bl	8001d84 <ssd1306_WriteCommand>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001f9a:	2114      	movs	r1, #20
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fef1 	bl	8001d84 <ssd1306_WriteCommand>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001fac:	21af      	movs	r1, #175	; 0xaf
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fee8 	bl	8001d84 <ssd1306_WriteCommand>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <ssd1306_Init+0x214>
        return 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e00f      	b.n	8001fe8 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f813 	bl	8001ff4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f832 	bl	8002038 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <ssd1306_Init+0x23c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <ssd1306_Init+0x23c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <ssd1306_Init+0x23c>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	715a      	strb	r2, [r3, #5]

    return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000688 	.word	0x20000688

08001ff4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e00d      	b.n	8002020 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <ssd1306_Fill+0x1a>
 800200a:	2100      	movs	r1, #0
 800200c:	e000      	b.n	8002010 <ssd1306_Fill+0x1c>
 800200e:	21ff      	movs	r1, #255	; 0xff
 8002010:	4a08      	ldr	r2, [pc, #32]	; (8002034 <ssd1306_Fill+0x40>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	460a      	mov	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8002026:	d3ed      	bcc.n	8002004 <ssd1306_Fill+0x10>
    }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000268 	.word	0x20000268

08002038 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af04      	add	r7, sp, #16
 800203e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e024      	b.n	8002090 <ssd1306_UpdateScreen+0x58>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	3b50      	subs	r3, #80	; 0x50
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fe98 	bl	8001d84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fe94 	bl	8001d84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800205c:	2110      	movs	r1, #16
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fe90 	bl	8001d84 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	4613      	mov	r3, r2
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <ssd1306_UpdateScreen+0x68>)
 8002072:	4413      	add	r3, r2
 8002074:	2264      	movs	r2, #100	; 0x64
 8002076:	9202      	str	r2, [sp, #8]
 8002078:	2284      	movs	r2, #132	; 0x84
 800207a:	9201      	str	r2, [sp, #4]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2301      	movs	r3, #1
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	2178      	movs	r1, #120	; 0x78
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 ffa5 	bl	8002fd4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b07      	cmp	r3, #7
 8002094:	d9d7      	bls.n	8002046 <ssd1306_UpdateScreen+0xe>
    }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000268 	.word	0x20000268

080020a4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80020a4:	b490      	push	{r4, r7}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	460b      	mov	r3, r1
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	4613      	mov	r3, r2
 80020b4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b83      	cmp	r3, #131	; 0x83
 80020ba:	d854      	bhi.n	8002166 <ssd1306_DrawPixel+0xc2>
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b3f      	cmp	r3, #63	; 0x3f
 80020c0:	d851      	bhi.n	8002166 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <ssd1306_DrawPixel+0xcc>)
 80020c4:	791b      	ldrb	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <ssd1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR)!color;
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d120      	bne.n	8002120 <ssd1306_DrawPixel+0x7c>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	b2d8      	uxtb	r0, r3
 80020e6:	4601      	mov	r1, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	015b      	lsls	r3, r3, #5
 80020ec:	440b      	add	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <ssd1306_DrawPixel+0xd0>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25c      	sxtb	r4, r3
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	4601      	mov	r1, r0
 800210e:	460b      	mov	r3, r1
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	440b      	add	r3, r1
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	b2e1      	uxtb	r1, r4
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <ssd1306_DrawPixel+0xd0>)
 800211c:	54d1      	strb	r1, [r2, r3]
 800211e:	e023      	b.n	8002168 <ssd1306_DrawPixel+0xc4>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	b2d8      	uxtb	r0, r3
 8002128:	4601      	mov	r1, r0
 800212a:	460b      	mov	r3, r1
 800212c:	015b      	lsls	r3, r3, #5
 800212e:	440b      	add	r3, r1
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <ssd1306_DrawPixel+0xd0>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	b25a      	sxtb	r2, r3
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	b25b      	sxtb	r3, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	b25b      	sxtb	r3, r3
 800214c:	4013      	ands	r3, r2
 800214e:	b25c      	sxtb	r4, r3
 8002150:	79fa      	ldrb	r2, [r7, #7]
 8002152:	4601      	mov	r1, r0
 8002154:	460b      	mov	r3, r1
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	440b      	add	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	b2e1      	uxtb	r1, r4
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <ssd1306_DrawPixel+0xd0>)
 8002162:	54d1      	strb	r1, [r2, r3]
 8002164:	e000      	b.n	8002168 <ssd1306_DrawPixel+0xc4>
        return;
 8002166:	bf00      	nop
    }
}
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bc90      	pop	{r4, r7}
 800216e:	4770      	bx	lr
 8002170:	20000688 	.word	0x20000688
 8002174:	20000268 	.word	0x20000268

08002178 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	4604      	mov	r4, r0
 8002180:	1d38      	adds	r0, r7, #4
 8002182:	e880 0006 	stmia.w	r0, {r1, r2}
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	4613      	mov	r3, r2
 800218e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <ssd1306_WriteChar+0xfc>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	793b      	ldrb	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	2b83      	cmp	r3, #131	; 0x83
 800219c:	dc06      	bgt.n	80021ac <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <ssd1306_WriteChar+0xfc>)
 80021a0:	885b      	ldrh	r3, [r3, #2]
 80021a2:	461a      	mov	r2, r3
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80021a8:	2b3f      	cmp	r3, #63	; 0x3f
 80021aa:	dd01      	ble.n	80021b0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e05d      	b.n	800226c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	e04c      	b.n	8002250 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3b20      	subs	r3, #32
 80021bc:	7979      	ldrb	r1, [r7, #5]
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	440b      	add	r3, r1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e034      	b.n	8002240 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <ssd1306_WriteChar+0xfc>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b2d8      	uxtb	r0, r3
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <ssd1306_WriteChar+0xfc>)
 80021f6:	885b      	ldrh	r3, [r3, #2]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	7bba      	ldrb	r2, [r7, #14]
 8002204:	4619      	mov	r1, r3
 8002206:	f7ff ff4d 	bl	80020a4 <ssd1306_DrawPixel>
 800220a:	e016      	b.n	800223a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <ssd1306_WriteChar+0xfc>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b2d8      	uxtb	r0, r3
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <ssd1306_WriteChar+0xfc>)
 800221c:	885b      	ldrh	r3, [r3, #2]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	b2d9      	uxtb	r1, r3
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff ff35 	bl	80020a4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3301      	adds	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	793b      	ldrb	r3, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4293      	cmp	r3, r2
 8002248:	d3c5      	bcc.n	80021d6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	797b      	ldrb	r3, [r7, #5]
 8002252:	461a      	mov	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4293      	cmp	r3, r2
 8002258:	d3ad      	bcc.n	80021b6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <ssd1306_WriteChar+0xfc>)
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	793b      	ldrb	r3, [r7, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <ssd1306_WriteChar+0xfc>)
 8002268:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3724      	adds	r7, #36	; 0x24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	20000688 	.word	0x20000688

08002278 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	1d38      	adds	r0, r7, #4
 8002282:	e880 0006 	stmia.w	r0, {r1, r2}
 8002286:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002288:	e012      	b.n	80022b0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	7818      	ldrb	r0, [r3, #0]
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	1d3a      	adds	r2, r7, #4
 8002292:	ca06      	ldmia	r2, {r1, r2}
 8002294:	f7ff ff70 	bl	8002178 <ssd1306_WriteChar>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d002      	beq.n	80022aa <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	e008      	b.n	80022bc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
    while (*str)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e8      	bne.n	800228a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x+1;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <ssd1306_SetCursor+0x30>)
 80022de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <ssd1306_SetCursor+0x30>)
 80022e6:	805a      	strh	r2, [r3, #2]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000688 	.word	0x20000688

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_Init+0x28>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_Init+0x28>)
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 f947 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230e:	200f      	movs	r0, #15
 8002310:	f000 f808 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7fe f916 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x54>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f95f 	bl	8002606 <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d80a      	bhi.n	800236e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f000 f927 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_InitTick+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000000 	.word	0x20000000
 800237c:	200000e4 	.word	0x200000e4
 8002380:	200000e0 	.word	0x200000e0

08002384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x1c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_IncTick+0x20>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <HAL_IncTick+0x20>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	200000e4 	.word	0x200000e4
 80023a4:	200009ec 	.word	0x200009ec

080023a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_GetTick+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	200009ec 	.word	0x200009ec

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fff0 	bl	80023a8 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffe0 	bl	80023a8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200000e4 	.word	0x200000e4

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4906      	ldr	r1, [pc, #24]	; (800249c <__NVIC_EnableIRQ+0x34>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	; (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff90 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff2d 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff42 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff90 	bl	80024f4 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5f 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff35 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_FLASH_Program+0xd8>)
 800263c:	7e1b      	ldrb	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_FLASH_Program+0x26>
 8002642:	2302      	movs	r3, #2
 8002644:	e054      	b.n	80026f0 <HAL_FLASH_Program+0xd0>
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_FLASH_Program+0xd8>)
 8002648:	2201      	movs	r2, #1
 800264a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800264c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002650:	f000 f872 	bl	8002738 <FLASH_WaitForLastOperation>
 8002654:	4603      	mov	r3, r0
 8002656:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d144      	bne.n	80026e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002664:	2301      	movs	r3, #1
 8002666:	757b      	strb	r3, [r7, #21]
 8002668:	e007      	b.n	800267a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d102      	bne.n	8002676 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002670:	2302      	movs	r3, #2
 8002672:	757b      	strb	r3, [r7, #21]
 8002674:	e001      	b.n	800267a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002676:	2304      	movs	r3, #4
 8002678:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800267a:	2300      	movs	r3, #0
 800267c:	75bb      	strb	r3, [r7, #22]
 800267e:	e02d      	b.n	80026dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002680:	7dbb      	ldrb	r3, [r7, #22]
 8002682:	005a      	lsls	r2, r3, #1
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	eb02 0c03 	add.w	ip, r2, r3
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	0119      	lsls	r1, r3, #4
 800268e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002692:	f1c1 0620 	rsb	r6, r1, #32
 8002696:	f1a1 0020 	sub.w	r0, r1, #32
 800269a:	fa22 f401 	lsr.w	r4, r2, r1
 800269e:	fa03 f606 	lsl.w	r6, r3, r6
 80026a2:	4334      	orrs	r4, r6
 80026a4:	fa23 f000 	lsr.w	r0, r3, r0
 80026a8:	4304      	orrs	r4, r0
 80026aa:	fa23 f501 	lsr.w	r5, r3, r1
 80026ae:	b2a3      	uxth	r3, r4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4660      	mov	r0, ip
 80026b4:	f000 f824 	bl	8002700 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026bc:	f000 f83c 	bl	8002738 <FLASH_WaitForLastOperation>
 80026c0:	4603      	mov	r3, r0
 80026c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_FLASH_Program+0xdc>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_FLASH_Program+0xdc>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	3301      	adds	r3, #1
 80026da:	75bb      	strb	r3, [r7, #22]
 80026dc:	7dba      	ldrb	r2, [r7, #22]
 80026de:	7d7b      	ldrb	r3, [r7, #21]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3cd      	bcc.n	8002680 <HAL_FLASH_Program+0x60>
 80026e4:	e000      	b.n	80026e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80026e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_FLASH_Program+0xd8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	761a      	strb	r2, [r3, #24]

  return status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f8:	200009f0 	.word	0x200009f0
 80026fc:	40022000 	.word	0x40022000

08002700 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <FLASH_Program_HalfWord+0x30>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <FLASH_Program_HalfWord+0x34>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <FLASH_Program_HalfWord+0x34>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	801a      	strh	r2, [r3, #0]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200009f0 	.word	0x200009f0
 8002734:	40022000 	.word	0x40022000

08002738 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff fe32 	bl	80023a8 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002746:	e010      	b.n	800276a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d00c      	beq.n	800276a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <FLASH_WaitForLastOperation+0x2e>
 8002756:	f7ff fe27 	bl	80023a8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d201      	bcs.n	800276a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e025      	b.n	80027b6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e8      	bne.n	8002748 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 8002784:	2220      	movs	r2, #32
 8002786:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <FLASH_WaitForLastOperation+0x88>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027ac:	f000 f80a 	bl	80027c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000

080027c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <FLASH_SetErrorCode+0x98>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 80027e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f043 0310 	orr.w	r3, r3, #16
 80027ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <FLASH_SetErrorCode+0x98>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 8002804:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <FLASH_SetErrorCode+0x98>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <FLASH_SetErrorCode+0x9c>)
 8002824:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <FLASH_SetErrorCode+0x98>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a0c      	ldr	r2, [pc, #48]	; (800285c <FLASH_SetErrorCode+0x98>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f240 1201 	movw	r2, #257	; 0x101
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <FLASH_SetErrorCode+0x86>
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <FLASH_SetErrorCode+0x98>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <FLASH_SetErrorCode+0x98>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	61d3      	str	r3, [r2, #28]
}  
 8002848:	e002      	b.n	8002850 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <FLASH_SetErrorCode+0x98>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60d3      	str	r3, [r2, #12]
}  
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	200009f0 	.word	0x200009f0

08002864 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_FLASHEx_Erase+0xd0>)
 8002878:	7e1b      	ldrb	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_FLASHEx_Erase+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e053      	b.n	800292a <HAL_FLASHEx_Erase+0xc6>
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_FLASHEx_Erase+0xd0>)
 8002884:	2201      	movs	r2, #1
 8002886:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d116      	bne.n	80028be <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002894:	f7ff ff50 	bl	8002738 <FLASH_WaitForLastOperation>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d141      	bne.n	8002922 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 f84c 	bl	800293c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a8:	f7ff ff46 	bl	8002738 <FLASH_WaitForLastOperation>
 80028ac:	4603      	mov	r3, r0
 80028ae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_FLASHEx_Erase+0xd4>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_FLASHEx_Erase+0xd4>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6113      	str	r3, [r2, #16]
 80028bc:	e031      	b.n	8002922 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028c2:	f7ff ff39 	bl	8002738 <FLASH_WaitForLastOperation>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d12a      	bne.n	8002922 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295
 80028d2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	e019      	b.n	8002910 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028dc:	68b8      	ldr	r0, [r7, #8]
 80028de:	f000 f849 	bl	8002974 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028e6:	f7ff ff27 	bl	8002738 <FLASH_WaitForLastOperation>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_FLASHEx_Erase+0xd4>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_FLASHEx_Erase+0xd4>)
 80028f4:	f023 0302 	bic.w	r3, r3, #2
 80028f8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	601a      	str	r2, [r3, #0]
            break;
 8002906:	e00c      	b.n	8002922 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800290e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	029a      	lsls	r2, r3, #10
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3dc      	bcc.n	80028dc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_FLASHEx_Erase+0xd0>)
 8002924:	2200      	movs	r2, #0
 8002926:	761a      	strb	r2, [r3, #24]

  return status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200009f0 	.word	0x200009f0
 8002938:	40022000 	.word	0x40022000

0800293c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <FLASH_MassErase+0x30>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <FLASH_MassErase+0x34>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <FLASH_MassErase+0x34>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <FLASH_MassErase+0x34>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <FLASH_MassErase+0x34>)
 800295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002960:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	200009f0 	.word	0x200009f0
 8002970:	40022000 	.word	0x40022000

08002974 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <FLASH_PageErase+0x38>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <FLASH_PageErase+0x3c>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <FLASH_PageErase+0x3c>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <FLASH_PageErase+0x3c>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <FLASH_PageErase+0x3c>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <FLASH_PageErase+0x3c>)
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200009f0 	.word	0x200009f0
 80029b0:	40022000 	.word	0x40022000

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b08b      	sub	sp, #44	; 0x2c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c6:	e169      	b.n	8002c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029c8:	2201      	movs	r2, #1
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	f040 8158 	bne.w	8002c96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a9a      	ldr	r2, [pc, #616]	; (8002c54 <HAL_GPIO_Init+0x2a0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d05e      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
 80029f0:	4a98      	ldr	r2, [pc, #608]	; (8002c54 <HAL_GPIO_Init+0x2a0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d875      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 80029f6:	4a98      	ldr	r2, [pc, #608]	; (8002c58 <HAL_GPIO_Init+0x2a4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d058      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
 80029fc:	4a96      	ldr	r2, [pc, #600]	; (8002c58 <HAL_GPIO_Init+0x2a4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d86f      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 8002a02:	4a96      	ldr	r2, [pc, #600]	; (8002c5c <HAL_GPIO_Init+0x2a8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d052      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
 8002a08:	4a94      	ldr	r2, [pc, #592]	; (8002c5c <HAL_GPIO_Init+0x2a8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d869      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 8002a0e:	4a94      	ldr	r2, [pc, #592]	; (8002c60 <HAL_GPIO_Init+0x2ac>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04c      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
 8002a14:	4a92      	ldr	r2, [pc, #584]	; (8002c60 <HAL_GPIO_Init+0x2ac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d863      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 8002a1a:	4a92      	ldr	r2, [pc, #584]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d046      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
 8002a20:	4a90      	ldr	r2, [pc, #576]	; (8002c64 <HAL_GPIO_Init+0x2b0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d85d      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	d82a      	bhi.n	8002a80 <HAL_GPIO_Init+0xcc>
 8002a2a:	2b12      	cmp	r3, #18
 8002a2c:	d859      	bhi.n	8002ae2 <HAL_GPIO_Init+0x12e>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <HAL_GPIO_Init+0x80>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002aaf 	.word	0x08002aaf
 8002a38:	08002a89 	.word	0x08002a89
 8002a3c:	08002a9b 	.word	0x08002a9b
 8002a40:	08002add 	.word	0x08002add
 8002a44:	08002ae3 	.word	0x08002ae3
 8002a48:	08002ae3 	.word	0x08002ae3
 8002a4c:	08002ae3 	.word	0x08002ae3
 8002a50:	08002ae3 	.word	0x08002ae3
 8002a54:	08002ae3 	.word	0x08002ae3
 8002a58:	08002ae3 	.word	0x08002ae3
 8002a5c:	08002ae3 	.word	0x08002ae3
 8002a60:	08002ae3 	.word	0x08002ae3
 8002a64:	08002ae3 	.word	0x08002ae3
 8002a68:	08002ae3 	.word	0x08002ae3
 8002a6c:	08002ae3 	.word	0x08002ae3
 8002a70:	08002ae3 	.word	0x08002ae3
 8002a74:	08002ae3 	.word	0x08002ae3
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002aa5 	.word	0x08002aa5
 8002a80:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <HAL_GPIO_Init+0x2b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a86:	e02c      	b.n	8002ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	623b      	str	r3, [r7, #32]
          break;
 8002a8e:	e029      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	3304      	adds	r3, #4
 8002a96:	623b      	str	r3, [r7, #32]
          break;
 8002a98:	e024      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	623b      	str	r3, [r7, #32]
          break;
 8002aa2:	e01f      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	623b      	str	r3, [r7, #32]
          break;
 8002aac:	e01a      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e013      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	611a      	str	r2, [r3, #16]
          break;
 8002ace:	e009      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	615a      	str	r2, [r3, #20]
          break;
 8002ada:	e003      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
          break;
 8002ae0:	e000      	b.n	8002ae4 <HAL_GPIO_Init+0x130>
          break;
 8002ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2bff      	cmp	r3, #255	; 0xff
 8002ae8:	d801      	bhi.n	8002aee <HAL_GPIO_Init+0x13a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	e001      	b.n	8002af2 <HAL_GPIO_Init+0x13e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2bff      	cmp	r3, #255	; 0xff
 8002af8:	d802      	bhi.n	8002b00 <HAL_GPIO_Init+0x14c>
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	e002      	b.n	8002b06 <HAL_GPIO_Init+0x152>
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	3b08      	subs	r3, #8
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	6a39      	ldr	r1, [r7, #32]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	431a      	orrs	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80b1 	beq.w	8002c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b34:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <HAL_GPIO_Init+0x2b8>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x2b8>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <HAL_GPIO_Init+0x2b8>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b4c:	4a48      	ldr	r2, [pc, #288]	; (8002c70 <HAL_GPIO_Init+0x2bc>)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <HAL_GPIO_Init+0x2c0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_GPIO_Init+0x1ec>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <HAL_GPIO_Init+0x2c4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00d      	beq.n	8002b9c <HAL_GPIO_Init+0x1e8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3e      	ldr	r2, [pc, #248]	; (8002c7c <HAL_GPIO_Init+0x2c8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <HAL_GPIO_Init+0x1e4>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <HAL_GPIO_Init+0x2cc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_GPIO_Init+0x1e0>
 8002b90:	2303      	movs	r3, #3
 8002b92:	e006      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e004      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e002      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_GPIO_Init+0x1ee>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	f002 0203 	and.w	r2, r2, #3
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4093      	lsls	r3, r2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bb2:	492f      	ldr	r1, [pc, #188]	; (8002c70 <HAL_GPIO_Init+0x2bc>)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	492c      	ldr	r1, [pc, #176]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4928      	ldr	r1, [pc, #160]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	491e      	ldr	r1, [pc, #120]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	4918      	ldr	r1, [pc, #96]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	4914      	ldr	r1, [pc, #80]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d021      	beq.n	8002c88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
 8002c50:	e021      	b.n	8002c96 <HAL_GPIO_Init+0x2e2>
 8002c52:	bf00      	nop
 8002c54:	10320000 	.word	0x10320000
 8002c58:	10310000 	.word	0x10310000
 8002c5c:	10220000 	.word	0x10220000
 8002c60:	10210000 	.word	0x10210000
 8002c64:	10120000 	.word	0x10120000
 8002c68:	10110000 	.word	0x10110000
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010800 	.word	0x40010800
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	40011400 	.word	0x40011400
 8002c84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	4909      	ldr	r1, [pc, #36]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3301      	adds	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f47f ae8e 	bne.w	80029c8 <HAL_GPIO_Init+0x14>
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	372c      	adds	r7, #44	; 0x2c
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e001      	b.n	8002cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	807b      	strh	r3, [r7, #2]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cfa:	787b      	ldrb	r3, [r7, #1]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d06:	e003      	b.n	8002d10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	041a      	lsls	r2, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fbac 	bl	8000498 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40010400 	.word	0x40010400

08002d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e12b      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fc18 	bl	80005a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db0:	f002 fca6 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a81      	ldr	r2, [pc, #516]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d807      	bhi.n	8002dd0 <HAL_I2C_Init+0x84>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a80      	ldr	r2, [pc, #512]	; (8002fc4 <HAL_I2C_Init+0x278>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bf94      	ite	ls
 8002dc8:	2301      	movls	r3, #1
 8002dca:	2300      	movhi	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e006      	b.n	8002dde <HAL_I2C_Init+0x92>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a7d      	ldr	r2, [pc, #500]	; (8002fc8 <HAL_I2C_Init+0x27c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0e7      	b.n	8002fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <HAL_I2C_Init+0x280>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9b      	lsrs	r3, r3, #18
 8002df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d802      	bhi.n	8002e20 <HAL_I2C_Init+0xd4>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e009      	b.n	8002e34 <HAL_I2C_Init+0xe8>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_I2C_Init+0x284>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	3301      	adds	r3, #1
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	495c      	ldr	r1, [pc, #368]	; (8002fc0 <HAL_I2C_Init+0x274>)
 8002e50:	428b      	cmp	r3, r1
 8002e52:	d819      	bhi.n	8002e88 <HAL_I2C_Init+0x13c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e59      	subs	r1, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e62:	1c59      	adds	r1, r3, #1
 8002e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e68:	400b      	ands	r3, r1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_I2C_Init+0x138>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1e59      	subs	r1, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	e051      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e04f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_I2C_Init+0x168>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e012      	b.n	8002eda <HAL_I2C_Init+0x18e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x196>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e022      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <HAL_I2C_Init+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e58      	subs	r0, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	440b      	add	r3, r1
 8002ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Init+0x1dc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6809      	ldr	r1, [r1, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6911      	ldr	r1, [r2, #16]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	000186a0 	.word	0x000186a0
 8002fc4:	001e847f 	.word	0x001e847f
 8002fc8:	003d08ff 	.word	0x003d08ff
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fee:	f7ff f9db 	bl	80023a8 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	f040 80d9 	bne.w	80031b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2319      	movs	r3, #25
 8003008:	2201      	movs	r2, #1
 800300a:	496d      	ldr	r1, [pc, #436]	; (80031c0 <HAL_I2C_Mem_Write+0x1ec>)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f971 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
 800301a:	e0cc      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_I2C_Mem_Write+0x56>
 8003026:	2302      	movs	r3, #2
 8003028:	e0c5      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d007      	beq.n	8003050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2221      	movs	r2, #33	; 0x21
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <HAL_I2C_Mem_Write+0x1f0>)
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003092:	88f8      	ldrh	r0, [r7, #6]
 8003094:	893a      	ldrh	r2, [r7, #8]
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	4603      	mov	r3, r0
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f890 	bl	80031c8 <I2C_RequestMemoryWrite>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d052      	beq.n	8003154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e081      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f9f2 	bl	80034a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <HAL_I2C_Mem_Write+0x180>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1aa      	bne.n	80030b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f9de 	bl	8003522 <I2C_WaitOnBTFFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e016      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	00100002 	.word	0x00100002
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	460b      	mov	r3, r1
 80031dc:	813b      	strh	r3, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f878 	bl	80032f4 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d103      	bne.n	8003222 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e05f      	b.n	80032e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003234:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	492d      	ldr	r1, [pc, #180]	; (80032f0 <I2C_RequestMemoryWrite+0x128>)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8b0 	bl	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e04c      	b.n	80032e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	6a39      	ldr	r1, [r7, #32]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f91a 	bl	80034a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b04      	cmp	r3, #4
 8003278:	d107      	bne.n	800328a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e02b      	b.n	80032e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]
 800329e:	e021      	b.n	80032e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	6a39      	ldr	r1, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f8f4 	bl	80034a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d107      	bne.n	80032d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e005      	b.n	80032e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	00010002 	.word	0x00010002

080032f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003304:	e025      	b.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d021      	beq.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7ff f84b 	bl	80023a8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d116      	bne.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e023      	b.n	800339a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d10d      	bne.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	e00c      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	429a      	cmp	r2, r3
 8003396:	d0b6      	beq.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b0:	e051      	b.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c0:	d123      	bne.n	800340a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e046      	b.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d021      	beq.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fe ffc9 	bl	80023a8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d116      	bne.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e020      	b.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e00b      	b.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d18d      	bne.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ac:	e02d      	b.n	800350a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f878 	bl	80035a4 <I2C_IsAcknowledgeFailed>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e02d      	b.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d021      	beq.n	800350a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe ff6f 	bl	80023a8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e007      	b.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b80      	cmp	r3, #128	; 0x80
 8003516:	d1ca      	bne.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800352e:	e02d      	b.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f837 	bl	80035a4 <I2C_IsAcknowledgeFailed>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e02d      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d021      	beq.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7fe ff2e 	bl	80023a8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e007      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d1ca      	bne.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d11b      	bne.n	80035f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af06      	add	r7, sp, #24
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0fd      	b.n	800380e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 fa88 	bl	8009b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f002 f96f 	bl	800591c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	687e      	ldr	r6, [r7, #4]
 8003646:	466d      	mov	r5, sp
 8003648:	f106 0410 	add.w	r4, r6, #16
 800364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	1d33      	adds	r3, r6, #4
 8003656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f002 f939 	bl	80058d0 <USB_CoreInit>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ce      	b.n	800380e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f002 f96a 	bl	8005950 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e04c      	b.n	800371c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	3301      	adds	r3, #1
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	b298      	uxth	r0, r3
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	3336      	adds	r3, #54	; 0x36
 80036c0:	4602      	mov	r2, r0
 80036c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	3303      	adds	r3, #3
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	3338      	adds	r3, #56	; 0x38
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	333c      	adds	r3, #60	; 0x3c
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	3340      	adds	r3, #64	; 0x40
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3301      	adds	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3ad      	bcc.n	8003682 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e044      	b.n	80037b6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	440b      	add	r3, r1
 800373a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	440b      	add	r3, r1
 8003766:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3301      	adds	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3b5      	bcc.n	800372c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	687e      	ldr	r6, [r7, #4]
 80037c8:	466d      	mov	r5, sp
 80037ca:	f106 0410 	add.w	r4, r6, #16
 80037ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	1d33      	adds	r3, r6, #4
 80037d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037da:	6838      	ldr	r0, [r7, #0]
 80037dc:	f002 f8c4 	bl	8005968 <USB_DevInit>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00d      	b.n	800380e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fd76 	bl	80082f8 <USB_DevDisconnect>

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003816 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_PCD_Start+0x16>
 8003828:	2302      	movs	r3, #2
 800382a:	e016      	b.n	800385a <HAL_PCD_Start+0x44>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 f859 	bl	80058f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800383e:	2101      	movs	r1, #1
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f006 fbca 	bl	8009fda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f004 fd4a 	bl	80082e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b088      	sub	sp, #32
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fd4c 	bl	800830c <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d102      	bne.n	8003886 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb48 	bl	8003f16 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fd3e 	bl	800830c <USB_ReadInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d112      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ae:	b292      	uxth	r2, r2
 80038b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f006 f9bc 	bl	8009c32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038ba:	2100      	movs	r1, #0
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f923 	bl	8003b08 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fd20 	bl	800830c <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d6:	d10b      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ea:	b292      	uxth	r2, r2
 80038ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fd09 	bl	800830c <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003904:	d10b      	bne.n	800391e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003918:	b292      	uxth	r2, r2
 800391a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fcf2 	bl	800830c <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d126      	bne.n	8003982 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	b292      	uxth	r2, r2
 8003948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0208 	bic.w	r2, r2, #8
 800395e:	b292      	uxth	r2, r2
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f006 f99d 	bl	8009ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800397c:	b292      	uxth	r2, r2
 800397e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fcc0 	bl	800830c <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003996:	f040 8082 	bne.w	8003a9e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e010      	b.n	80039c2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	7ffb      	ldrb	r3, [r7, #31]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
 80039ae:	8812      	ldrh	r2, [r2, #0]
 80039b0:	b292      	uxth	r2, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	3320      	adds	r3, #32
 80039b6:	443b      	add	r3, r7
 80039b8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	3301      	adds	r3, #1
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	d9eb      	bls.n	80039a0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80039f8:	bf00      	nop
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f6      	beq.n	80039fa <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e00f      	b.n	8003a4a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	4611      	mov	r1, r2
 8003a32:	7ffa      	ldrb	r2, [r7, #31]
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	440a      	add	r2, r1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	443b      	add	r3, r7
 8003a3e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003a42:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
 8003a46:	3301      	adds	r3, #1
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	7ffb      	ldrb	r3, [r7, #31]
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	d9ec      	bls.n	8003a2a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	b292      	uxth	r2, r2
 8003a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0204 	orr.w	r2, r2, #4
 8003a92:	b292      	uxth	r2, r2
 8003a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f006 f8e9 	bl	8009c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fc32 	bl	800830c <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f006 f8a2 	bl	8009c16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fc18 	bl	800830c <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	d10b      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afa:	b292      	uxth	r2, r2
 8003afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_PCD_SetAddress+0x1a>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e013      	b.n	8003b4a <HAL_PCD_SetAddress+0x42>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fbbf 	bl	80082be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4603      	mov	r3, r0
 8003b62:	70fb      	strb	r3, [r7, #3]
 8003b64:	460b      	mov	r3, r1
 8003b66:	803b      	strh	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da0e      	bge.n	8003b96 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	705a      	strb	r2, [r3, #1]
 8003b94:	e00e      	b.n	8003bb4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 0207 	and.w	r2, r3, #7
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bc0:	883a      	ldrh	r2, [r7, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bde:	78bb      	ldrb	r3, [r7, #2]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_EP_Open+0xa6>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e00e      	b.n	8003c16 <HAL_PCD_EP_Open+0xc4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fece 	bl	80059a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da0e      	bge.n	8003c50 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	705a      	strb	r2, [r3, #1]
 8003c4e:	e00e      	b.n	8003c6e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_PCD_EP_Close+0x6a>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e00e      	b.n	8003ca6 <HAL_PCD_EP_Close+0x88>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 f9f0 	bl	800607c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 0207 	and.w	r2, r3, #7
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fba2 	bl	8006454 <USB_EPStartXfer>
 8003d10:	e005      	b.n	8003d1e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 fb9b 	bl	8006454 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	460b      	mov	r3, r1
 8003d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2201      	movs	r2, #1
 8003d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fb5f 	bl	8006454 <USB_EPStartXfer>
 8003d96:	e005      	b.n	8003da4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fb58 	bl	8006454 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 0207 	and.w	r2, r3, #7
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d901      	bls.n	8003dcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04c      	b.n	8003e66 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da0e      	bge.n	8003df2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	705a      	strb	r2, [r3, #1]
 8003df0:	e00c      	b.n	8003e0c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_PCD_EP_SetStall+0x7e>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e01c      	b.n	8003e66 <HAL_PCD_EP_SetStall+0xb8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f004 f942 	bl	80080c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d108      	bne.n	8003e5c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f004 fa67 	bl	800832a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d901      	bls.n	8003e8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e040      	b.n	8003f0e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0e      	bge.n	8003eb2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	705a      	strb	r2, [r3, #1]
 8003eb0:	e00e      	b.n	8003ed0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 0207 	and.w	r2, r3, #7
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_PCD_EP_ClrStall+0x82>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e00e      	b.n	8003f0e <HAL_PCD_EP_ClrStall+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 f930 	bl	8008164 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08e      	sub	sp, #56	; 0x38
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f1e:	e2ec      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f28:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003f36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 8161 	bne.w	8004202 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d152      	bne.n	8003ff0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	81fb      	strh	r3, [r7, #14]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3328      	adds	r3, #40	; 0x28
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	441a      	add	r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f005 fe16 	bl	8009be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 829b 	beq.w	80044fa <PCD_EP_ISR_Handler+0x5e4>
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 8296 	bne.w	80044fa <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fee:	e284      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004006:	2b00      	cmp	r3, #0
 8004008:	d034      	beq.n	8004074 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	3306      	adds	r3, #6
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004048:	b29b      	uxth	r3, r3
 800404a:	f004 f9be 	bl	80083ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	f640 738f 	movw	r3, #3983	; 0xf8f
 800405a:	4013      	ands	r3, r2
 800405c:	823b      	strh	r3, [r7, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	8a3a      	ldrh	r2, [r7, #16]
 8004064:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004068:	b292      	uxth	r2, r2
 800406a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f005 fd8b 	bl	8009b88 <HAL_PCD_SetupStageCallback>
 8004072:	e242      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004074:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004078:	2b00      	cmp	r3, #0
 800407a:	f280 823e 	bge.w	80044fa <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	f640 738f 	movw	r3, #3983	; 0xf8f
 800408a:	4013      	ands	r3, r2
 800408c:	83bb      	strh	r3, [r7, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	8bba      	ldrh	r2, [r7, #28]
 8004094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004098:	b292      	uxth	r2, r2
 800409a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	3306      	adds	r3, #6
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d019      	beq.n	8004104 <PCD_EP_ISR_Handler+0x1ee>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	6959      	ldr	r1, [r3, #20]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f004 f96e 	bl	80083ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	441a      	add	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040fc:	2100      	movs	r1, #0
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f005 fd54 	bl	8009bac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 81f2 	bne.w	80044fa <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004124:	b29b      	uxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4413      	add	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d112      	bne.n	8004164 <PCD_EP_ISR_Handler+0x24e>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004148:	b29a      	uxth	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415c:	b29a      	uxth	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	e02f      	b.n	80041c4 <PCD_EP_ISR_Handler+0x2ae>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b3e      	cmp	r3, #62	; 0x3e
 800416a:	d813      	bhi.n	8004194 <PCD_EP_ISR_Handler+0x27e>
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <PCD_EP_ISR_Handler+0x270>
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3301      	adds	r3, #1
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	b29b      	uxth	r3, r3
 800418a:	029b      	lsls	r3, r3, #10
 800418c:	b29a      	uxth	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e017      	b.n	80041c4 <PCD_EP_ISR_Handler+0x2ae>
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	633b      	str	r3, [r7, #48]	; 0x30
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <PCD_EP_ISR_Handler+0x298>
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	3b01      	subs	r3, #1
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041be:	b29a      	uxth	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	827b      	strh	r3, [r7, #18]
 80041d6:	8a7b      	ldrh	r3, [r7, #18]
 80041d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041dc:	827b      	strh	r3, [r7, #18]
 80041de:	8a7b      	ldrh	r3, [r7, #18]
 80041e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041e4:	827b      	strh	r3, [r7, #18]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	8a7b      	ldrh	r3, [r7, #18]
 80041ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]
 8004200:	e17b      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004214:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004218:	2b00      	cmp	r3, #0
 800421a:	f280 80ea 	bge.w	80043f2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29a      	uxth	r2, r3
 8004230:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004234:	4013      	ands	r3, r2
 8004236:	853b      	strh	r3, [r7, #40]	; 0x28
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004248:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800424c:	b292      	uxth	r2, r2
 800424e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004250:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4413      	add	r3, r2
 8004264:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	7b1b      	ldrb	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d122      	bne.n	80042b4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004276:	b29b      	uxth	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	3306      	adds	r3, #6
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004296:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8087 	beq.w	80043ae <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	6959      	ldr	r1, [r3, #20]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	88da      	ldrh	r2, [r3, #6]
 80042ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042ae:	f004 f88c 	bl	80083ca <USB_ReadPMA>
 80042b2:	e07c      	b.n	80043ae <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d108      	bne.n	80042ce <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80042bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042be:	461a      	mov	r2, r3
 80042c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f927 	bl	8004516 <HAL_PCD_EP_DB_Receive>
 80042c8:	4603      	mov	r3, r0
 80042ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80042cc:	e06f      	b.n	80043ae <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d021      	beq.n	800436c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	3302      	adds	r3, #2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004350:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02a      	beq.n	80043ae <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	6959      	ldr	r1, [r3, #20]
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	891a      	ldrh	r2, [r3, #8]
 8004364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004366:	f004 f830 	bl	80083ca <USB_ReadPMA>
 800436a:	e020      	b.n	80043ae <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	3306      	adds	r3, #6
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004394:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004396:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6959      	ldr	r1, [r3, #20]
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	895a      	ldrh	r2, [r3, #10]
 80043a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043aa:	f004 f80e 	bl	80083ca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043b4:	441a      	add	r2, r3
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043c0:	441a      	add	r2, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <PCD_EP_ISR_Handler+0x4c2>
 80043ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d206      	bcs.n	80043e6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f005 fbe4 	bl	8009bac <HAL_PCD_DataOutStageCallback>
 80043e4:	e005      	b.n	80043f2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 f831 	bl	8006454 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d07e      	beq.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80043fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	843b      	strh	r3, [r7, #32]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	8c3b      	ldrh	r3, [r7, #32]
 800443c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	78db      	ldrb	r3, [r3, #3]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d00c      	beq.n	800446a <PCD_EP_ISR_Handler+0x554>
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	78db      	ldrb	r3, [r3, #3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800445c:	2b02      	cmp	r3, #2
 800445e:	d146      	bne.n	80044ee <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d141      	bne.n	80044ee <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	3302      	adds	r3, #2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004492:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	8bfb      	ldrh	r3, [r7, #30]
 800449a:	429a      	cmp	r2, r3
 800449c:	d906      	bls.n	80044ac <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	8bfb      	ldrh	r3, [r7, #30]
 80044a4:	1ad2      	subs	r2, r2, r3
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	619a      	str	r2, [r3, #24]
 80044aa:	e002      	b.n	80044b2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	2200      	movs	r2, #0
 80044b0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f005 fb8e 	bl	8009be2 <HAL_PCD_DataInStageCallback>
 80044c6:	e018      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	8bfb      	ldrh	r3, [r7, #30]
 80044ce:	441a      	add	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	8bfb      	ldrh	r3, [r7, #30]
 80044da:	441a      	add	r2, r3
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 ffb4 	bl	8006454 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80044ec:	e005      	b.n	80044fa <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044f0:	461a      	mov	r2, r3
 80044f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f91b 	bl	8004730 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004502:	b29b      	uxth	r3, r3
 8004504:	b21b      	sxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	f6ff ad0a 	blt.w	8003f20 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3738      	adds	r7, #56	; 0x38
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07e      	beq.n	800462c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	3302      	adds	r3, #2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004556:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	429a      	cmp	r2, r3
 8004560:	d306      	bcc.n	8004570 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	1ad2      	subs	r2, r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	619a      	str	r2, [r3, #24]
 800456e:	e002      	b.n	8004576 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d123      	bne.n	80045c6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	833b      	strh	r3, [r7, #24]
 800459a:	8b3b      	ldrh	r3, [r7, #24]
 800459c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a0:	833b      	strh	r3, [r7, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8b3b      	ldrh	r3, [r7, #24]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	82fb      	strh	r3, [r7, #22]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	8afb      	ldrh	r3, [r7, #22]
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004610:	8b7b      	ldrh	r3, [r7, #26]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8087 	beq.w	8004726 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6959      	ldr	r1, [r3, #20]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	891a      	ldrh	r2, [r3, #8]
 8004624:	8b7b      	ldrh	r3, [r7, #26]
 8004626:	f003 fed0 	bl	80083ca <USB_ReadPMA>
 800462a:	e07c      	b.n	8004726 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	3306      	adds	r3, #6
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004654:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	429a      	cmp	r2, r3
 800465e:	d306      	bcc.n	800466e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	8b7b      	ldrh	r3, [r7, #26]
 8004666:	1ad2      	subs	r2, r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	619a      	str	r2, [r3, #24]
 800466c:	e002      	b.n	8004674 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d123      	bne.n	80046c4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	83fb      	strh	r3, [r7, #30]
 8004698:	8bfb      	ldrh	r3, [r7, #30]
 800469a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800469e:	83fb      	strh	r3, [r7, #30]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	8bfb      	ldrh	r3, [r7, #30]
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11f      	bne.n	800470e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	83bb      	strh	r3, [r7, #28]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	8bbb      	ldrh	r3, [r7, #28]
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800470e:	8b7b      	ldrh	r3, [r7, #26]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	895a      	ldrh	r2, [r3, #10]
 8004720:	8b7b      	ldrh	r3, [r7, #26]
 8004722:	f003 fe52 	bl	80083ca <USB_ReadPMA>
    }
  }

  return count;
 8004726:	8b7b      	ldrh	r3, [r7, #26]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0a2      	sub	sp, #136	; 0x88
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 81c7 	beq.w	8004ad8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	3302      	adds	r3, #2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800477e:	429a      	cmp	r2, r3
 8004780:	d907      	bls.n	8004792 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	619a      	str	r2, [r3, #24]
 8004790:	e002      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 80b9 	bne.w	8004914 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d126      	bne.n	80047f8 <HAL_PCD_EP_DB_Transmit+0xc8>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	4413      	add	r3, r2
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	011a      	lsls	r2, r3, #4
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e01a      	b.n	800482e <HAL_PCD_EP_DB_Transmit+0xfe>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d116      	bne.n	800482e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	4413      	add	r3, r2
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	4413      	add	r3, r2
 8004822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2200      	movs	r2, #0
 800482c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d126      	bne.n	800488a <HAL_PCD_EP_DB_Transmit+0x15a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4413      	add	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4413      	add	r3, r2
 800485e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486e:	b29a      	uxth	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004882:	b29a      	uxth	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e017      	b.n	80048ba <HAL_PCD_EP_DB_Transmit+0x18a>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d113      	bne.n	80048ba <HAL_PCD_EP_DB_Transmit+0x18a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489a:	b29b      	uxth	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	4413      	add	r3, r2
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	011a      	lsls	r2, r3, #4
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	4413      	add	r3, r2
 80048ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2200      	movs	r2, #0
 80048b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f005 f98e 	bl	8009be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 82d4 	beq.w	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	827b      	strh	r3, [r7, #18]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8a7b      	ldrh	r3, [r7, #18]
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e2b2      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004968:	2b01      	cmp	r3, #1
 800496a:	f040 8286 	bne.w	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004976:	441a      	add	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004984:	441a      	add	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d309      	bcc.n	80049aa <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	e015      	b.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80049b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049c0:	e009      	b.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d155      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x35a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	4413      	add	r3, r2
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d112      	bne.n	8004a32 <HAL_PCD_EP_DB_Transmit+0x302>
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	e047      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	2b3e      	cmp	r3, #62	; 0x3e
 8004a36:	d811      	bhi.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x32c>
 8004a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_PCD_EP_DB_Transmit+0x31e>
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	e032      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x342>
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e01b      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d117      	bne.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x392>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	643b      	str	r3, [r7, #64]	; 0x40
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	4413      	add	r3, r2
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	011a      	lsls	r2, r3, #4
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6959      	ldr	r1, [r3, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	891a      	ldrh	r2, [r3, #8]
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f003 fc35 	bl	8008340 <USB_WritePMA>
 8004ad6:	e1d0      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	3306      	adds	r3, #6
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d307      	bcc.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	619a      	str	r2, [r3, #24]
 8004b1e:	e002      	b.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 80c4 	bne.w	8004cb8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d126      	bne.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x456>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	4413      	add	r3, r2
 8004b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011a      	lsls	r2, r3, #4
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	4413      	add	r3, r2
 8004b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e01a      	b.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d116      	bne.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x48c>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	677b      	str	r3, [r7, #116]	; 0x74
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba2:	4413      	add	r3, r2
 8004ba4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	011a      	lsls	r2, r3, #4
 8004bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bb4:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb8:	2200      	movs	r2, #0
 8004bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d12f      	bne.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004be2:	4413      	add	r3, r2
 8004be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	011a      	lsls	r2, r3, #4
 8004bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e017      	b.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d113      	bne.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x52a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c40:	4413      	add	r3, r2
 8004c42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011a      	lsls	r2, r3, #4
 8004c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c56:	2200      	movs	r2, #0
 8004c58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f004 ffbe 	bl	8009be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8104 	bne.w	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]
 8004cb6:	e0e0      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d121      	bne.n	8004d06 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 80b4 	bne.w	8004e7a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d1a:	441a      	add	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d28:	441a      	add	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d309      	bcc.n	8004d4e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	621a      	str	r2, [r3, #32]
 8004d4c:	e015      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d107      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d5a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d64:	e009      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d155      	bne.n	8004e34 <HAL_PCD_EP_DB_Transmit+0x704>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9c:	4413      	add	r3, r2
 8004d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	011a      	lsls	r2, r3, #4
 8004da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da8:	4413      	add	r3, r2
 8004daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d112      	bne.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e044      	b.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x736>
 8004ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dde:	2b3e      	cmp	r3, #62	; 0x3e
 8004de0:	d811      	bhi.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
 8004de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df4:	3301      	adds	r3, #1
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e02f      	b.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	029b      	lsls	r3, r3, #10
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e018      	b.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d114      	bne.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x736>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4a:	4413      	add	r3, r2
 8004e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	011a      	lsls	r2, r3, #4
 8004e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e56:	4413      	add	r3, r2
 8004e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e64:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6959      	ldr	r1, [r3, #20]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	895a      	ldrh	r2, [r3, #10]
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f003 fa63 	bl	8008340 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	823b      	strh	r3, [r7, #16]
 8004e96:	8a3b      	ldrh	r3, [r7, #16]
 8004e98:	f083 0310 	eor.w	r3, r3, #16
 8004e9c:	823b      	strh	r3, [r7, #16]
 8004e9e:	8a3b      	ldrh	r3, [r7, #16]
 8004ea0:	f083 0320 	eor.w	r3, r3, #32
 8004ea4:	823b      	strh	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	8a3b      	ldrh	r3, [r7, #16]
 8004eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3788      	adds	r7, #136	; 0x88
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ef2:	897b      	ldrh	r3, [r7, #10]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e009      	b.n	8004f1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f0a:	897a      	ldrh	r2, [r7, #10]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	80da      	strh	r2, [r3, #6]
 8004f32:	e00b      	b.n	8004f4c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2201      	movs	r2, #1
 8004f38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e272      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8087 	beq.w	8005086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f78:	4b92      	ldr	r3, [pc, #584]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d00c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f84:	4b8f      	ldr	r3, [pc, #572]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d112      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x5e>
 8004f90:	4b8c      	ldr	r3, [pc, #560]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d10b      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9e:	4b89      	ldr	r3, [pc, #548]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d06c      	beq.n	8005084 <HAL_RCC_OscConfig+0x12c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d168      	bne.n	8005084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e24c      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x76>
 8004fc0:	4b80      	ldr	r3, [pc, #512]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7f      	ldr	r2, [pc, #508]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e02e      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x98>
 8004fd6:	4b7b      	ldr	r3, [pc, #492]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7a      	ldr	r2, [pc, #488]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b78      	ldr	r3, [pc, #480]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a77      	ldr	r2, [pc, #476]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0xbc>
 8004ffa:	4b72      	ldr	r3, [pc, #456]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a71      	ldr	r2, [pc, #452]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6e      	ldr	r2, [pc, #440]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xd4>
 8005014:	4b6b      	ldr	r3, [pc, #428]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6a      	ldr	r2, [pc, #424]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b68      	ldr	r3, [pc, #416]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a67      	ldr	r2, [pc, #412]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fd f9b8 	bl	80023a8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7fd f9b4 	bl	80023a8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e200      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xe4>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd f9a4 	bl	80023a8 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fd f9a0 	bl	80023a8 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1ec      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b53      	ldr	r3, [pc, #332]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x10c>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d063      	beq.n	800515a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005092:	4b4c      	ldr	r3, [pc, #304]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800509e:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x18c>
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x176>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1c0      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4939      	ldr	r1, [pc, #228]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e2:	e03a      	b.n	800515a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ec:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f2:	f7fd f959 	bl	80023a8 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fa:	f7fd f955 	bl	80023a8 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e1a1      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4927      	ldr	r1, [pc, #156]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_RCC_OscConfig+0x270>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fd f938 	bl	80023a8 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7fd f934 	bl	80023a8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e180      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03a      	beq.n	80051dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d019      	beq.n	80051a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_RCC_OscConfig+0x274>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005174:	f7fd f918 	bl	80023a8 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517c:	f7fd f914 	bl	80023a8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e160      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCC_OscConfig+0x26c>)
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800519a:	2001      	movs	r0, #1
 800519c:	f000 fac4 	bl	8005728 <RCC_Delay>
 80051a0:	e01c      	b.n	80051dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <HAL_RCC_OscConfig+0x274>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7fd f8fe 	bl	80023a8 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ae:	e00f      	b.n	80051d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b0:	f7fd f8fa 	bl	80023a8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d908      	bls.n	80051d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e146      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	42420000 	.word	0x42420000
 80051cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	4b92      	ldr	r3, [pc, #584]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e9      	bne.n	80051b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a6 	beq.w	8005336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ee:	4b8b      	ldr	r3, [pc, #556]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4a87      	ldr	r2, [pc, #540]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005204:	61d3      	str	r3, [r2, #28]
 8005206:	4b85      	ldr	r3, [pc, #532]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b82      	ldr	r3, [pc, #520]	; (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d118      	bne.n	8005254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b7f      	ldr	r3, [pc, #508]	; (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7e      	ldr	r2, [pc, #504]	; (8005420 <HAL_RCC_OscConfig+0x4c8>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7fd f8bb 	bl	80023a8 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7fd f8b7 	bl	80023a8 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b64      	cmp	r3, #100	; 0x64
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e103      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	4b75      	ldr	r3, [pc, #468]	; (8005420 <HAL_RCC_OscConfig+0x4c8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0x312>
 800525c:	4b6f      	ldr	r3, [pc, #444]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a6e      	ldr	r2, [pc, #440]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6213      	str	r3, [r2, #32]
 8005268:	e02d      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x334>
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4a69      	ldr	r2, [pc, #420]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	6213      	str	r3, [r2, #32]
 800527e:	4b67      	ldr	r3, [pc, #412]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4a66      	ldr	r2, [pc, #408]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	6213      	str	r3, [r2, #32]
 800528a:	e01c      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b05      	cmp	r3, #5
 8005292:	d10c      	bne.n	80052ae <HAL_RCC_OscConfig+0x356>
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4a60      	ldr	r2, [pc, #384]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	6213      	str	r3, [r2, #32]
 80052a0:	4b5e      	ldr	r3, [pc, #376]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4a5d      	ldr	r2, [pc, #372]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6213      	str	r3, [r2, #32]
 80052ac:	e00b      	b.n	80052c6 <HAL_RCC_OscConfig+0x36e>
 80052ae:	4b5b      	ldr	r3, [pc, #364]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4a5a      	ldr	r2, [pc, #360]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6213      	str	r3, [r2, #32]
 80052ba:	4b58      	ldr	r3, [pc, #352]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4a57      	ldr	r2, [pc, #348]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	f023 0304 	bic.w	r3, r3, #4
 80052c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ce:	f7fd f86b 	bl	80023a8 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d4:	e00a      	b.n	80052ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d6:	f7fd f867 	bl	80023a8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0b1      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	4b4b      	ldr	r3, [pc, #300]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ee      	beq.n	80052d6 <HAL_RCC_OscConfig+0x37e>
 80052f8:	e014      	b.n	8005324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fa:	f7fd f855 	bl	80023a8 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fd f851 	bl	80023a8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e09b      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005318:	4b40      	ldr	r3, [pc, #256]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ee      	bne.n	8005302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4b3c      	ldr	r3, [pc, #240]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4a3b      	ldr	r2, [pc, #236]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8087 	beq.w	800544e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005340:	4b36      	ldr	r3, [pc, #216]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b08      	cmp	r3, #8
 800534a:	d061      	beq.n	8005410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d146      	bne.n	80053e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005354:	4b33      	ldr	r3, [pc, #204]	; (8005424 <HAL_RCC_OscConfig+0x4cc>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535a:	f7fd f825 	bl	80023a8 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005362:	f7fd f821 	bl	80023a8 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e06d      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005374:	4b29      	ldr	r3, [pc, #164]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f0      	bne.n	8005362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d108      	bne.n	800539c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	4921      	ldr	r1, [pc, #132]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800539c:	4b1f      	ldr	r3, [pc, #124]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a19      	ldr	r1, [r3, #32]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	430b      	orrs	r3, r1
 80053ae:	491b      	ldr	r1, [pc, #108]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCC_OscConfig+0x4cc>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fc fff5 	bl	80023a8 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fc fff1 	bl	80023a8 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e03d      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x46a>
 80053e0:	e035      	b.n	800544e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <HAL_RCC_OscConfig+0x4cc>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fc ffde 	bl	80023a8 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fc ffda 	bl	80023a8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e026      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_OscConfig+0x4c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x498>
 800540e:	e01e      	b.n	800544e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e019      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
 800541c:	40021000 	.word	0x40021000
 8005420:	40007000 	.word	0x40007000
 8005424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_OscConfig+0x500>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	429a      	cmp	r2, r3
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000

0800545c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0d0      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005470:	4b6a      	ldr	r3, [pc, #424]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d910      	bls.n	80054a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b67      	ldr	r3, [pc, #412]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	4965      	ldr	r1, [pc, #404]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b63      	ldr	r3, [pc, #396]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0b8      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b8:	4b59      	ldr	r3, [pc, #356]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a58      	ldr	r2, [pc, #352]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d0:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4a52      	ldr	r2, [pc, #328]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	494d      	ldr	r1, [pc, #308]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d040      	beq.n	800557c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d115      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e07f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551a:	4b41      	ldr	r3, [pc, #260]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e073      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552a:	4b3d      	ldr	r3, [pc, #244]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e06b      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4936      	ldr	r1, [pc, #216]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800554c:	f7fc ff2c 	bl	80023a8 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	e00a      	b.n	800556a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005554:	f7fc ff28 	bl	80023a8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e053      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 020c 	and.w	r2, r3, #12
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	429a      	cmp	r2, r3
 800557a:	d1eb      	bne.n	8005554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d210      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	4922      	ldr	r1, [pc, #136]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b20      	ldr	r3, [pc, #128]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e032      	b.n	8005612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4916      	ldr	r1, [pc, #88]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	490e      	ldr	r1, [pc, #56]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ea:	f000 f821 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	490a      	ldr	r1, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x1c8>)
 80055fc:	5ccb      	ldrb	r3, [r1, r3]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <HAL_RCC_ClockConfig+0x1cc>)
 8005604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCC_ClockConfig+0x1d0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fc fe8a 	bl	8002324 <HAL_InitTick>

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40022000 	.word	0x40022000
 8005620:	40021000 	.word	0x40021000
 8005624:	0800a1a8 	.word	0x0800a1a8
 8005628:	20000000 	.word	0x20000000
 800562c:	200000e0 	.word	0x200000e0

08005630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	b490      	push	{r4, r7}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <HAL_RCC_GetSysClockFreq+0xac>)
 8005638:	1d3c      	adds	r4, r7, #4
 800563a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800563c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005640:	f240 2301 	movw	r3, #513	; 0x201
 8005644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	2300      	movs	r3, #0
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b04      	cmp	r3, #4
 8005668:	d002      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x40>
 800566a:	2b08      	cmp	r3, #8
 800566c:	d003      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x46>
 800566e:	e02b      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005670:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005672:	623b      	str	r3, [r7, #32]
      break;
 8005674:	e02b      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	0c9b      	lsrs	r3, r3, #18
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3328      	adds	r3, #40	; 0x28
 8005680:	443b      	add	r3, r7
 8005682:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005686:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	0c5b      	lsrs	r3, r3, #17
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	3328      	adds	r3, #40	; 0x28
 800569e:	443b      	add	r3, r7
 80056a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056aa:	fb03 f202 	mul.w	r2, r3, r2
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	e004      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	623b      	str	r3, [r7, #32]
      break;
 80056c6:	e002      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056ca:	623b      	str	r3, [r7, #32]
      break;
 80056cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ce:	6a3b      	ldr	r3, [r7, #32]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3728      	adds	r7, #40	; 0x28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc90      	pop	{r4, r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	0800a15c 	.word	0x0800a15c
 80056e0:	40021000 	.word	0x40021000
 80056e4:	007a1200 	.word	0x007a1200
 80056e8:	003d0900 	.word	0x003d0900

080056ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <HAL_RCC_GetHCLKFreq+0x10>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	20000000 	.word	0x20000000

08005700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005704:	f7ff fff2 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000
 8005724:	0800a1b8 	.word	0x0800a1b8

08005728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <RCC_Delay+0x34>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <RCC_Delay+0x38>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	0a5b      	lsrs	r3, r3, #9
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005744:	bf00      	nop
  }
  while (Delay --);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	60fa      	str	r2, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f9      	bne.n	8005744 <RCC_Delay+0x1c>
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	20000000 	.word	0x20000000
 8005760:	10624dd3 	.word	0x10624dd3

08005764 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d07d      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005780:	2300      	movs	r3, #0
 8005782:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005784:	4b4f      	ldr	r3, [pc, #316]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005790:	4b4c      	ldr	r3, [pc, #304]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4a4b      	ldr	r2, [pc, #300]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579a:	61d3      	str	r3, [r2, #28]
 800579c:	4b49      	ldr	r3, [pc, #292]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4b46      	ldr	r3, [pc, #280]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d118      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b8:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a42      	ldr	r2, [pc, #264]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c4:	f7fc fdf0 	bl	80023a8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ca:	e008      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057cc:	f7fc fdec 	bl	80023a8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e06d      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b3a      	ldr	r3, [pc, #232]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d02e      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d027      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005808:	4b2e      	ldr	r3, [pc, #184]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005810:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005818:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800581e:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fc fdbb 	bl	80023a8 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fc fdb7 	bl	80023a8 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e036      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4917      	ldr	r1, [pc, #92]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	4313      	orrs	r3, r2
 8005868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005870:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005888:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	490b      	ldr	r1, [pc, #44]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	4313      	orrs	r3, r2
 8005898:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	4904      	ldr	r1, [pc, #16]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
 80058cc:	42420440 	.word	0x42420440

080058d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 0014 	add.w	r0, r7, #20
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	b004      	add	sp, #16
 80058ee:	4770      	bx	lr

080058f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005900:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005904:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005924:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005928:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	b29b      	uxth	r3, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	b29b      	uxth	r3, r3
 800593a:	4013      	ands	r3, r2
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005968:	b084      	sub	sp, #16
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	f107 0014 	add.w	r0, r7, #20
 8005976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	b004      	add	sp, #16
 80059a6:	4770      	bx	lr

080059a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b09b      	sub	sp, #108	; 0x6c
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d81f      	bhi.n	8005a1a <USB_ActivateEndpoint+0x72>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <USB_ActivateEndpoint+0x38>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a23 	.word	0x08005a23
 80059ec:	080059ff 	.word	0x080059ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059fc:	e012      	b.n	8005a24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a0a:	e00b      	b.n	8005a24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a18:	e004      	b.n	8005a24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005a20:	e000      	b.n	8005a24 <USB_ActivateEndpoint+0x7c>
      break;
 8005a22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	441a      	add	r2, r3
 8005a74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	7b1b      	ldrb	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 8149 	bne.w	8005d28 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8084 	beq.w	8005ba8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	011a      	lsls	r2, r3, #4
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	88db      	ldrh	r3, [r3, #6]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	81fb      	strh	r3, [r7, #14]
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01b      	beq.n	8005b24 <USB_ActivateEndpoint+0x17c>
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	81bb      	strh	r3, [r7, #12]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	89bb      	ldrh	r3, [r7, #12]
 8005b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d020      	beq.n	8005b6e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	813b      	strh	r3, [r7, #8]
 8005b44:	893b      	ldrh	r3, [r7, #8]
 8005b46:	f083 0320 	eor.w	r3, r3, #32
 8005b4a:	813b      	strh	r3, [r7, #8]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	893b      	ldrh	r3, [r7, #8]
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
 8005b6c:	e27f      	b.n	800606e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b84:	817b      	strh	r3, [r7, #10]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]
 8005ba6:	e262      	b.n	800606e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	4413      	add	r3, r2
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	011a      	lsls	r2, r3, #4
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	88db      	ldrh	r3, [r3, #6]
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	4413      	add	r3, r2
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	011a      	lsls	r2, r3, #4
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d112      	bne.n	8005c2e <USB_ActivateEndpoint+0x286>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e02f      	b.n	8005c8e <USB_ActivateEndpoint+0x2e6>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b3e      	cmp	r3, #62	; 0x3e
 8005c34:	d813      	bhi.n	8005c5e <USB_ActivateEndpoint+0x2b6>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <USB_ActivateEndpoint+0x2a8>
 8005c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	029b      	lsls	r3, r3, #10
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e017      	b.n	8005c8e <USB_ActivateEndpoint+0x2e6>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	663b      	str	r3, [r7, #96]	; 0x60
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <USB_ActivateEndpoint+0x2d0>
 8005c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c74:	3b01      	subs	r3, #1
 8005c76:	663b      	str	r3, [r7, #96]	; 0x60
 8005c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	83fb      	strh	r3, [r7, #30]
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01b      	beq.n	8005cde <USB_ActivateEndpoint+0x336>
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	83bb      	strh	r3, [r7, #28]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8bbb      	ldrh	r3, [r7, #28]
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	837b      	strh	r3, [r7, #26]
 8005cf6:	8b7b      	ldrh	r3, [r7, #26]
 8005cf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cfc:	837b      	strh	r3, [r7, #26]
 8005cfe:	8b7b      	ldrh	r3, [r7, #26]
 8005d00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d04:	837b      	strh	r3, [r7, #26]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8b7b      	ldrh	r3, [r7, #26]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e1a2      	b.n	800606e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d74:	4413      	add	r3, r2
 8005d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d86:	657b      	str	r3, [r7, #84]	; 0x54
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	891b      	ldrh	r3, [r3, #8]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	4413      	add	r3, r2
 8005daa:	653b      	str	r3, [r7, #80]	; 0x50
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	895b      	ldrh	r3, [r3, #10]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8091 	bne.w	8005ef8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005de4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01b      	beq.n	8005e26 <USB_ActivateEndpoint+0x47e>
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01b      	beq.n	8005e76 <USB_ActivateEndpoint+0x4ce>
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]
 8005ef6:	e0ba      	b.n	800606e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01d      	beq.n	8005f50 <USB_ActivateEndpoint+0x5a8>
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01d      	beq.n	8005fa8 <USB_ActivateEndpoint+0x600>
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d024      	beq.n	8005ffa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fce:	f083 0320 	eor.w	r3, r3, #32
 8005fd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]
 8005ff8:	e01d      	b.n	8006036 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006010:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800606e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006072:	4618      	mov	r0, r3
 8006074:	376c      	adds	r7, #108	; 0x6c
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800607c:	b480      	push	{r7}
 800607e:	b08d      	sub	sp, #52	; 0x34
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	7b1b      	ldrb	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 808e 	bne.w	80061ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d044      	beq.n	8006122 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	81bb      	strh	r3, [r7, #12]
 80060a6:	89bb      	ldrh	r3, [r7, #12]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01b      	beq.n	80060e8 <USB_DeactivateEndpoint+0x6c>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fe:	813b      	strh	r3, [r7, #8]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	893b      	ldrh	r3, [r7, #8]
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
 8006120:	e192      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	827b      	strh	r3, [r7, #18]
 8006130:	8a7b      	ldrh	r3, [r7, #18]
 8006132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <USB_DeactivateEndpoint+0xf6>
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	823b      	strh	r3, [r7, #16]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	8a3b      	ldrh	r3, [r7, #16]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006188:	81fb      	strh	r3, [r7, #14]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
 80061aa:	e14d      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 80a5 	bne.w	8006300 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	843b      	strh	r3, [r7, #32]
 80061c4:	8c3b      	ldrh	r3, [r7, #32]
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_DeactivateEndpoint+0x18a>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	83fb      	strh	r3, [r7, #30]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8bfb      	ldrh	r3, [r7, #30]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	83bb      	strh	r3, [r7, #28]
 8006214:	8bbb      	ldrh	r3, [r7, #28]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <USB_DeactivateEndpoint+0x1da>
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	837b      	strh	r3, [r7, #26]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	833b      	strh	r3, [r7, #24]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	8b3b      	ldrh	r3, [r7, #24]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	82fb      	strh	r3, [r7, #22]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8afb      	ldrh	r3, [r7, #22]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	82bb      	strh	r3, [r7, #20]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	8abb      	ldrh	r3, [r7, #20]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
 80062fe:	e0a3      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800630e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <USB_DeactivateEndpoint+0x2d4>
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800635e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <USB_DeactivateEndpoint+0x324>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	847b      	strh	r3, [r7, #34]	; 0x22
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3734      	adds	r7, #52	; 0x34
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b0cc      	sub	sp, #304	; 0x130
 8006458:	af00      	add	r7, sp, #0
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006462:	6018      	str	r0, [r3, #0]
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	2b01      	cmp	r3, #1
 800647c:	f041 817d 	bne.w	800777a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	d908      	bls.n	80064ae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800649c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80064ac:	e007      	b.n	80064be <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	7b1b      	ldrb	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d152      	bne.n	8006574 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6959      	ldr	r1, [r3, #20]
 80064da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	88da      	ldrh	r2, [r3, #6]
 80064e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064f4:	6800      	ldr	r0, [r0, #0]
 80064f6:	f001 ff23 	bl	8008340 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006506:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651c:	b29b      	uxth	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006528:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800652c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	440a      	add	r2, r1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4413      	add	r3, r2
 8006550:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006558:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006562:	b29a      	uxth	r2, r3
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	f001 b8b5 	b.w	80076de <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b02      	cmp	r3, #2
 8006582:	f040 84c6 	bne.w	8006f12 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	f240 8443 	bls.w	8006e2a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 823e 	beq.w	8006ac2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800664e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006652:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 809a 	bne.w	80067a0 <USB_EPStartXfer+0x34c>
 800666c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006678:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668e:	b29b      	uxth	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800669e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	440a      	add	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	011a      	lsls	r2, r3, #4
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4413      	add	r3, r2
 80066c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d122      	bne.n	800671e <USB_EPStartXfer+0x2ca>
 80066d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e079      	b.n	8006812 <USB_EPStartXfer+0x3be>
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	2b3e      	cmp	r3, #62	; 0x3e
 8006724:	d81b      	bhi.n	800675e <USB_EPStartXfer+0x30a>
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USB_EPStartXfer+0x2f2>
 800673c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006740:	3301      	adds	r3, #1
 8006742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29a      	uxth	r2, r3
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e059      	b.n	8006812 <USB_EPStartXfer+0x3be>
 800675e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <USB_EPStartXfer+0x32a>
 8006774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006778:	3b01      	subs	r3, #1
 800677a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800677e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006782:	b29b      	uxth	r3, r3
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006790:	b29a      	uxth	r2, r3
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e038      	b.n	8006812 <USB_EPStartXfer+0x3be>
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d130      	bne.n	8006812 <USB_EPStartXfer+0x3be>
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	440a      	add	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	011a      	lsls	r2, r3, #4
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006804:	b29a      	uxth	r2, r3
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	895b      	ldrh	r3, [r3, #10]
 800681e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6959      	ldr	r1, [r3, #20]
 800682e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006832:	b29b      	uxth	r3, r3
 8006834:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006838:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800683c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006840:	6800      	ldr	r0, [r0, #0]
 8006842:	f001 fd7d 	bl	8008340 <USB_WritePMA>
            ep->xfer_buff += len;
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006856:	441a      	add	r2, r3
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a1a      	ldr	r2, [r3, #32]
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90f      	bls.n	80068a0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	621a      	str	r2, [r3, #32]
 800689e:	e00e      	b.n	80068be <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 809a 	bne.w	8006a04 <USB_EPStartXfer+0x5b0>
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006902:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	440a      	add	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	011a      	lsls	r2, r3, #4
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4413      	add	r3, r2
 8006926:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d122      	bne.n	8006982 <USB_EPStartXfer+0x52e>
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800694e:	b29a      	uxth	r2, r3
 8006950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006954:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e083      	b.n	8006a8a <USB_EPStartXfer+0x636>
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	2b3e      	cmp	r3, #62	; 0x3e
 8006988:	d81b      	bhi.n	80069c2 <USB_EPStartXfer+0x56e>
 800698a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <USB_EPStartXfer+0x556>
 80069a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069a4:	3301      	adds	r3, #1
 80069a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	e063      	b.n	8006a8a <USB_EPStartXfer+0x636>
 80069c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d104      	bne.n	80069e2 <USB_EPStartXfer+0x58e>
 80069d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069dc:	3b01      	subs	r3, #1
 80069de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e042      	b.n	8006a8a <USB_EPStartXfer+0x636>
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d13a      	bne.n	8006a8a <USB_EPStartXfer+0x636>
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a46:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	891b      	ldrh	r3, [r3, #8]
 8006a96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6959      	ldr	r1, [r3, #20]
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ab0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ab4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ab8:	6800      	ldr	r0, [r0, #0]
 8006aba:	f001 fc41 	bl	8008340 <USB_WritePMA>
 8006abe:	f000 be0e 	b.w	80076de <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d16d      	bne.n	8006bae <USB_EPStartXfer+0x75a>
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af2:	4413      	add	r3, r2
 8006af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	011a      	lsls	r2, r3, #4
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d112      	bne.n	8006b3c <USB_EPStartXfer+0x6e8>
 8006b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e063      	b.n	8006c04 <USB_EPStartXfer+0x7b0>
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	2b3e      	cmp	r3, #62	; 0x3e
 8006b42:	d817      	bhi.n	8006b74 <USB_EPStartXfer+0x720>
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USB_EPStartXfer+0x710>
 8006b5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e047      	b.n	8006c04 <USB_EPStartXfer+0x7b0>
 8006b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <USB_EPStartXfer+0x740>
 8006b8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e02a      	b.n	8006c04 <USB_EPStartXfer+0x7b0>
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d122      	bne.n	8006c04 <USB_EPStartXfer+0x7b0>
 8006bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8006bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bde:	4413      	add	r3, r2
 8006be0:	653b      	str	r3, [r7, #80]	; 0x50
 8006be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	011a      	lsls	r2, r3, #4
 8006bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	891b      	ldrh	r3, [r3, #8]
 8006c10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6959      	ldr	r1, [r3, #20]
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c2a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c2e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c32:	6800      	ldr	r0, [r0, #0]
 8006c34:	f001 fb84 	bl	8008340 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695a      	ldr	r2, [r3, #20]
 8006c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c48:	441a      	add	r2, r3
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d90f      	bls.n	8006c92 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	621a      	str	r2, [r3, #32]
 8006c90:	e00e      	b.n	8006cb0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2200      	movs	r2, #0
 8006cae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d16d      	bne.n	8006da8 <USB_EPStartXfer+0x954>
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	4413      	add	r3, r2
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
 8006d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <USB_EPStartXfer+0x8e2>
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e05d      	b.n	8006df2 <USB_EPStartXfer+0x99e>
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3c:	d817      	bhi.n	8006d6e <USB_EPStartXfer+0x91a>
 8006d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <USB_EPStartXfer+0x90a>
 8006d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	029b      	lsls	r3, r3, #10
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e041      	b.n	8006df2 <USB_EPStartXfer+0x99e>
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USB_EPStartXfer+0x93a>
 8006d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	e024      	b.n	8006df2 <USB_EPStartXfer+0x99e>
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d11c      	bne.n	8006df2 <USB_EPStartXfer+0x99e>
 8006db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	4413      	add	r3, r2
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6959      	ldr	r1, [r3, #20]
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e18:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e1c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e20:	6800      	ldr	r0, [r0, #0]
 8006e22:	f001 fa8d 	bl	8008340 <USB_WritePMA>
 8006e26:	f000 bc5a 	b.w	80076de <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	441a      	add	r2, r3
 8006e7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb6:	4413      	add	r3, r2
 8006eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	011a      	lsls	r2, r3, #4
 8006ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eca:	4413      	add	r3, r2
 8006ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	891b      	ldrh	r3, [r3, #8]
 8006ee8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6959      	ldr	r1, [r3, #20]
 8006ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	f001 fa18 	bl	8008340 <USB_WritePMA>
 8006f10:	e3e5      	b.n	80076de <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 81bc 	beq.w	800732c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d16d      	bne.n	80070ae <USB_EPStartXfer+0xc5a>
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff2:	4413      	add	r3, r2
 8006ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	011a      	lsls	r2, r3, #4
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	4413      	add	r3, r2
 8007008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800700c:	677b      	str	r3, [r7, #116]	; 0x74
 800700e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d112      	bne.n	800703c <USB_EPStartXfer+0xbe8>
 8007016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007020:	b29a      	uxth	r2, r3
 8007022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007034:	b29a      	uxth	r2, r3
 8007036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e060      	b.n	80070fe <USB_EPStartXfer+0xcaa>
 800703c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007040:	2b3e      	cmp	r3, #62	; 0x3e
 8007042:	d817      	bhi.n	8007074 <USB_EPStartXfer+0xc20>
 8007044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007048:	085b      	lsrs	r3, r3, #1
 800704a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800704e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <USB_EPStartXfer+0xc10>
 800705a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800705e:	3301      	adds	r3, #1
 8007060:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007064:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29a      	uxth	r2, r3
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e044      	b.n	80070fe <USB_EPStartXfer+0xcaa>
 8007074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800707e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	2b00      	cmp	r3, #0
 8007088:	d104      	bne.n	8007094 <USB_EPStartXfer+0xc40>
 800708a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800708e:	3b01      	subs	r3, #1
 8007090:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007094:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007098:	b29b      	uxth	r3, r3
 800709a:	029b      	lsls	r3, r3, #10
 800709c:	b29b      	uxth	r3, r3
 800709e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e027      	b.n	80070fe <USB_EPStartXfer+0xcaa>
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d11f      	bne.n	80070fe <USB_EPStartXfer+0xcaa>
 80070be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070d4:	4413      	add	r3, r2
 80070d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	011a      	lsls	r2, r3, #4
 80070e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070ec:	4413      	add	r3, r2
 80070ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	895b      	ldrh	r3, [r3, #10]
 800710a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6959      	ldr	r1, [r3, #20]
 800711a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711e:	b29b      	uxth	r3, r3
 8007120:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007124:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007128:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f001 f907 	bl	8008340 <USB_WritePMA>
          ep->xfer_buff += len;
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695a      	ldr	r2, [r3, #20]
 800713e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007142:	441a      	add	r2, r3
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a1a      	ldr	r2, [r3, #32]
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	429a      	cmp	r2, r3
 800716a:	d90f      	bls.n	800718c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	621a      	str	r2, [r3, #32]
 800718a:	e00e      	b.n	80071aa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2200      	movs	r2, #0
 80071a8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8295 	beq.w	80076de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d16d      	bne.n	80072a0 <USB_EPStartXfer+0xe4c>
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071de:	b29b      	uxth	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071e4:	4413      	add	r3, r2
 80071e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	011a      	lsls	r2, r3, #4
 80071f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071f8:	4413      	add	r3, r2
 80071fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071fe:	667b      	str	r3, [r7, #100]	; 0x64
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d112      	bne.n	800722e <USB_EPStartXfer+0xdda>
 8007208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007212:	b29a      	uxth	r2, r3
 8007214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007226:	b29a      	uxth	r2, r3
 8007228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e063      	b.n	80072f6 <USB_EPStartXfer+0xea2>
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	2b3e      	cmp	r3, #62	; 0x3e
 8007234:	d817      	bhi.n	8007266 <USB_EPStartXfer+0xe12>
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <USB_EPStartXfer+0xe02>
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007250:	3301      	adds	r3, #1
 8007252:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	b29b      	uxth	r3, r3
 800725c:	029b      	lsls	r3, r3, #10
 800725e:	b29a      	uxth	r2, r3
 8007260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e047      	b.n	80072f6 <USB_EPStartXfer+0xea2>
 8007266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <USB_EPStartXfer+0xe32>
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007280:	3b01      	subs	r3, #1
 8007282:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007298:	b29a      	uxth	r2, r3
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e02a      	b.n	80072f6 <USB_EPStartXfer+0xea2>
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d122      	bne.n	80072f6 <USB_EPStartXfer+0xea2>
 80072b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	673b      	str	r3, [r7, #112]	; 0x70
 80072bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072d0:	4413      	add	r3, r2
 80072d2:	673b      	str	r3, [r7, #112]	; 0x70
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	891b      	ldrh	r3, [r3, #8]
 8007302:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007316:	b29b      	uxth	r3, r3
 8007318:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800731c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007320:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 f80b 	bl	8008340 <USB_WritePMA>
 800732a:	e1d8      	b.n	80076de <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d178      	bne.n	800742e <USB_EPStartXfer+0xfda>
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800734a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	011a      	lsls	r2, r3, #4
 8007374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007378:	4413      	add	r3, r2
 800737a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800737e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <USB_EPStartXfer+0xf64>
 800738a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007396:	b29a      	uxth	r2, r3
 8007398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e06b      	b.n	8007490 <USB_EPStartXfer+0x103c>
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	2b3e      	cmp	r3, #62	; 0x3e
 80073be:	d818      	bhi.n	80073f2 <USB_EPStartXfer+0xf9e>
 80073c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USB_EPStartXfer+0xf8c>
 80073d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073da:	3301      	adds	r3, #1
 80073dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	029b      	lsls	r3, r3, #10
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e04e      	b.n	8007490 <USB_EPStartXfer+0x103c>
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <USB_EPStartXfer+0xfbe>
 8007408:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800740c:	3b01      	subs	r3, #1
 800740e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007412:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007416:	b29b      	uxth	r3, r3
 8007418:	029b      	lsls	r3, r3, #10
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007424:	b29a      	uxth	r2, r3
 8007426:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e030      	b.n	8007490 <USB_EPStartXfer+0x103c>
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d128      	bne.n	8007490 <USB_EPStartXfer+0x103c>
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745a:	b29b      	uxth	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007462:	4413      	add	r3, r2
 8007464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	011a      	lsls	r2, r3, #4
 8007476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800747a:	4413      	add	r3, r2
 800747c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800748e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	891b      	ldrh	r3, [r3, #8]
 800749c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6959      	ldr	r1, [r3, #20]
 80074ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074be:	6800      	ldr	r0, [r0, #0]
 80074c0:	f000 ff3e 	bl	8008340 <USB_WritePMA>
          ep->xfer_buff += len;
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	441a      	add	r2, r3
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6a1a      	ldr	r2, [r3, #32]
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d90f      	bls.n	800751e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80074fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	621a      	str	r2, [r3, #32]
 800751c:	e00e      	b.n	800753c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80cc 	beq.w	80076de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d178      	bne.n	8007656 <USB_EPStartXfer+0x1202>
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007588:	4413      	add	r3, r2
 800758a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	011a      	lsls	r2, r3, #4
 800759c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a0:	4413      	add	r3, r2
 80075a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d116      	bne.n	80075e0 <USB_EPStartXfer+0x118c>
 80075b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e064      	b.n	80076aa <USB_EPStartXfer+0x1256>
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	2b3e      	cmp	r3, #62	; 0x3e
 80075e6:	d818      	bhi.n	800761a <USB_EPStartXfer+0x11c6>
 80075e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ec:	085b      	lsrs	r3, r3, #1
 80075ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <USB_EPStartXfer+0x11b4>
 80075fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007602:	3301      	adds	r3, #1
 8007604:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800760c:	b29b      	uxth	r3, r3
 800760e:	029b      	lsls	r3, r3, #10
 8007610:	b29a      	uxth	r2, r3
 8007612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e047      	b.n	80076aa <USB_EPStartXfer+0x1256>
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <USB_EPStartXfer+0x11e6>
 8007630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007634:	3b01      	subs	r3, #1
 8007636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800763a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800763e:	b29b      	uxth	r3, r3
 8007640:	029b      	lsls	r3, r3, #10
 8007642:	b29b      	uxth	r3, r3
 8007644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764c:	b29a      	uxth	r2, r3
 800764e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e029      	b.n	80076aa <USB_EPStartXfer+0x1256>
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d121      	bne.n	80076aa <USB_EPStartXfer+0x1256>
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007674:	b29b      	uxth	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800767c:	4413      	add	r3, r2
 800767e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	011a      	lsls	r2, r3, #4
 8007690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007694:	4413      	add	r3, r2
 8007696:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800769a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	895b      	ldrh	r3, [r3, #10]
 80076b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6959      	ldr	r1, [r3, #20]
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f000 fe31 	bl	8008340 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007700:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	8013      	strh	r3, [r2, #0]
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007716:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800771a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800771e:	8812      	ldrh	r2, [r2, #0]
 8007720:	f082 0210 	eor.w	r2, r2, #16
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800772e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007732:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007736:	8812      	ldrh	r2, [r2, #0]
 8007738:	f082 0220 	eor.w	r2, r2, #32
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
 8007776:	f000 bc9f 	b.w	80080b8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800777a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	7b1b      	ldrb	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f040 80ae 	bne.w	80078e8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d917      	bls.n	80077d8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699a      	ldr	r2, [r3, #24]
 80077c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c8:	1ad2      	subs	r2, r2, r3
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	619a      	str	r2, [r3, #24]
 80077d6:	e00e      	b.n	80077f6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80077d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80077e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800781a:	4413      	add	r3, r2
 800781c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	011a      	lsls	r2, r3, #4
 800782e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007832:	4413      	add	r3, r2
 8007834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800783c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d116      	bne.n	8007872 <USB_EPStartXfer+0x141e>
 8007844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007850:	b29a      	uxth	r2, r3
 8007852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e3e8      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
 8007872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007876:	2b3e      	cmp	r3, #62	; 0x3e
 8007878:	d818      	bhi.n	80078ac <USB_EPStartXfer+0x1458>
 800787a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <USB_EPStartXfer+0x1446>
 8007890:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007894:	3301      	adds	r3, #1
 8007896:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800789a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e3cb      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
 80078ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <USB_EPStartXfer+0x1478>
 80078c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e3ad      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	78db      	ldrb	r3, [r3, #3]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f040 8200 	bne.w	8007cfa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 8091 	bne.w	8007a2e <USB_EPStartXfer+0x15da>
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007928:	b29b      	uxth	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007930:	4413      	add	r3, r2
 8007932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	011a      	lsls	r2, r3, #4
 8007944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007948:	4413      	add	r3, r2
 800794a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800794e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d116      	bne.n	8007990 <USB_EPStartXfer+0x153c>
 8007962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796e:	b29a      	uxth	r2, r3
 8007970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007986:	b29a      	uxth	r2, r3
 8007988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e083      	b.n	8007a98 <USB_EPStartXfer+0x1644>
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b3e      	cmp	r3, #62	; 0x3e
 800799e:	d820      	bhi.n	80079e2 <USB_EPStartXfer+0x158e>
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <USB_EPStartXfer+0x157c>
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ca:	3301      	adds	r3, #1
 80079cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	029b      	lsls	r3, r3, #10
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e05a      	b.n	8007a98 <USB_EPStartXfer+0x1644>
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <USB_EPStartXfer+0x15be>
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e034      	b.n	8007a98 <USB_EPStartXfer+0x1644>
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d12c      	bne.n	8007a98 <USB_EPStartXfer+0x1644>
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	011a      	lsls	r2, r3, #4
 8007a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8091 	bne.w	8007bda <USB_EPStartXfer+0x1786>
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007adc:	4413      	add	r3, r2
 8007ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	011a      	lsls	r2, r3, #4
 8007af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d116      	bne.n	8007b3c <USB_EPStartXfer+0x16e8>
 8007b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e07c      	b.n	8007c36 <USB_EPStartXfer+0x17e2>
 8007b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4a:	d820      	bhi.n	8007b8e <USB_EPStartXfer+0x173a>
 8007b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <USB_EPStartXfer+0x1728>
 8007b72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b76:	3301      	adds	r3, #1
 8007b78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	029b      	lsls	r3, r3, #10
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	e053      	b.n	8007c36 <USB_EPStartXfer+0x17e2>
 8007b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USB_EPStartXfer+0x176a>
 8007bb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e02d      	b.n	8007c36 <USB_EPStartXfer+0x17e2>
 8007bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d125      	bne.n	8007c36 <USB_EPStartXfer+0x17e2>
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c00:	4413      	add	r3, r2
 8007c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	011a      	lsls	r2, r3, #4
 8007c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c18:	4413      	add	r3, r2
 8007c1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 81fe 	beq.w	8008044 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <USB_EPStartXfer+0x182c>
 8007c74:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10d      	bne.n	8007c9c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c80:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 81db 	bne.w	8008044 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c8e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f040 81d4 	bne.w	8008044 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	441a      	add	r2, r3
 8007ce0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]
 8007cf8:	e1a4      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	78db      	ldrb	r3, [r3, #3]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	f040 819a 	bne.w	8008040 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d917      	bls.n	8007d58 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699a      	ldr	r2, [r3, #24]
 8007d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d48:	1ad2      	subs	r2, r2, r3
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	619a      	str	r2, [r3, #24]
 8007d56:	e00e      	b.n	8007d76 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d178      	bne.n	8007e78 <USB_EPStartXfer+0x1a24>
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007daa:	4413      	add	r3, r2
 8007dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	011a      	lsls	r2, r3, #4
 8007dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d116      	bne.n	8007e02 <USB_EPStartXfer+0x19ae>
 8007dd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e06b      	b.n	8007eda <USB_EPStartXfer+0x1a86>
 8007e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e06:	2b3e      	cmp	r3, #62	; 0x3e
 8007e08:	d818      	bhi.n	8007e3c <USB_EPStartXfer+0x19e8>
 8007e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <USB_EPStartXfer+0x19d6>
 8007e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	029b      	lsls	r3, r3, #10
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	e04e      	b.n	8007eda <USB_EPStartXfer+0x1a86>
 8007e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <USB_EPStartXfer+0x1a08>
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e56:	3b01      	subs	r3, #1
 8007e58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	029b      	lsls	r3, r3, #10
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e030      	b.n	8007eda <USB_EPStartXfer+0x1a86>
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d128      	bne.n	8007eda <USB_EPStartXfer+0x1a86>
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	4413      	add	r3, r2
 8007eae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	011a      	lsls	r2, r3, #4
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d178      	bne.n	8007fea <USB_EPStartXfer+0x1b96>
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	011a      	lsls	r2, r3, #4
 8007f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f34:	4413      	add	r3, r2
 8007f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d116      	bne.n	8007f74 <USB_EPStartXfer+0x1b20>
 8007f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	e067      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f78:	2b3e      	cmp	r3, #62	; 0x3e
 8007f7a:	d818      	bhi.n	8007fae <USB_EPStartXfer+0x1b5a>
 8007f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f80:	085b      	lsrs	r3, r3, #1
 8007f82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <USB_EPStartXfer+0x1b48>
 8007f92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f96:	3301      	adds	r3, #1
 8007f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e04a      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
 8007fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <USB_EPStartXfer+0x1b7a>
 8007fc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	029b      	lsls	r3, r3, #10
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	e02c      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d124      	bne.n	8008044 <USB_EPStartXfer+0x1bf0>
 8007ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008008:	b29b      	uxth	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008010:	4413      	add	r3, r2
 8008012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	011a      	lsls	r2, r3, #4
 8008024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008028:	4413      	add	r3, r2
 800802a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800802e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008036:	b29a      	uxth	r2, r3
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803c:	801a      	strh	r2, [r3, #0]
 800803e:	e001      	b.n	8008044 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e03a      	b.n	80080ba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008048:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800806e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008072:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008076:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800807a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800807e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008082:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	441a      	add	r2, r3
 80080a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d020      	beq.n	8008118 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ec:	81bb      	strh	r3, [r7, #12]
 80080ee:	89bb      	ldrh	r3, [r7, #12]
 80080f0:	f083 0310 	eor.w	r3, r3, #16
 80080f4:	81bb      	strh	r3, [r7, #12]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	89bb      	ldrh	r3, [r7, #12]
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]
 8008116:	e01f      	b.n	8008158 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	81fb      	strh	r3, [r7, #14]
 8008130:	89fb      	ldrh	r3, [r7, #14]
 8008132:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008136:	81fb      	strh	r3, [r7, #14]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	89fb      	ldrh	r3, [r7, #14]
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	7b1b      	ldrb	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f040 809d 	bne.w	80082b2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d04c      	beq.n	800821a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	823b      	strh	r3, [r7, #16]
 800818e:	8a3b      	ldrh	r3, [r7, #16]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01b      	beq.n	80081d0 <USB_EPClearStall+0x6c>
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	81fb      	strh	r3, [r7, #14]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	89fb      	ldrh	r3, [r7, #14]
 80081bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	78db      	ldrb	r3, [r3, #3]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d06c      	beq.n	80082b2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ee:	81bb      	strh	r3, [r7, #12]
 80081f0:	89bb      	ldrh	r3, [r7, #12]
 80081f2:	f083 0320 	eor.w	r3, r3, #32
 80081f6:	81bb      	strh	r3, [r7, #12]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	441a      	add	r2, r3
 8008202:	89bb      	ldrh	r3, [r7, #12]
 8008204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008214:	b29b      	uxth	r3, r3
 8008216:	8013      	strh	r3, [r2, #0]
 8008218:	e04b      	b.n	80082b2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	82fb      	strh	r3, [r7, #22]
 8008228:	8afb      	ldrh	r3, [r7, #22]
 800822a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01b      	beq.n	800826a <USB_EPClearStall+0x106>
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	82bb      	strh	r3, [r7, #20]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	8abb      	ldrh	r3, [r7, #20]
 8008256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	827b      	strh	r3, [r7, #18]
 8008282:	8a7b      	ldrh	r3, [r7, #18]
 8008284:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008288:	827b      	strh	r3, [r7, #18]
 800828a:	8a7b      	ldrh	r3, [r7, #18]
 800828c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008290:	827b      	strh	r3, [r7, #18]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	441a      	add	r2, r3
 800829c:	8a7b      	ldrh	r3, [r7, #18]
 800829e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr

080082be <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2280      	movs	r2, #128	; 0x80
 80082d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr

080082f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr

0800830c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800831a:	b29b      	uxth	r3, r3
 800831c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr

0800832a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	bc80      	pop	{r7}
 800833e:	4770      	bx	lr

08008340 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008340:	b480      	push	{r7}
 8008342:	b08d      	sub	sp, #52	; 0x34
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4611      	mov	r1, r2
 800834c:	461a      	mov	r2, r3
 800834e:	460b      	mov	r3, r1
 8008350:	80fb      	strh	r3, [r7, #6]
 8008352:	4613      	mov	r3, r2
 8008354:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008356:	88bb      	ldrh	r3, [r7, #4]
 8008358:	3301      	adds	r3, #1
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	005a      	lsls	r2, r3, #1
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008378:	e01e      	b.n	80083b8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	3301      	adds	r3, #1
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	b29a      	uxth	r2, r3
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	3302      	adds	r3, #2
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	3302      	adds	r3, #2
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	3301      	adds	r3, #1
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	3b01      	subs	r3, #1
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1dd      	bne.n	800837a <USB_WritePMA+0x3a>
  }
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	3734      	adds	r7, #52	; 0x34
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b08b      	sub	sp, #44	; 0x2c
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4611      	mov	r1, r2
 80083d6:	461a      	mov	r2, r3
 80083d8:	460b      	mov	r3, r1
 80083da:	80fb      	strh	r3, [r7, #6]
 80083dc:	4613      	mov	r3, r2
 80083de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80083e0:	88bb      	ldrh	r3, [r7, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	005a      	lsls	r2, r3, #1
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	e01b      	b.n	800843c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	3302      	adds	r3, #2
 8008410:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	b2da      	uxtb	r2, r3
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3301      	adds	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	b2da      	uxtb	r2, r3
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	3301      	adds	r3, #1
 800842e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	3302      	adds	r3, #2
 8008434:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	3b01      	subs	r3, #1
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e0      	bne.n	8008404 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008442:	88bb      	ldrh	r3, [r7, #4]
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	b29b      	uxth	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	701a      	strb	r2, [r3, #0]
  }
}
 800845e:	bf00      	nop
 8008460:	372c      	adds	r7, #44	; 0x2c
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008474:	2304      	movs	r3, #4
 8008476:	2203      	movs	r2, #3
 8008478:	2181      	movs	r1, #129	; 0x81
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fc83 	bl	8009d86 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008486:	2010      	movs	r0, #16
 8008488:	f001 fd92 	bl	8009fb0 <USBD_static_malloc>
 800848c:	4602      	mov	r2, r0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800849e:	2302      	movs	r3, #2
 80084a0:	e005      	b.n	80084ae <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a8:	2200      	movs	r2, #0
 80084aa:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80084c2:	2181      	movs	r1, #129	; 0x81
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 fc84 	bl	8009dd2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fd71 	bl	8009fc8 <USBD_static_free>
    pdev->pClassData = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008508:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008522:	2b00      	cmp	r3, #0
 8008524:	d045      	beq.n	80085b2 <USBD_HID_Setup+0xba>
 8008526:	2b20      	cmp	r3, #32
 8008528:	f040 80d3 	bne.w	80086d2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	3b02      	subs	r3, #2
 8008532:	2b09      	cmp	r3, #9
 8008534:	d835      	bhi.n	80085a2 <USBD_HID_Setup+0xaa>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <USBD_HID_Setup+0x44>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	08008593 	.word	0x08008593
 8008540:	08008573 	.word	0x08008573
 8008544:	080085a3 	.word	0x080085a3
 8008548:	080085a3 	.word	0x080085a3
 800854c:	080085a3 	.word	0x080085a3
 8008550:	080085a3 	.word	0x080085a3
 8008554:	080085a3 	.word	0x080085a3
 8008558:	080085a3 	.word	0x080085a3
 800855c:	08008581 	.word	0x08008581
 8008560:	08008565 	.word	0x08008565
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	601a      	str	r2, [r3, #0]
          break;
 8008570:	e01e      	b.n	80085b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2201      	movs	r2, #1
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f944 	bl	8009806 <USBD_CtlSendData>
          break;
 800857e:	e017      	b.n	80085b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	0a1b      	lsrs	r3, r3, #8
 8008586:	b29b      	uxth	r3, r3
 8008588:	b2db      	uxtb	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	605a      	str	r2, [r3, #4]
          break;
 8008590:	e00e      	b.n	80085b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3304      	adds	r3, #4
 8008596:	2201      	movs	r2, #1
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f933 	bl	8009806 <USBD_CtlSendData>
          break;
 80085a0:	e006      	b.n	80085b0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 f8c4 	bl	8009732 <USBD_CtlError>
          ret = USBD_FAIL;
 80085aa:	2302      	movs	r3, #2
 80085ac:	75fb      	strb	r3, [r7, #23]
          break;
 80085ae:	bf00      	nop
      }
      break;
 80085b0:	e096      	b.n	80086e0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b0b      	cmp	r3, #11
 80085b8:	f200 8083 	bhi.w	80086c2 <USBD_HID_Setup+0x1ca>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <USBD_HID_Setup+0xcc>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085f5 	.word	0x080085f5
 80085c8:	080086c3 	.word	0x080086c3
 80085cc:	080086c3 	.word	0x080086c3
 80085d0:	080086c3 	.word	0x080086c3
 80085d4:	080086c3 	.word	0x080086c3
 80085d8:	080086c3 	.word	0x080086c3
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	080086c3 	.word	0x080086c3
 80085e4:	080086c3 	.word	0x080086c3
 80085e8:	080086c3 	.word	0x080086c3
 80085ec:	08008675 	.word	0x08008675
 80085f0:	0800869d 	.word	0x0800869d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d107      	bne.n	800860e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80085fe:	f107 030e 	add.w	r3, r7, #14
 8008602:	2202      	movs	r2, #2
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 f8fd 	bl	8009806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800860c:	e060      	b.n	80086d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 f88e 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8008616:	2302      	movs	r3, #2
 8008618:	75fb      	strb	r3, [r7, #23]
          break;
 800861a:	e059      	b.n	80086d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	885b      	ldrh	r3, [r3, #2]
 8008620:	0a1b      	lsrs	r3, r3, #8
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b22      	cmp	r3, #34	; 0x22
 8008626:	d108      	bne.n	800863a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	88db      	ldrh	r3, [r3, #6]
 800862c:	2b4a      	cmp	r3, #74	; 0x4a
 800862e:	bf28      	it	cs
 8008630:	234a      	movcs	r3, #74	; 0x4a
 8008632:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008634:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <USBD_HID_Setup+0x1f4>)
 8008636:	61bb      	str	r3, [r7, #24]
 8008638:	e015      	b.n	8008666 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b21      	cmp	r3, #33	; 0x21
 8008644:	d108      	bne.n	8008658 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008646:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <USBD_HID_Setup+0x1f8>)
 8008648:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b09      	cmp	r3, #9
 8008650:	bf28      	it	cs
 8008652:	2309      	movcs	r3, #9
 8008654:	83fb      	strh	r3, [r7, #30]
 8008656:	e006      	b.n	8008666 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 f869 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8008660:	2302      	movs	r3, #2
 8008662:	75fb      	strb	r3, [r7, #23]
            break;
 8008664:	e034      	b.n	80086d0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008666:	8bfb      	ldrh	r3, [r7, #30]
 8008668:	461a      	mov	r2, r3
 800866a:	69b9      	ldr	r1, [r7, #24]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f8ca 	bl	8009806 <USBD_CtlSendData>
          break;
 8008672:	e02d      	b.n	80086d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b03      	cmp	r3, #3
 800867c:	d107      	bne.n	800868e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3308      	adds	r3, #8
 8008682:	2201      	movs	r2, #1
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f8bd 	bl	8009806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800868c:	e020      	b.n	80086d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f84e 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	75fb      	strb	r3, [r7, #23]
          break;
 800869a:	e019      	b.n	80086d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d106      	bne.n	80086b4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086b2:	e00d      	b.n	80086d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f83b 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 80086bc:	2302      	movs	r3, #2
 80086be:	75fb      	strb	r3, [r7, #23]
          break;
 80086c0:	e006      	b.n	80086d0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f834 	bl	8009732 <USBD_CtlError>
          ret = USBD_FAIL;
 80086ca:	2302      	movs	r3, #2
 80086cc:	75fb      	strb	r3, [r7, #23]
          break;
 80086ce:	bf00      	nop
      }
      break;
 80086d0:	e006      	b.n	80086e0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 f82c 	bl	8009732 <USBD_CtlError>
      ret = USBD_FAIL;
 80086da:	2302      	movs	r3, #2
 80086dc:	75fb      	strb	r3, [r7, #23]
      break;
 80086de:	bf00      	nop
  }

  return ret;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	200001a4 	.word	0x200001a4
 80086f0:	2000018c 	.word	0x2000018c

080086f4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008708:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	2b03      	cmp	r3, #3
 8008712:	d10c      	bne.n	800872e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	7b1b      	ldrb	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d108      	bne.n	800872e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2201      	movs	r2, #1
 8008720:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	2181      	movs	r1, #129	; 0x81
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 fbfa 	bl	8009f22 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2222      	movs	r2, #34	; 0x22
 8008744:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008746:	4b03      	ldr	r3, [pc, #12]	; (8008754 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000120 	.word	0x20000120

08008758 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2222      	movs	r2, #34	; 0x22
 8008764:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008766:	4b03      	ldr	r3, [pc, #12]	; (8008774 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000144 	.word	0x20000144

08008778 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2222      	movs	r2, #34	; 0x22
 8008784:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008786:	4b03      	ldr	r3, [pc, #12]	; (8008794 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20000168 	.word	0x20000168

08008798 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087aa:	2200      	movs	r2, #0
 80087ac:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
	...

080087bc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	220a      	movs	r2, #10
 80087c8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80087ca:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000198 	.word	0x20000198

080087dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e01a      	b.n	800882a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	79fa      	ldrb	r2, [r7, #7]
 8008820:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f001 fa4c 	bl	8009cc0 <USBD_LL_Init>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d006      	beq.n	8008854 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
 8008852:	e001      	b.n	8008858 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008854:	2302      	movs	r3, #2
 8008856:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fa6f 	bl	8009d50 <USBD_LL_Start>

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800889c:	2302      	movs	r3, #2
 800889e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00c      	beq.n	80088c4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	4611      	mov	r1, r2
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	4611      	mov	r1, r2
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fed7 	bl	80096ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800891a:	461a      	mov	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	2b02      	cmp	r3, #2
 800892e:	d016      	beq.n	800895e <USBD_LL_SetupStage+0x6a>
 8008930:	2b02      	cmp	r3, #2
 8008932:	d81c      	bhi.n	800896e <USBD_LL_SetupStage+0x7a>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <USBD_LL_SetupStage+0x4a>
 8008938:	2b01      	cmp	r3, #1
 800893a:	d008      	beq.n	800894e <USBD_LL_SetupStage+0x5a>
 800893c:	e017      	b.n	800896e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9ca 	bl	8008ce0 <USBD_StdDevReq>
      break;
 800894c:	e01a      	b.n	8008984 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa2c 	bl	8008db4 <USBD_StdItfReq>
      break;
 800895c:	e012      	b.n	8008984 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa6c 	bl	8008e44 <USBD_StdEPReq>
      break;
 800896c:	e00a      	b.n	8008984 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fa47 	bl	8009e10 <USBD_LL_StallEP>
      break;
 8008982:	bf00      	nop
  }

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	460b      	mov	r3, r1
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14b      	bne.n	8008a3a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d134      	bne.n	8008a1e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d919      	bls.n	80089f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80089de:	b29b      	uxth	r3, r3
 80089e0:	e002      	b.n	80089e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 ff38 	bl	8009862 <USBD_CtlContinueRx>
 80089f2:	e038      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d105      	bne.n	8008a16 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 ff35 	bl	8009886 <USBD_CtlSendStatus>
 8008a1c:	e023      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d11e      	bne.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f001 f9ec 	bl	8009e10 <USBD_LL_StallEP>
 8008a38:	e015      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d108      	bne.n	8008a62 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	7afa      	ldrb	r2, [r7, #11]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	4798      	blx	r3
 8008a60:	e001      	b.n	8008a66 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	e000      	b.n	8008a68 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d17f      	bne.n	8008b84 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3314      	adds	r3, #20
 8008a88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d15c      	bne.n	8008b4e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d915      	bls.n	8008acc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	1ad2      	subs	r2, r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fec0 	bl	800983e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f001 fa4f 	bl	8009f68 <USBD_LL_PrepareReceive>
 8008aca:	e04e      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	6912      	ldr	r2, [r2, #16]
 8008ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad8:	fb01 f202 	mul.w	r2, r1, r2
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11c      	bne.n	8008b1c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d316      	bcc.n	8008b1c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d20f      	bcs.n	8008b1c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fe9c 	bl	800983e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 fa27 	bl	8009f68 <USBD_LL_PrepareReceive>
 8008b1a:	e026      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d105      	bne.n	8008b3e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 f965 	bl	8009e10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 feb0 	bl	80098ac <USBD_CtlReceiveStatus>
 8008b4c:	e00d      	b.n	8008b6a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d004      	beq.n	8008b62 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b62:	2180      	movs	r1, #128	; 0x80
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f001 f953 	bl	8009e10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11d      	bne.n	8008bb0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fe81 	bl	800887c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b82:	e015      	b.n	8008bb0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00d      	beq.n	8008bac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d108      	bne.n	8008bac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	7afa      	ldrb	r2, [r7, #11]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	4798      	blx	r3
 8008baa:	e001      	b.n	8008bb0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e000      	b.n	8008bb2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 f8dc 	bl	8009d86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2240      	movs	r2, #64	; 0x40
 8008bda:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	2200      	movs	r2, #0
 8008be2:	2180      	movs	r1, #128	; 0x80
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f8ce 	bl	8009d86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2240      	movs	r2, #64	; 0x40
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6852      	ldr	r2, [r2, #4]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
  }

  return USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr

08008c5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2204      	movs	r2, #4
 8008c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr

08008c82 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d105      	bne.n	8008ca0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d10b      	bne.n	8008cd6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d005      	beq.n	8008d06 <USBD_StdDevReq+0x26>
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d84f      	bhi.n	8008d9e <USBD_StdDevReq+0xbe>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <USBD_StdDevReq+0x36>
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d14b      	bne.n	8008d9e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
      break;
 8008d14:	e048      	b.n	8008da8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d839      	bhi.n	8008d92 <USBD_StdDevReq+0xb2>
 8008d1e:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <USBD_StdDevReq+0x44>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008d75 	.word	0x08008d75
 8008d28:	08008d89 	.word	0x08008d89
 8008d2c:	08008d93 	.word	0x08008d93
 8008d30:	08008d7f 	.word	0x08008d7f
 8008d34:	08008d93 	.word	0x08008d93
 8008d38:	08008d57 	.word	0x08008d57
 8008d3c:	08008d4d 	.word	0x08008d4d
 8008d40:	08008d93 	.word	0x08008d93
 8008d44:	08008d6b 	.word	0x08008d6b
 8008d48:	08008d61 	.word	0x08008d61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f9dc 	bl	800910c <USBD_GetDescriptor>
          break;
 8008d54:	e022      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fb3f 	bl	80093dc <USBD_SetAddress>
          break;
 8008d5e:	e01d      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fb7e 	bl	8009464 <USBD_SetConfig>
          break;
 8008d68:	e018      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fc07 	bl	8009580 <USBD_GetConfig>
          break;
 8008d72:	e013      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fc37 	bl	80095ea <USBD_GetStatus>
          break;
 8008d7c:	e00e      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fc65 	bl	8009650 <USBD_SetFeature>
          break;
 8008d86:	e009      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fc74 	bl	8009678 <USBD_ClrFeature>
          break;
 8008d90:	e004      	b.n	8008d9c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fccc 	bl	8009732 <USBD_CtlError>
          break;
 8008d9a:	bf00      	nop
      }
      break;
 8008d9c:	e004      	b.n	8008da8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fcc6 	bl	8009732 <USBD_CtlError>
      break;
 8008da6:	bf00      	nop
  }

  return ret;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop

08008db4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d005      	beq.n	8008dda <USBD_StdItfReq+0x26>
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d82e      	bhi.n	8008e30 <USBD_StdItfReq+0x7c>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <USBD_StdItfReq+0x26>
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d12a      	bne.n	8008e30 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de0:	3b01      	subs	r3, #1
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d81d      	bhi.n	8008e22 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	889b      	ldrh	r3, [r3, #4]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d813      	bhi.n	8008e18 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d110      	bne.n	8008e2c <USBD_StdItfReq+0x78>
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10d      	bne.n	8008e2c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fd38 	bl	8009886 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e16:	e009      	b.n	8008e2c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fc89 	bl	8009732 <USBD_CtlError>
          break;
 8008e20:	e004      	b.n	8008e2c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc84 	bl	8009732 <USBD_CtlError>
          break;
 8008e2a:	e000      	b.n	8008e2e <USBD_StdItfReq+0x7a>
          break;
 8008e2c:	bf00      	nop
      }
      break;
 8008e2e:	e004      	b.n	8008e3a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fc7d 	bl	8009732 <USBD_CtlError>
      break;
 8008e38:	bf00      	nop
  }

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	889b      	ldrh	r3, [r3, #4]
 8008e56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d007      	beq.n	8008e74 <USBD_StdEPReq+0x30>
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	f200 8146 	bhi.w	80090f6 <USBD_StdEPReq+0x2b2>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <USBD_StdEPReq+0x40>
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	f040 8141 	bne.w	80090f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
      break;
 8008e82:	e13d      	b.n	8009100 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d10a      	bne.n	8008ea6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	e12d      	b.n	8009102 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d007      	beq.n	8008ebe <USBD_StdEPReq+0x7a>
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	f300 811b 	bgt.w	80090ea <USBD_StdEPReq+0x2a6>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d072      	beq.n	8008f9e <USBD_StdEPReq+0x15a>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d03a      	beq.n	8008f32 <USBD_StdEPReq+0xee>
 8008ebc:	e115      	b.n	80090ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d002      	beq.n	8008ece <USBD_StdEPReq+0x8a>
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d015      	beq.n	8008ef8 <USBD_StdEPReq+0xb4>
 8008ecc:	e02b      	b.n	8008f26 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00c      	beq.n	8008eee <USBD_StdEPReq+0xaa>
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	2b80      	cmp	r3, #128	; 0x80
 8008ed8:	d009      	beq.n	8008eee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 ff96 	bl	8009e10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 ff92 	bl	8009e10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eec:	e020      	b.n	8008f30 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc1e 	bl	8009732 <USBD_CtlError>
              break;
 8008ef6:	e01b      	b.n	8008f30 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10e      	bne.n	8008f1e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <USBD_StdEPReq+0xda>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b80      	cmp	r3, #128	; 0x80
 8008f0a:	d008      	beq.n	8008f1e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 ff79 	bl	8009e10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fcb1 	bl	8009886 <USBD_CtlSendStatus>

              break;
 8008f24:	e004      	b.n	8008f30 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc02 	bl	8009732 <USBD_CtlError>
              break;
 8008f2e:	bf00      	nop
          }
          break;
 8008f30:	e0e0      	b.n	80090f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d002      	beq.n	8008f42 <USBD_StdEPReq+0xfe>
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d015      	beq.n	8008f6c <USBD_StdEPReq+0x128>
 8008f40:	e026      	b.n	8008f90 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00c      	beq.n	8008f62 <USBD_StdEPReq+0x11e>
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b80      	cmp	r3, #128	; 0x80
 8008f4c:	d009      	beq.n	8008f62 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 ff5c 	bl	8009e10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f58:	2180      	movs	r1, #128	; 0x80
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 ff58 	bl	8009e10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f60:	e01c      	b.n	8008f9c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fbe4 	bl	8009732 <USBD_CtlError>
              break;
 8008f6a:	e017      	b.n	8008f9c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	885b      	ldrh	r3, [r3, #2]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d112      	bne.n	8008f9a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 ff63 	bl	8009e4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fc7c 	bl	8009886 <USBD_CtlSendStatus>
              }
              break;
 8008f8e:	e004      	b.n	8008f9a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fbcd 	bl	8009732 <USBD_CtlError>
              break;
 8008f98:	e000      	b.n	8008f9c <USBD_StdEPReq+0x158>
              break;
 8008f9a:	bf00      	nop
          }
          break;
 8008f9c:	e0aa      	b.n	80090f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d002      	beq.n	8008fae <USBD_StdEPReq+0x16a>
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d032      	beq.n	8009012 <USBD_StdEPReq+0x1ce>
 8008fac:	e097      	b.n	80090de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <USBD_StdEPReq+0x180>
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	d004      	beq.n	8008fc4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fbb8 	bl	8009732 <USBD_CtlError>
                break;
 8008fc2:	e091      	b.n	80090e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da0b      	bge.n	8008fe4 <USBD_StdEPReq+0x1a0>
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	3310      	adds	r3, #16
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	4413      	add	r3, r2
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	e00b      	b.n	8008ffc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2202      	movs	r2, #2
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fbfb 	bl	8009806 <USBD_CtlSendData>
              break;
 8009010:	e06a      	b.n	80090e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	da11      	bge.n	800903e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	3318      	adds	r3, #24
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d117      	bne.n	8009064 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fb7b 	bl	8009732 <USBD_CtlError>
                  break;
 800903c:	e054      	b.n	80090e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fb68 	bl	8009732 <USBD_CtlError>
                  break;
 8009062:	e041      	b.n	80090e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	da0b      	bge.n	8009084 <USBD_StdEPReq+0x240>
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	3310      	adds	r3, #16
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	e00b      	b.n	800909c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USBD_StdEPReq+0x266>
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b80      	cmp	r3, #128	; 0x80
 80090a8:	d103      	bne.n	80090b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e00e      	b.n	80090d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fee8 	bl	8009e8c <USBD_LL_IsStallEP>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	e002      	b.n	80090d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2202      	movs	r2, #2
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fb95 	bl	8009806 <USBD_CtlSendData>
              break;
 80090dc:	e004      	b.n	80090e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fb26 	bl	8009732 <USBD_CtlError>
              break;
 80090e6:	bf00      	nop
          }
          break;
 80090e8:	e004      	b.n	80090f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fb20 	bl	8009732 <USBD_CtlError>
          break;
 80090f2:	bf00      	nop
      }
      break;
 80090f4:	e004      	b.n	8009100 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb1a 	bl	8009732 <USBD_CtlError>
      break;
 80090fe:	bf00      	nop
  }

  return ret;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	2b06      	cmp	r3, #6
 800912e:	f200 8128 	bhi.w	8009382 <USBD_GetDescriptor+0x276>
 8009132:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <USBD_GetDescriptor+0x2c>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	08009155 	.word	0x08009155
 800913c:	0800916d 	.word	0x0800916d
 8009140:	080091ad 	.word	0x080091ad
 8009144:	08009383 	.word	0x08009383
 8009148:	08009383 	.word	0x08009383
 800914c:	08009323 	.word	0x08009323
 8009150:	0800934f 	.word	0x0800934f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7c12      	ldrb	r2, [r2, #16]
 8009160:	f107 0108 	add.w	r1, r7, #8
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	60f8      	str	r0, [r7, #12]
      break;
 800916a:	e112      	b.n	8009392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7c1b      	ldrb	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10d      	bne.n	8009190 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f107 0208 	add.w	r2, r7, #8
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	2202      	movs	r2, #2
 800918c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800918e:	e100      	b.n	8009392 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	f107 0208 	add.w	r2, r7, #8
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3301      	adds	r3, #1
 80091a6:	2202      	movs	r2, #2
 80091a8:	701a      	strb	r2, [r3, #0]
      break;
 80091aa:	e0f2      	b.n	8009392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	885b      	ldrh	r3, [r3, #2]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	f200 80ac 	bhi.w	8009310 <USBD_GetDescriptor+0x204>
 80091b8:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USBD_GetDescriptor+0xb4>)
 80091ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091be:	bf00      	nop
 80091c0:	080091d9 	.word	0x080091d9
 80091c4:	0800920d 	.word	0x0800920d
 80091c8:	08009241 	.word	0x08009241
 80091cc:	08009275 	.word	0x08009275
 80091d0:	080092a9 	.word	0x080092a9
 80091d4:	080092dd 	.word	0x080092dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fa:	e091      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa97 	bl	8009732 <USBD_CtlError>
            err++;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	3301      	adds	r3, #1
 8009208:	72fb      	strb	r3, [r7, #11]
          break;
 800920a:	e089      	b.n	8009320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e077      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa7d 	bl	8009732 <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e06f      	b.n	8009320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e05d      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa63 	bl	8009732 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e055      	b.n	8009320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e043      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa49 	bl	8009732 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e03b      	b.n	8009320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e029      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa2f 	bl	8009732 <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e021      	b.n	8009320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e00f      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa15 	bl	8009732 <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e007      	b.n	8009320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa0d 	bl	8009732 <USBD_CtlError>
          err++;
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	3301      	adds	r3, #1
 800931c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800931e:	e038      	b.n	8009392 <USBD_GetDescriptor+0x286>
 8009320:	e037      	b.n	8009392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	7c1b      	ldrb	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	f107 0208 	add.w	r2, r7, #8
 8009336:	4610      	mov	r0, r2
 8009338:	4798      	blx	r3
 800933a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800933c:	e029      	b.n	8009392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9f6 	bl	8009732 <USBD_CtlError>
        err++;
 8009346:	7afb      	ldrb	r3, [r7, #11]
 8009348:	3301      	adds	r3, #1
 800934a:	72fb      	strb	r3, [r7, #11]
      break;
 800934c:	e021      	b.n	8009392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	7c1b      	ldrb	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10d      	bne.n	8009372 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935e:	f107 0208 	add.w	r2, r7, #8
 8009362:	4610      	mov	r0, r2
 8009364:	4798      	blx	r3
 8009366:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3301      	adds	r3, #1
 800936c:	2207      	movs	r2, #7
 800936e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009370:	e00f      	b.n	8009392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f9dc 	bl	8009732 <USBD_CtlError>
        err++;
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	3301      	adds	r3, #1
 800937e:	72fb      	strb	r3, [r7, #11]
      break;
 8009380:	e007      	b.n	8009392 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f9d4 	bl	8009732 <USBD_CtlError>
      err++;
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	3301      	adds	r3, #1
 800938e:	72fb      	strb	r3, [r7, #11]
      break;
 8009390:	bf00      	nop
  }

  if (err != 0U)
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d11c      	bne.n	80093d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009398:	893b      	ldrh	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d011      	beq.n	80093c2 <USBD_GetDescriptor+0x2b6>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	88db      	ldrh	r3, [r3, #6]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	88da      	ldrh	r2, [r3, #6]
 80093aa:	893b      	ldrh	r3, [r7, #8]
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bf28      	it	cs
 80093b0:	4613      	movcs	r3, r2
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093b6:	893b      	ldrh	r3, [r7, #8]
 80093b8:	461a      	mov	r2, r3
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fa22 	bl	8009806 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa5b 	bl	8009886 <USBD_CtlSendStatus>
 80093d0:	e000      	b.n	80093d4 <USBD_GetDescriptor+0x2c8>
    return;
 80093d2:	bf00      	nop
    }
  }
}
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop

080093dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	889b      	ldrh	r3, [r3, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d130      	bne.n	8009450 <USBD_SetAddress+0x74>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	88db      	ldrh	r3, [r3, #6]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d12c      	bne.n	8009450 <USBD_SetAddress+0x74>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	885b      	ldrh	r3, [r3, #2]
 80093fa:	2b7f      	cmp	r3, #127	; 0x7f
 80093fc:	d828      	bhi.n	8009450 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	885b      	ldrh	r3, [r3, #2]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009410:	2b03      	cmp	r3, #3
 8009412:	d104      	bne.n	800941e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f98b 	bl	8009732 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941c:	e01d      	b.n	800945a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7bfa      	ldrb	r2, [r7, #15]
 8009422:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fd5a 	bl	8009ee4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fa28 	bl	8009886 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009444:	e009      	b.n	800945a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944e:	e004      	b.n	800945a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f96d 	bl	8009732 <USBD_CtlError>
  }
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	885b      	ldrh	r3, [r3, #2]
 8009472:	b2da      	uxtb	r2, r3
 8009474:	4b41      	ldr	r3, [pc, #260]	; (800957c <USBD_SetConfig+0x118>)
 8009476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009478:	4b40      	ldr	r3, [pc, #256]	; (800957c <USBD_SetConfig+0x118>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d904      	bls.n	800948a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f955 	bl	8009732 <USBD_CtlError>
 8009488:	e075      	b.n	8009576 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009490:	2b02      	cmp	r3, #2
 8009492:	d002      	beq.n	800949a <USBD_SetConfig+0x36>
 8009494:	2b03      	cmp	r3, #3
 8009496:	d023      	beq.n	80094e0 <USBD_SetConfig+0x7c>
 8009498:	e062      	b.n	8009560 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <USBD_SetConfig+0x118>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01a      	beq.n	80094d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80094a2:	4b36      	ldr	r3, [pc, #216]	; (800957c <USBD_SetConfig+0x118>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094b4:	4b31      	ldr	r3, [pc, #196]	; (800957c <USBD_SetConfig+0x118>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff f9e8 	bl	8008890 <USBD_SetClassConfig>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d104      	bne.n	80094d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f932 	bl	8009732 <USBD_CtlError>
            return;
 80094ce:	e052      	b.n	8009576 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f9d8 	bl	8009886 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094d6:	e04e      	b.n	8009576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f9d4 	bl	8009886 <USBD_CtlSendStatus>
        break;
 80094de:	e04a      	b.n	8009576 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80094e0:	4b26      	ldr	r3, [pc, #152]	; (800957c <USBD_SetConfig+0x118>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d112      	bne.n	800950e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80094f0:	4b22      	ldr	r3, [pc, #136]	; (800957c <USBD_SetConfig+0x118>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80094fa:	4b20      	ldr	r3, [pc, #128]	; (800957c <USBD_SetConfig+0x118>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff f9e4 	bl	80088ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f9bd 	bl	8009886 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800950c:	e033      	b.n	8009576 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800950e:	4b1b      	ldr	r3, [pc, #108]	; (800957c <USBD_SetConfig+0x118>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	429a      	cmp	r2, r3
 800951a:	d01d      	beq.n	8009558 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff f9d2 	bl	80088ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800952a:	4b14      	ldr	r3, [pc, #80]	; (800957c <USBD_SetConfig+0x118>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009534:	4b11      	ldr	r3, [pc, #68]	; (800957c <USBD_SetConfig+0x118>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff f9a8 	bl	8008890 <USBD_SetClassConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	2b02      	cmp	r3, #2
 8009544:	d104      	bne.n	8009550 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8f2 	bl	8009732 <USBD_CtlError>
            return;
 800954e:	e012      	b.n	8009576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f998 	bl	8009886 <USBD_CtlSendStatus>
        break;
 8009556:	e00e      	b.n	8009576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f994 	bl	8009886 <USBD_CtlSendStatus>
        break;
 800955e:	e00a      	b.n	8009576 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f8e5 	bl	8009732 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009568:	4b04      	ldr	r3, [pc, #16]	; (800957c <USBD_SetConfig+0x118>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff f9ad 	bl	80088ce <USBD_ClrClassConfig>
        break;
 8009574:	bf00      	nop
    }
  }
}
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	2000068e 	.word	0x2000068e

08009580 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d004      	beq.n	800959c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8cc 	bl	8009732 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800959a:	e022      	b.n	80095e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	dc02      	bgt.n	80095ac <USBD_GetConfig+0x2c>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc03      	bgt.n	80095b2 <USBD_GetConfig+0x32>
 80095aa:	e015      	b.n	80095d8 <USBD_GetConfig+0x58>
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d00b      	beq.n	80095c8 <USBD_GetConfig+0x48>
 80095b0:	e012      	b.n	80095d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3308      	adds	r3, #8
 80095bc:	2201      	movs	r2, #1
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f920 	bl	8009806 <USBD_CtlSendData>
        break;
 80095c6:	e00c      	b.n	80095e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3304      	adds	r3, #4
 80095cc:	2201      	movs	r2, #1
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f918 	bl	8009806 <USBD_CtlSendData>
        break;
 80095d6:	e004      	b.n	80095e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f8a9 	bl	8009732 <USBD_CtlError>
        break;
 80095e0:	bf00      	nop
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fa:	3b01      	subs	r3, #1
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d81e      	bhi.n	800963e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	88db      	ldrh	r3, [r3, #6]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d004      	beq.n	8009612 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f891 	bl	8009732 <USBD_CtlError>
        break;
 8009610:	e01a      	b.n	8009648 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f043 0202 	orr.w	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	330c      	adds	r3, #12
 8009632:	2202      	movs	r2, #2
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f8e5 	bl	8009806 <USBD_CtlSendData>
      break;
 800963c:	e004      	b.n	8009648 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f876 	bl	8009732 <USBD_CtlError>
      break;
 8009646:	bf00      	nop
  }
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d106      	bne.n	8009670 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f90b 	bl	8009886 <USBD_CtlSendStatus>
  }
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009688:	3b01      	subs	r3, #1
 800968a:	2b02      	cmp	r3, #2
 800968c:	d80b      	bhi.n	80096a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d10c      	bne.n	80096b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8f1 	bl	8009886 <USBD_CtlSendStatus>
      }
      break;
 80096a4:	e004      	b.n	80096b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f842 	bl	8009732 <USBD_CtlError>
      break;
 80096ae:	e000      	b.n	80096b2 <USBD_ClrFeature+0x3a>
      break;
 80096b0:	bf00      	nop
  }
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785a      	ldrb	r2, [r3, #1]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	3302      	adds	r3, #2
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	3303      	adds	r3, #3
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	021b      	lsls	r3, r3, #8
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	3304      	adds	r3, #4
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	3305      	adds	r3, #5
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	b29b      	uxth	r3, r3
 8009704:	4413      	add	r3, r2
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	3306      	adds	r3, #6
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b29a      	uxth	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	3307      	adds	r3, #7
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	b29b      	uxth	r3, r3
 8009720:	4413      	add	r3, r2
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	80da      	strh	r2, [r3, #6]

}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr

08009732 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800973c:	2180      	movs	r1, #128	; 0x80
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fb66 	bl	8009e10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009744:	2100      	movs	r1, #0
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fb62 	bl	8009e10 <USBD_LL_StallEP>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d032      	beq.n	80097d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f834 	bl	80097d8 <USBD_GetLen>
 8009770:	4603      	mov	r3, r0
 8009772:	3301      	adds	r3, #1
 8009774:	b29b      	uxth	r3, r3
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	75fa      	strb	r2, [r7, #23]
 8009784:	461a      	mov	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4413      	add	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	75fa      	strb	r2, [r7, #23]
 8009796:	461a      	mov	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4413      	add	r3, r2
 800979c:	2203      	movs	r2, #3
 800979e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097a0:	e012      	b.n	80097c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	60fa      	str	r2, [r7, #12]
 80097a8:	7dfa      	ldrb	r2, [r7, #23]
 80097aa:	1c51      	adds	r1, r2, #1
 80097ac:	75f9      	strb	r1, [r7, #23]
 80097ae:	4611      	mov	r1, r2
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	440a      	add	r2, r1
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	75fa      	strb	r2, [r7, #23]
 80097be:	461a      	mov	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4413      	add	r3, r2
 80097c4:	2200      	movs	r2, #0
 80097c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e8      	bne.n	80097a2 <USBD_GetString+0x4e>
    }
  }
}
 80097d0:	bf00      	nop
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80097e4:	e005      	b.n	80097f2 <USBD_GetLen+0x1a>
  {
    len++;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	3301      	adds	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3301      	adds	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f5      	bne.n	80097e6 <USBD_GetLen+0xe>
  }

  return len;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr

08009806 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	4613      	mov	r3, r2
 8009812:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2202      	movs	r2, #2
 8009818:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800981c:	88fa      	ldrh	r2, [r7, #6]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009828:	88fb      	ldrh	r3, [r7, #6]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	2100      	movs	r1, #0
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fb77 	bl	8009f22 <USBD_LL_Transmit>

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	4613      	mov	r3, r2
 800984a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800984c:	88fb      	ldrh	r3, [r7, #6]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	2100      	movs	r1, #0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fb65 	bl	8009f22 <USBD_LL_Transmit>

  return USBD_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	4613      	mov	r3, r2
 800986e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009870:	88fb      	ldrh	r3, [r7, #6]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	2100      	movs	r1, #0
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fb76 	bl	8009f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2204      	movs	r2, #4
 8009892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009896:	2300      	movs	r3, #0
 8009898:	2200      	movs	r2, #0
 800989a:	2100      	movs	r1, #0
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fb40 	bl	8009f22 <USBD_LL_Transmit>

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2205      	movs	r2, #5
 80098b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098bc:	2300      	movs	r3, #0
 80098be:	2200      	movs	r2, #0
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fb50 	bl	8009f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098d8:	2200      	movs	r2, #0
 80098da:	490e      	ldr	r1, [pc, #56]	; (8009914 <MX_USB_DEVICE_Init+0x40>)
 80098dc:	480e      	ldr	r0, [pc, #56]	; (8009918 <MX_USB_DEVICE_Init+0x44>)
 80098de:	f7fe ff7d 	bl	80087dc <USBD_Init>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098e8:	f7f6 fe26 	bl	8000538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80098ec:	490b      	ldr	r1, [pc, #44]	; (800991c <MX_USB_DEVICE_Init+0x48>)
 80098ee:	480a      	ldr	r0, [pc, #40]	; (8009918 <MX_USB_DEVICE_Init+0x44>)
 80098f0:	f7fe ff9f 	bl	8008832 <USBD_RegisterClass>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098fa:	f7f6 fe1d 	bl	8000538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098fe:	4806      	ldr	r0, [pc, #24]	; (8009918 <MX_USB_DEVICE_Init+0x44>)
 8009900:	f7fe ffb0 	bl	8008864 <USBD_Start>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800990a:	f7f6 fe15 	bl	8000538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800990e:	bf00      	nop
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200001f0 	.word	0x200001f0
 8009918:	20000a10 	.word	0x20000a10
 800991c:	200000e8 	.word	0x200000e8

08009920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2212      	movs	r2, #18
 8009930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009932:	4b03      	ldr	r3, [pc, #12]	; (8009940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	bc80      	pop	{r7}
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	2000020c 	.word	0x2000020c

08009944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2204      	movs	r2, #4
 8009954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009956:	4b03      	ldr	r3, [pc, #12]	; (8009964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000220 	.word	0x20000220

08009968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	; (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009980:	f7ff fee8 	bl	8009754 <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	; (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800998c:	f7ff fee2 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000cd4 	.word	0x20000cd4
 80099a0:	0800a16c 	.word	0x0800a16c

080099a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	4904      	ldr	r1, [pc, #16]	; (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099b4:	4804      	ldr	r0, [pc, #16]	; (80099c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099b6:	f7ff fecd 	bl	8009754 <USBD_GetString>
  return USBD_StrDesc;
 80099ba:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000cd4 	.word	0x20000cd4
 80099c8:	0800a178 	.word	0x0800a178

080099cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	221a      	movs	r2, #26
 80099dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099de:	f000 f843 	bl	8009a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099e2:	4b02      	ldr	r3, [pc, #8]	; (80099ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20000224 	.word	0x20000224

080099f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	; (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a08:	f7ff fea4 	bl	8009754 <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a14:	f7ff fe9e 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000cd4 	.word	0x20000cd4
 8009a28:	0800a18c 	.word	0x0800a18c

08009a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	; (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a44:	f7ff fe86 	bl	8009754 <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	; (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a50:	f7ff fe80 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000cd4 	.word	0x20000cd4
 8009a64:	0800a198 	.word	0x0800a198

08009a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <Get_SerialNum+0x44>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a74:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <Get_SerialNum+0x48>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a7a:	4b0e      	ldr	r3, [pc, #56]	; (8009ab4 <Get_SerialNum+0x4c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a8e:	2208      	movs	r2, #8
 8009a90:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <Get_SerialNum+0x50>)
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f814 	bl	8009ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a98:	2204      	movs	r2, #4
 8009a9a:	4908      	ldr	r1, [pc, #32]	; (8009abc <Get_SerialNum+0x54>)
 8009a9c:	68b8      	ldr	r0, [r7, #8]
 8009a9e:	f000 f80f 	bl	8009ac0 <IntToUnicode>
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	1ffff7e8 	.word	0x1ffff7e8
 8009ab0:	1ffff7ec 	.word	0x1ffff7ec
 8009ab4:	1ffff7f0 	.word	0x1ffff7f0
 8009ab8:	20000226 	.word	0x20000226
 8009abc:	20000236 	.word	0x20000236

08009ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4613      	mov	r3, r2
 8009acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75fb      	strb	r3, [r7, #23]
 8009ad6:	e027      	b.n	8009b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	2b09      	cmp	r3, #9
 8009ade:	d80b      	bhi.n	8009af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4619      	mov	r1, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	440b      	add	r3, r1
 8009af0:	3230      	adds	r2, #48	; 0x30
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	e00a      	b.n	8009b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	0f1b      	lsrs	r3, r3, #28
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	4619      	mov	r1, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	440b      	add	r3, r1
 8009b08:	3237      	adds	r2, #55	; 0x37
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	3301      	adds	r3, #1
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	3301      	adds	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	7dfa      	ldrb	r2, [r7, #23]
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d3d3      	bcc.n	8009ad8 <IntToUnicode+0x18>
  }
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr

08009b3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a0d      	ldr	r2, [pc, #52]	; (8009b80 <HAL_PCD_MspInit+0x44>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d113      	bne.n	8009b76 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <HAL_PCD_MspInit+0x48>)
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	4a0c      	ldr	r2, [pc, #48]	; (8009b84 <HAL_PCD_MspInit+0x48>)
 8009b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b58:	61d3      	str	r3, [r2, #28]
 8009b5a:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <HAL_PCD_MspInit+0x48>)
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	2014      	movs	r0, #20
 8009b6c:	f7f8 fd21 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b70:	2014      	movs	r0, #20
 8009b72:	f7f8 fd3a 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b76:	bf00      	nop
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	40005c00 	.word	0x40005c00
 8009b84:	40021000 	.word	0x40021000

08009b88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7fe fea8 	bl	80088f4 <USBD_LL_SetupStage>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	440b      	add	r3, r1
 8009bcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	f7fe feda 	bl	800898e <USBD_LL_DataOutStage>
}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	440b      	add	r3, r1
 8009c02:	333c      	adds	r3, #60	; 0x3c
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f7fe ff31 	bl	8008a70 <USBD_LL_DataInStage>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff f841 	bl	8008cac <USBD_LL_SOF>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d001      	beq.n	8009c4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c46:	f7f6 fc77 	bl	8000538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c50:	7bfa      	ldrb	r2, [r7, #15]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fff1 	bl	8008c3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe ffaa 	bl	8008bba <USBD_LL_Reset>
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe ffeb 	bl	8008c5a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c8c:	4b04      	ldr	r3, [pc, #16]	; (8009ca0 <HAL_PCD_SuspendCallback+0x30>)
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	4a03      	ldr	r2, [pc, #12]	; (8009ca0 <HAL_PCD_SuspendCallback+0x30>)
 8009c92:	f043 0306 	orr.w	r3, r3, #6
 8009c96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	e000ed00 	.word	0xe000ed00

08009ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe ffe5 	bl	8008c82 <USBD_LL_Resume>
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009cc8:	4a1f      	ldr	r2, [pc, #124]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cda:	4a1c      	ldr	r2, [pc, #112]	; (8009d4c <USBD_LL_Init+0x8c>)
 8009cdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cde:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <USBD_LL_Init+0x88>)
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ce4:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <USBD_LL_Init+0x88>)
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009cea:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009cf0:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009cfc:	4812      	ldr	r0, [pc, #72]	; (8009d48 <USBD_LL_Init+0x88>)
 8009cfe:	f7f9 fc7f 	bl	8003600 <HAL_PCD_Init>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d08:	f7f6 fc16 	bl	8000538 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d12:	2318      	movs	r3, #24
 8009d14:	2200      	movs	r2, #0
 8009d16:	2100      	movs	r1, #0
 8009d18:	f7fb f8dc 	bl	8004ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d22:	2358      	movs	r3, #88	; 0x58
 8009d24:	2200      	movs	r2, #0
 8009d26:	2180      	movs	r1, #128	; 0x80
 8009d28:	f7fb f8d4 	bl	8004ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d36:	2200      	movs	r2, #0
 8009d38:	2181      	movs	r1, #129	; 0x81
 8009d3a:	f7fb f8cb 	bl	8004ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	20000ed4 	.word	0x20000ed4
 8009d4c:	40005c00 	.word	0x40005c00

08009d50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f9 fd55 	bl	8003816 <HAL_PCD_Start>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f93c 	bl	8009ff0 <USBD_Get_USB_Status>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	4608      	mov	r0, r1
 8009d90:	4611      	mov	r1, r2
 8009d92:	461a      	mov	r2, r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	70fb      	strb	r3, [r7, #3]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70bb      	strb	r3, [r7, #2]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dae:	78bb      	ldrb	r3, [r7, #2]
 8009db0:	883a      	ldrh	r2, [r7, #0]
 8009db2:	78f9      	ldrb	r1, [r7, #3]
 8009db4:	f7f9 fecd 	bl	8003b52 <HAL_PCD_EP_Open>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f916 	bl	8009ff0 <USBD_Get_USB_Status>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	4611      	mov	r1, r2
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f9 ff14 	bl	8003c1e <HAL_PCD_EP_Close>
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 f8f7 	bl	8009ff0 <USBD_Get_USB_Status>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e2a:	78fa      	ldrb	r2, [r7, #3]
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7f9 ffbd 	bl	8003dae <HAL_PCD_EP_SetStall>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f8d8 	bl	8009ff0 <USBD_Get_USB_Status>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e68:	78fa      	ldrb	r2, [r7, #3]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f9 fffe 	bl	8003e6e <HAL_PCD_EP_ClrStall>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f8b9 	bl	8009ff0 <USBD_Get_USB_Status>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	da0c      	bge.n	8009ec2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eae:	68f9      	ldr	r1, [r7, #12]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	440b      	add	r3, r1
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	e00b      	b.n	8009eda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec8:	68f9      	ldr	r1, [r7, #12]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	440b      	add	r3, r1
 8009ed4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ed8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f9 fe00 	bl	8003b08 <HAL_PCD_SetAddress>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 f86e 	bl	8009ff0 <USBD_Get_USB_Status>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b086      	sub	sp, #24
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	460b      	mov	r3, r1
 8009f30:	72fb      	strb	r3, [r7, #11]
 8009f32:	4613      	mov	r3, r2
 8009f34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f44:	893b      	ldrh	r3, [r7, #8]
 8009f46:	7af9      	ldrb	r1, [r7, #11]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f7f9 feed 	bl	8003d28 <HAL_PCD_EP_Transmit>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 f84b 	bl	8009ff0 <USBD_Get_USB_Status>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	461a      	mov	r2, r3
 8009f74:	460b      	mov	r3, r1
 8009f76:	72fb      	strb	r3, [r7, #11]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f8a:	893b      	ldrh	r3, [r7, #8]
 8009f8c:	7af9      	ldrb	r1, [r7, #11]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f7f9 fe8d 	bl	8003cae <HAL_PCD_EP_Receive>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f828 	bl	8009ff0 <USBD_Get_USB_Status>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <USBD_static_malloc+0x14>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr
 8009fc4:	20000690 	.word	0x20000690

08009fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr

08009fda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b083      	sub	sp, #12
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr

08009ff0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	2b03      	cmp	r3, #3
 800a002:	d817      	bhi.n	800a034 <USBD_Get_USB_Status+0x44>
 800a004:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <USBD_Get_USB_Status+0x1c>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a01d 	.word	0x0800a01d
 800a010:	0800a023 	.word	0x0800a023
 800a014:	0800a029 	.word	0x0800a029
 800a018:	0800a02f 	.word	0x0800a02f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e00b      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a022:	2302      	movs	r3, #2
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e008      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a028:	2301      	movs	r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	e005      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a02e:	2302      	movs	r3, #2
 800a030:	73fb      	strb	r3, [r7, #15]
    break;
 800a032:	e002      	b.n	800a03a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a034:	2302      	movs	r3, #2
 800a036:	73fb      	strb	r3, [r7, #15]
    break;
 800a038:	bf00      	nop
  }
  return usb_status;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	bc80      	pop	{r7}
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop

0800a048 <__libc_init_array>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	2600      	movs	r6, #0
 800a04c:	4d0c      	ldr	r5, [pc, #48]	; (800a080 <__libc_init_array+0x38>)
 800a04e:	4c0d      	ldr	r4, [pc, #52]	; (800a084 <__libc_init_array+0x3c>)
 800a050:	1b64      	subs	r4, r4, r5
 800a052:	10a4      	asrs	r4, r4, #2
 800a054:	42a6      	cmp	r6, r4
 800a056:	d109      	bne.n	800a06c <__libc_init_array+0x24>
 800a058:	f000 f82a 	bl	800a0b0 <_init>
 800a05c:	2600      	movs	r6, #0
 800a05e:	4d0a      	ldr	r5, [pc, #40]	; (800a088 <__libc_init_array+0x40>)
 800a060:	4c0a      	ldr	r4, [pc, #40]	; (800a08c <__libc_init_array+0x44>)
 800a062:	1b64      	subs	r4, r4, r5
 800a064:	10a4      	asrs	r4, r4, #2
 800a066:	42a6      	cmp	r6, r4
 800a068:	d105      	bne.n	800a076 <__libc_init_array+0x2e>
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a070:	4798      	blx	r3
 800a072:	3601      	adds	r6, #1
 800a074:	e7ee      	b.n	800a054 <__libc_init_array+0xc>
 800a076:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07a:	4798      	blx	r3
 800a07c:	3601      	adds	r6, #1
 800a07e:	e7f2      	b.n	800a066 <__libc_init_array+0x1e>
 800a080:	0800af1c 	.word	0x0800af1c
 800a084:	0800af1c 	.word	0x0800af1c
 800a088:	0800af1c 	.word	0x0800af1c
 800a08c:	0800af20 	.word	0x0800af20

0800a090 <memset>:
 800a090:	4603      	mov	r3, r0
 800a092:	4402      	add	r2, r0
 800a094:	4293      	cmp	r3, r2
 800a096:	d100      	bne.n	800a09a <memset+0xa>
 800a098:	4770      	bx	lr
 800a09a:	f803 1b01 	strb.w	r1, [r3], #1
 800a09e:	e7f9      	b.n	800a094 <memset+0x4>

0800a0a0 <strcpy>:
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0a6:	f803 2b01 	strb.w	r2, [r3], #1
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	d1f9      	bne.n	800a0a2 <strcpy+0x2>
 800a0ae:	4770      	bx	lr

0800a0b0 <_init>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr

0800a0bc <_fini>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr
