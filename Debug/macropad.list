
macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c4  080087c4  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  080087c4  080087c4  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087c4  080087c4  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080087cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e94  20000214  080089e0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a8  080089e0  000210a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f32  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313d  00000000  00000000  0003116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a082  00000000  00000000  00035d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ef5  00000000  00000000  0004fe02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874ed  00000000  00000000  00062cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea1e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000ea234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000214 	.word	0x20000214
 8000128:	00000000 	.word	0x00000000
 800012c:	08008714 	.word	0x08008714

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000218 	.word	0x20000218
 8000148:	08008714 	.word	0x08008714

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fdf0 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f89a 	bl	8000290 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 feec 	bl	8007f38 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000160:	f000 f868 	bl	8000234 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  systemInit();
 8000164:	f000 f92c 	bl	80003c0 <systemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Button=scan();
 8000168:	f000 fb2c 	bl	80007c4 <scan>
 800016c:	4603      	mov	r3, r0
 800016e:	461a      	mov	r2, r3
 8000170:	4b01      	ldr	r3, [pc, #4]	; (8000178 <main+0x2c>)
 8000172:	701a      	strb	r2, [r3, #0]
 8000174:	e7f8      	b.n	8000168 <main+0x1c>
 8000176:	bf00      	nop
 8000178:	200006c8 	.word	0x200006c8

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	; 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f008 fab2 	bl	80086f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f003 fa14 	bl	8003600 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 f97f 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2102      	movs	r1, #2
 8000200:	4618      	mov	r0, r3
 8000202:	f003 fc7f 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800020c:	f000 f968 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000210:	2310      	movs	r3, #16
 8000212:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000214:	2300      	movs	r3, #0
 8000216:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fdf6 	bl	8003e0c <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000226:	f000 f95b 	bl	80004e0 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	; 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_I2C1_Init+0x50>)
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <MX_I2C1_Init+0x54>)
 800023c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_I2C1_Init+0x50>)
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <MX_I2C1_Init+0x58>)
 8000242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_I2C1_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_I2C1_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_I2C1_Init+0x50>)
 8000252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <MX_I2C1_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_I2C1_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_I2C1_Init+0x50>)
 8000272:	f001 f8bf 	bl	80013f4 <HAL_I2C_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 f930 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000670 	.word	0x20000670
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a4:	4b42      	ldr	r3, [pc, #264]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a41      	ldr	r2, [pc, #260]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b3f      	ldr	r3, [pc, #252]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b3c      	ldr	r3, [pc, #240]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b39      	ldr	r3, [pc, #228]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b36      	ldr	r3, [pc, #216]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a35      	ldr	r2, [pc, #212]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b33      	ldr	r3, [pc, #204]	; (80003b0 <MX_GPIO_Init+0x120>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	21c0      	movs	r1, #192	; 0xc0
 80002f0:	4830      	ldr	r0, [pc, #192]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002f2:	f001 f84e 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2103      	movs	r1, #3
 80002fa:	482f      	ldr	r0, [pc, #188]	; (80003b8 <MX_GPIO_Init+0x128>)
 80002fc:	f001 f849 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000300:	23c0      	movs	r3, #192	; 0xc0
 8000302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000308:	2302      	movs	r3, #2
 800030a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2302      	movs	r3, #2
 800030e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	4827      	ldr	r0, [pc, #156]	; (80003b4 <MX_GPIO_Init+0x124>)
 8000318:	f000 fea0 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800031c:	2303      	movs	r3, #3
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000324:	2302      	movs	r3, #2
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2302      	movs	r3, #2
 800032a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	4619      	mov	r1, r3
 8000332:	4821      	ldr	r0, [pc, #132]	; (80003b8 <MX_GPIO_Init+0x128>)
 8000334:	f000 fe92 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8000338:	f640 4304 	movw	r3, #3076	; 0xc04
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	481a      	ldr	r0, [pc, #104]	; (80003b8 <MX_GPIO_Init+0x128>)
 800034e:	f000 fe85 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000352:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0x12c>)
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	4814      	ldr	r0, [pc, #80]	; (80003b8 <MX_GPIO_Init+0x128>)
 8000368:	f000 fe78 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800036c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_GPIO_Init+0x12c>)
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_GPIO_Init+0x124>)
 8000382:	f000 fe6b 	bl	800105c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	2017      	movs	r0, #23
 800038c:	f000 fe2f 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000390:	2017      	movs	r0, #23
 8000392:	f000 fe48 	bl	8001026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	2028      	movs	r0, #40	; 0x28
 800039c:	f000 fe27 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a0:	2028      	movs	r0, #40	; 0x28
 80003a2:	f000 fe40 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	10110000 	.word	0x10110000

080003c0 <systemInit>:

/* USER CODE BEGIN 4 */
void systemInit()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	  ssd1306_Init(&hi2cScreen);
 80003c4:	4812      	ldr	r0, [pc, #72]	; (8000410 <systemInit+0x50>)
 80003c6:	f000 fb3d 	bl	8000a44 <ssd1306_Init>
	  ssd1306_Fill(Black);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fc5a 	bl	8000c84 <ssd1306_Fill>
	  ssd1306_UpdateScreen(&hi2cScreen);
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <systemInit+0x50>)
 80003d2:	f000 fc79 	bl	8000cc8 <ssd1306_UpdateScreen>
	  cursorPosition 	 = 1;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <systemInit+0x54>)
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
	  topMenuPosition 	 = 1;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <systemInit+0x58>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
	  bottomMenuPosition = 3;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <systemInit+0x5c>)
 80003e4:	2203      	movs	r2, #3
 80003e6:	701a      	strb	r2, [r3, #0]
	  Button		 	 = 0;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <systemInit+0x60>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
	  rotary1Counter	 = 0;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <systemInit+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
	  rotary2Counter	 = 0;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <systemInit+0x68>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
	  last_debounce_time = 0;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <systemInit+0x6c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
	  InitMenu();
 8000400:	f000 fa28 	bl	8000854 <InitMenu>
	  currentM=&modeM;
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <systemInit+0x70>)
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <systemInit+0x74>)
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000670 	.word	0x20000670
 8000414:	20000738 	.word	0x20000738
 8000418:	200008f1 	.word	0x200008f1
 800041c:	200008f0 	.word	0x200008f0
 8000420:	200006c8 	.word	0x200006c8
 8000424:	2000066c 	.word	0x2000066c
 8000428:	200006c9 	.word	0x200006c9
 800042c:	200007a8 	.word	0x200007a8
 8000430:	200006c4 	.word	0x200006c4
 8000434:	20000884 	.word	0x20000884

08000438 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	80fb      	strh	r3, [r7, #6]
	 uint32_t currentTime = HAL_GetTick();
 8000442:	f000 fccf 	bl	8000de4 <HAL_GetTick>
 8000446:	60f8      	str	r0, [r7, #12]

	  if (currentTime < last_debounce_time + DEBOUNCE_TIME_MS)
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <HAL_GPIO_EXTI_Callback+0x98>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3314      	adds	r3, #20
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	429a      	cmp	r2, r3
 8000452:	d338      	bcc.n	80004c6 <HAL_GPIO_EXTI_Callback+0x8e>
	  {
	    // Debounce period not yet expired, so return without updating the count
	    return;
	  }

	  if (GPIO_Pin == GPIO_PIN_8)
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d117      	bne.n	800048c <HAL_GPIO_EXTI_Callback+0x54>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 800045c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000462:	f000 ff7f 	bl	8001364 <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d106      	bne.n	800047a <HAL_GPIO_EXTI_Callback+0x42>
	    {
	    	rotary1Counter--;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	e005      	b.n	8000486 <HAL_GPIO_EXTI_Callback+0x4e>
	    }
	    else
	    {
	    	rotary1Counter++;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	3301      	adds	r3, #1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000484:	701a      	strb	r2, [r3, #0]
	    }

	   last_debounce_time = currentTime;
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	6013      	str	r3, [r2, #0]
	  }

	  if (GPIO_Pin == GPIO_PIN_14)
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000492:	d119      	bne.n	80004c8 <HAL_GPIO_EXTI_Callback+0x90>
	  {
	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 8000494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000498:	480e      	ldr	r0, [pc, #56]	; (80004d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800049a:	f000 ff63 	bl	8001364 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d106      	bne.n	80004b2 <HAL_GPIO_EXTI_Callback+0x7a>
	    {
	    	rotary2Counter--;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <HAL_GPIO_EXTI_Callback+0xa4>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_GPIO_EXTI_Callback+0xa4>)
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	e005      	b.n	80004be <HAL_GPIO_EXTI_Callback+0x86>
	    }
	    else
	    {
	    	rotary2Counter++;
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_GPIO_EXTI_Callback+0xa4>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	3301      	adds	r3, #1
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_GPIO_EXTI_Callback+0xa4>)
 80004bc:	701a      	strb	r2, [r3, #0]
	    }

	   last_debounce_time = currentTime;
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_GPIO_EXTI_Callback+0x98>)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	e000      	b.n	80004c8 <HAL_GPIO_EXTI_Callback+0x90>
	    return;
 80004c6:	bf00      	nop
	  }


}
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200007a8 	.word	0x200007a8
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	2000066c 	.word	0x2000066c
 80004dc:	200006c9 	.word	0x200006c9

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <HAL_I2C_MspInit+0x90>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d132      	bne.n	80005d6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058e:	2312      	movs	r3, #18
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2303      	movs	r3, #3
 8000594:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <HAL_I2C_MspInit+0x98>)
 800059e:	f000 fd5d 	bl	800105c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_I2C_MspInit+0x9c>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
 80005a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <HAL_I2C_MspInit+0x9c>)
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 80005c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_I2C_MspInit+0x94>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	; 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40005400 	.word	0x40005400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	40010000 	.word	0x40010000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000636:	f000 fbc3 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000646:	f001 fc60 	bl	8001f0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000dbc 	.word	0x20000dbc

08000654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000658:	f44f 7080 	mov.w	r0, #256	; 0x100
 800065c:	f000 feb2 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000668:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800066c:	f000 feaa 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000670:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000674:	f000 fea6 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000678:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800067c:	f000 fea2 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff ffe5 	bl	8000684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f007 fff7 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fd45 	bl	800014c <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80006cc:	080087cc 	.word	0x080087cc
  ldr r2, =_sbss
 80006d0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80006d4:	200010a8 	.word	0x200010a8

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <rowread>:





GPIO_PinState rowread(uint8_t rowNumber){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(rowPort[rowNumber],rowPin[rowNumber]);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <rowread+0x2c>)
 80006ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4906      	ldr	r1, [pc, #24]	; (800070c <rowread+0x30>)
 80006f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4610      	mov	r0, r2
 80006fa:	f000 fe33 	bl	8001364 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000014 	.word	0x20000014
 800070c:	20000004 	.word	0x20000004

08000710 <setcolumn>:

void setcolumn(uint8_t columnNumber){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_SET);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <setcolumn+0x78>)
 800071e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <setcolumn+0x7c>)
 8000726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	f000 fe30 	bl	8001392 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8000732:	2301      	movs	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e01e      	b.n	8000776 <setcolumn+0x66>
		HAL_GPIO_WritePin(columnPort[(columnNumber+i)%columnNumber],columnPin[(columnNumber+i)%columnNumber], GPIO_PIN_RESET);
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4413      	add	r3, r2
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	fb93 f1f2 	sdiv	r1, r3, r2
 8000744:	fb01 f202 	mul.w	r2, r1, r2
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <setcolumn+0x78>)
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	fb93 f1f2 	sdiv	r1, r3, r2
 800075c:	fb01 f202 	mul.w	r2, r1, r2
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <setcolumn+0x7c>)
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	f000 fe11 	bl	8001392 <HAL_GPIO_WritePin>
	for(int i=1;i<columnNumber;i++){
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	429a      	cmp	r2, r3
 800077c:	dbdc      	blt.n	8000738 <setcolumn+0x28>
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000020 	.word	0x20000020
 800078c:	2000000c 	.word	0x2000000c

08000790 <resetcolumn>:

void resetcolumn(uint8_t columnNumber){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(columnPort[columnNumber],columnPin[columnNumber], GPIO_PIN_RESET);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <resetcolumn+0x2c>)
 800079e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <resetcolumn+0x30>)
 80007a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f000 fdf0 	bl	8001392 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000020 	.word	0x20000020
 80007c0:	2000000c 	.word	0x2000000c

080007c4 <scan>:

uint8_t scan(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	uint8_t pressedButton=0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	71fb      	strb	r3, [r7, #7]

	for(int i=0; i<ColumnNumber;i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	e037      	b.n	8000844 <scan+0x80>
	{

		HAL_Delay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fb0f 	bl	8000df8 <HAL_Delay>
		setcolumn(i);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff96 	bl	8000710 <setcolumn>
		for(int j=0;j<RowNumber;j++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	e021      	b.n	800082e <scan+0x6a>
		{
			if(rowread(j)==GPIO_PIN_SET)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff74 	bl	80006dc <rowread>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d113      	bne.n	8000822 <scan+0x5e>
			{
				pressedButton=j*4+i+1;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	b2da      	uxtb	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4413      	add	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
				resetcolumn(i);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffbc 	bl	8000790 <resetcolumn>
				HAL_Delay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 faed 	bl	8000df8 <HAL_Delay>
				return pressedButton;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	e014      	b.n	800084c <scan+0x88>

			}

			HAL_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fae8 	bl	8000df8 <HAL_Delay>
		for(int j=0;j<RowNumber;j++)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	2b02      	cmp	r3, #2
 8000832:	ddda      	ble.n	80007ea <scan+0x26>
		}
		resetcolumn(i);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffa9 	bl	8000790 <resetcolumn>
	for(int i=0; i<ColumnNumber;i++)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b03      	cmp	r3, #3
 8000848:	ddc4      	ble.n	80007d4 <scan+0x10>
	}
	return pressedButton;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <InitMenu>:
char ButtonMenuItems[][maxCharacterOfMenuItem]	={"Display","Mode"};
char DisplayMenuItems[][maxCharacterOfMenuItem]	={"All","Pressed"};
char ModeMenuItems[][maxCharacterOfMenuItem]		={"Kicad","Eagle","Phtshop","Premiere","Custom 1","Custom 2", "Custom 3"};
/*------------------------------------------------------------------------------------*/

void InitMenu(){
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af06      	add	r7, sp, #24


	/*--------------------------------------------------------------------------------*/
	BuildMenu(&mainM, "Main",MainMenuItems, 2, executeMain, 0, &buttonM, 0, 0);
 800085a:	2300      	movs	r3, #0
 800085c:	9304      	str	r3, [sp, #16]
 800085e:	2300      	movs	r3, #0
 8000860:	9303      	str	r3, [sp, #12]
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <InitMenu+0xb4>)
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2300      	movs	r3, #0
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <InitMenu+0xb8>)
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2302      	movs	r3, #2
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <InitMenu+0xbc>)
 8000872:	4928      	ldr	r1, [pc, #160]	; (8000914 <InitMenu+0xc0>)
 8000874:	4828      	ldr	r0, [pc, #160]	; (8000918 <InitMenu+0xc4>)
 8000876:	f000 f88d 	bl	8000994 <BuildMenu>
	/*--------------------------------------------------------------------------------*/

	/*--------------------------------------------------------------------------------*/
	BuildMenu(&buttonM, "Button", ButtonMenuItems, 2, executeButton, &mainM, &displayM, &scrollM, &scrollM);
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <InitMenu+0xc8>)
 800087c:	9304      	str	r3, [sp, #16]
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <InitMenu+0xc8>)
 8000880:	9303      	str	r3, [sp, #12]
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <InitMenu+0xcc>)
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <InitMenu+0xc4>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <InitMenu+0xd0>)
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2302      	movs	r3, #2
 8000890:	4a25      	ldr	r2, [pc, #148]	; (8000928 <InitMenu+0xd4>)
 8000892:	4926      	ldr	r1, [pc, #152]	; (800092c <InitMenu+0xd8>)
 8000894:	481c      	ldr	r0, [pc, #112]	; (8000908 <InitMenu+0xb4>)
 8000896:	f000 f87d 	bl	8000994 <BuildMenu>
	BuildMenu(&scrollM, "Scroll", 0, 0, executeScroll, &mainM, 0, &buttonM, &buttonM);
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <InitMenu+0xb4>)
 800089c:	9304      	str	r3, [sp, #16]
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <InitMenu+0xb4>)
 80008a0:	9303      	str	r3, [sp, #12]
 80008a2:	2300      	movs	r3, #0
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <InitMenu+0xc4>)
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <InitMenu+0xdc>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	4920      	ldr	r1, [pc, #128]	; (8000934 <InitMenu+0xe0>)
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <InitMenu+0xc8>)
 80008b6:	f000 f86d 	bl	8000994 <BuildMenu>
	/*--------------------------------------------------------------------------------*/

	/*--------------------------------------------------------------------------------*/
	BuildMenu(&displayM, "Display", DisplayMenuItems, 2, executeDisplay, &buttonM, 0, &modeM, &modeM);
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <InitMenu+0xe4>)
 80008bc:	9304      	str	r3, [sp, #16]
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <InitMenu+0xe4>)
 80008c0:	9303      	str	r3, [sp, #12]
 80008c2:	2300      	movs	r3, #0
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <InitMenu+0xb4>)
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <InitMenu+0xe8>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2302      	movs	r3, #2
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <InitMenu+0xec>)
 80008d2:	491c      	ldr	r1, [pc, #112]	; (8000944 <InitMenu+0xf0>)
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <InitMenu+0xcc>)
 80008d6:	f000 f85d 	bl	8000994 <BuildMenu>
	BuildMenu(&modeM, 	"Mode", ModeMenuItems, 7, executeMode, &buttonM, 0, &displayM, &displayM);
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <InitMenu+0xcc>)
 80008dc:	9304      	str	r3, [sp, #16]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <InitMenu+0xcc>)
 80008e0:	9303      	str	r3, [sp, #12]
 80008e2:	2300      	movs	r3, #0
 80008e4:	9302      	str	r3, [sp, #8]
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <InitMenu+0xb4>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <InitMenu+0xf4>)
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2307      	movs	r3, #7
 80008f0:	4a16      	ldr	r2, [pc, #88]	; (800094c <InitMenu+0xf8>)
 80008f2:	4917      	ldr	r1, [pc, #92]	; (8000950 <InitMenu+0xfc>)
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <InitMenu+0xe4>)
 80008f6:	f000 f84d 	bl	8000994 <BuildMenu>
	/*--------------------------------------------------------------------------------*/


	currentM=&mainM;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <InitMenu+0x100>)
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <InitMenu+0xc4>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000073c 	.word	0x2000073c
 800090c:	08000959 	.word	0x08000959
 8000910:	20000030 	.word	0x20000030
 8000914:	0800872c 	.word	0x0800872c
 8000918:	20000818 	.word	0x20000818
 800091c:	200006cc 	.word	0x200006cc
 8000920:	200007ac 	.word	0x200007ac
 8000924:	08000965 	.word	0x08000965
 8000928:	20000044 	.word	0x20000044
 800092c:	08008734 	.word	0x08008734
 8000930:	08000971 	.word	0x08000971
 8000934:	0800873c 	.word	0x0800873c
 8000938:	20000884 	.word	0x20000884
 800093c:	0800097d 	.word	0x0800097d
 8000940:	20000058 	.word	0x20000058
 8000944:	08008744 	.word	0x08008744
 8000948:	08000989 	.word	0x08000989
 800094c:	2000006c 	.word	0x2000006c
 8000950:	0800874c 	.word	0x0800874c
 8000954:	200006c4 	.word	0x200006c4

08000958 <executeMain>:

/*------------------------------------------------------------------------------------*/
void executeMain(){
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
	//Print Buttons
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <executeButton>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeButton(){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	//Write Button To screen
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <executeScroll>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeScroll(){
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <executeDisplay>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeDisplay(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <executeMode>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void executeMode(){
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <BuildMenu>:
/*------------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------------*/
void BuildMenu(struct level *currentNode, char name[16],char menuitems[][maxCharacterOfMenuItem],uint8_t numberOfMenuItems, void (*execute)(void) , struct level *prevNode, struct level *nextNode,struct level *upNode,struct level *downNode)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	70fb      	strb	r3, [r7, #3]
    strcpy(currentNode->name, name);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 feac 	bl	8008704 <strcpy>
    for(int i=0; i<numberOfMenuItems;i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e015      	b.n	80009de <BuildMenu+0x4a>
    {
    	strcpy(currentNode->menuitems[i],menuitems[i]);
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	3310      	adds	r3, #16
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	18d0      	adds	r0, r2, r3
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4619      	mov	r1, r3
 80009d4:	f007 fe96 	bl	8008704 <strcpy>
    for(int i=0; i<numberOfMenuItems;i++)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbe5      	blt.n	80009b2 <BuildMenu+0x1e>
    }
   	currentNode->numberOfMenuItems=numberOfMenuItems;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    currentNode->prev = prevNode;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f2:	65da      	str	r2, [r3, #92]	; 0x5c
    currentNode->next = nextNode;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009f8:	659a      	str	r2, [r3, #88]	; 0x58
    currentNode->up = upNode;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009fe:	665a      	str	r2, [r3, #100]	; 0x64
    currentNode->down = downNode;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a04:	661a      	str	r2, [r3, #96]	; 0x60
    currentNode->execute = execute;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000a20:	230a      	movs	r3, #10
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1cfb      	adds	r3, r7, #3
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2178      	movs	r1, #120	; 0x78
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 fe22 	bl	800167c <HAL_I2C_Mem_Write>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f000 f9d3 	bl	8000df8 <HAL_Delay>
    int status = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000a56:	21ae      	movs	r1, #174	; 0xae
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffdb 	bl	8000a14 <ssd1306_WriteCommand>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4413      	add	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000a68:	2120      	movs	r1, #32
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffd2 	bl	8000a14 <ssd1306_WriteCommand>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ffc9 	bl	8000a14 <ssd1306_WriteCommand>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000a8c:	21b0      	movs	r1, #176	; 0xb0
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffc0 	bl	8000a14 <ssd1306_WriteCommand>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000a9e:	21c8      	movs	r1, #200	; 0xc8
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffb7 	bl	8000a14 <ssd1306_WriteCommand>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffae 	bl	8000a14 <ssd1306_WriteCommand>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffa5 	bl	8000a14 <ssd1306_WriteCommand>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff9c 	bl	8000a14 <ssd1306_WriteCommand>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000ae6:	2181      	movs	r1, #129	; 0x81
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff93 	bl	8000a14 <ssd1306_WriteCommand>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000af8:	21ff      	movs	r1, #255	; 0xff
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff8a 	bl	8000a14 <ssd1306_WriteCommand>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000b0a:	21a1      	movs	r1, #161	; 0xa1
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff81 	bl	8000a14 <ssd1306_WriteCommand>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000b1c:	21a6      	movs	r1, #166	; 0xa6
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff78 	bl	8000a14 <ssd1306_WriteCommand>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000b2e:	21a8      	movs	r1, #168	; 0xa8
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff6f 	bl	8000a14 <ssd1306_WriteCommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000b40:	213f      	movs	r1, #63	; 0x3f
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff66 	bl	8000a14 <ssd1306_WriteCommand>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b52:	21a4      	movs	r1, #164	; 0xa4
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff5d 	bl	8000a14 <ssd1306_WriteCommand>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000b64:	21d3      	movs	r1, #211	; 0xd3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff54 	bl	8000a14 <ssd1306_WriteCommand>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000b76:	2100      	movs	r1, #0
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff4b 	bl	8000a14 <ssd1306_WriteCommand>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000b88:	21d5      	movs	r1, #213	; 0xd5
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff42 	bl	8000a14 <ssd1306_WriteCommand>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000b9a:	21f0      	movs	r1, #240	; 0xf0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff39 	bl	8000a14 <ssd1306_WriteCommand>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4413      	add	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000bac:	21d9      	movs	r1, #217	; 0xd9
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff30 	bl	8000a14 <ssd1306_WriteCommand>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000bbe:	2122      	movs	r1, #34	; 0x22
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff27 	bl	8000a14 <ssd1306_WriteCommand>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000bd0:	21da      	movs	r1, #218	; 0xda
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff1e 	bl	8000a14 <ssd1306_WriteCommand>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000be2:	2112      	movs	r1, #18
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff15 	bl	8000a14 <ssd1306_WriteCommand>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000bf4:	21db      	movs	r1, #219	; 0xdb
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff0c 	bl	8000a14 <ssd1306_WriteCommand>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000c06:	2120      	movs	r1, #32
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff03 	bl	8000a14 <ssd1306_WriteCommand>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000c18:	218d      	movs	r1, #141	; 0x8d
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fefa 	bl	8000a14 <ssd1306_WriteCommand>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000c2a:	2114      	movs	r1, #20
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fef1 	bl	8000a14 <ssd1306_WriteCommand>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000c3c:	21af      	movs	r1, #175	; 0xaf
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fee8 	bl	8000a14 <ssd1306_WriteCommand>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <ssd1306_Init+0x214>
        return 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e00f      	b.n	8000c78 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f813 	bl	8000c84 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f832 	bl	8000cc8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <ssd1306_Init+0x23c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <ssd1306_Init+0x23c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <ssd1306_Init+0x23c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	715a      	strb	r2, [r3, #5]

    return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000650 	.word	0x20000650

08000c84 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e00d      	b.n	8000cb0 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <ssd1306_Fill+0x1a>
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e000      	b.n	8000ca0 <ssd1306_Fill+0x1c>
 8000c9e:	21ff      	movs	r1, #255	; 0xff
 8000ca0:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <ssd1306_Fill+0x40>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8000cb6:	d3ed      	bcc.n	8000c94 <ssd1306_Fill+0x10>
    }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	20000230 	.word	0x20000230

08000cc8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af04      	add	r7, sp, #16
 8000cce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e024      	b.n	8000d20 <ssd1306_UpdateScreen+0x58>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3b50      	subs	r3, #80	; 0x50
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fe98 	bl	8000a14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fe94 	bl	8000a14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000cec:	2110      	movs	r1, #16
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fe90 	bl	8000a14 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	015b      	lsls	r3, r3, #5
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <ssd1306_UpdateScreen+0x68>)
 8000d02:	4413      	add	r3, r2
 8000d04:	2264      	movs	r2, #100	; 0x64
 8000d06:	9202      	str	r2, [sp, #8]
 8000d08:	2284      	movs	r2, #132	; 0x84
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	2178      	movs	r1, #120	; 0x78
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fcb1 	bl	800167c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	d9d7      	bls.n	8000cd6 <ssd1306_UpdateScreen+0xe>
    }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000230 	.word	0x20000230

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f947 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fbcc 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f95f 	bl	8001042 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f927 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	200000b8 	.word	0x200000b8
 8000dbc:	200000b4 	.word	0x200000b4

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	200000b8 	.word	0x200000b8
 8000de0:	200008f4 	.word	0x200008f4

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	200008f4 	.word	0x200008f4

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffe0 	bl	8000de4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000b8 	.word	0x200000b8

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4906      	ldr	r1, [pc, #24]	; (8000ed8 <__NVIC_EnableIRQ+0x34>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff90 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff2d 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff42 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff90 	bl	8000f30 <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5f 	bl	8000edc <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff35 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b08b      	sub	sp, #44	; 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	e169      	b.n	8001344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001070:	2201      	movs	r2, #1
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8158 	bne.w	800133e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a9a      	ldr	r2, [pc, #616]	; (80012fc <HAL_GPIO_Init+0x2a0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d05e      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 8001098:	4a98      	ldr	r2, [pc, #608]	; (80012fc <HAL_GPIO_Init+0x2a0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d875      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 800109e:	4a98      	ldr	r2, [pc, #608]	; (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d058      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010a4:	4a96      	ldr	r2, [pc, #600]	; (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d86f      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010aa:	4a96      	ldr	r2, [pc, #600]	; (8001304 <HAL_GPIO_Init+0x2a8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d052      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010b0:	4a94      	ldr	r2, [pc, #592]	; (8001304 <HAL_GPIO_Init+0x2a8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d869      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010b6:	4a94      	ldr	r2, [pc, #592]	; (8001308 <HAL_GPIO_Init+0x2ac>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d04c      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010bc:	4a92      	ldr	r2, [pc, #584]	; (8001308 <HAL_GPIO_Init+0x2ac>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d863      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010c2:	4a92      	ldr	r2, [pc, #584]	; (800130c <HAL_GPIO_Init+0x2b0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d046      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010c8:	4a90      	ldr	r2, [pc, #576]	; (800130c <HAL_GPIO_Init+0x2b0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d85d      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d82a      	bhi.n	8001128 <HAL_GPIO_Init+0xcc>
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d859      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <HAL_GPIO_Init+0x80>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001143 	.word	0x08001143
 80010e8:	08001185 	.word	0x08001185
 80010ec:	0800118b 	.word	0x0800118b
 80010f0:	0800118b 	.word	0x0800118b
 80010f4:	0800118b 	.word	0x0800118b
 80010f8:	0800118b 	.word	0x0800118b
 80010fc:	0800118b 	.word	0x0800118b
 8001100:	0800118b 	.word	0x0800118b
 8001104:	0800118b 	.word	0x0800118b
 8001108:	0800118b 	.word	0x0800118b
 800110c:	0800118b 	.word	0x0800118b
 8001110:	0800118b 	.word	0x0800118b
 8001114:	0800118b 	.word	0x0800118b
 8001118:	0800118b 	.word	0x0800118b
 800111c:	0800118b 	.word	0x0800118b
 8001120:	08001139 	.word	0x08001139
 8001124:	0800114d 	.word	0x0800114d
 8001128:	4a79      	ldr	r2, [pc, #484]	; (8001310 <HAL_GPIO_Init+0x2b4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112e:	e02c      	b.n	800118a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e029      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	3304      	adds	r3, #4
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e024      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	3308      	adds	r3, #8
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e01f      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	330c      	adds	r3, #12
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e01a      	b.n	800118c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115e:	2304      	movs	r3, #4
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e013      	b.n	800118c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800116c:	2308      	movs	r3, #8
 800116e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	611a      	str	r2, [r3, #16]
          break;
 8001176:	e009      	b.n	800118c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	615a      	str	r2, [r3, #20]
          break;
 8001182:	e003      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x130>
          break;
 800118a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d801      	bhi.n	8001196 <HAL_GPIO_Init+0x13a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	e001      	b.n	800119a <HAL_GPIO_Init+0x13e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d802      	bhi.n	80011a8 <HAL_GPIO_Init+0x14c>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x152>
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3b08      	subs	r3, #8
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	210f      	movs	r1, #15
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	6a39      	ldr	r1, [r7, #32]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80b1 	beq.w	800133e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011dc:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x2b8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f4:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2bc>)
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a40      	ldr	r2, [pc, #256]	; (800131c <HAL_GPIO_Init+0x2c0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d013      	beq.n	8001248 <HAL_GPIO_Init+0x1ec>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <HAL_GPIO_Init+0x2c4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d00d      	beq.n	8001244 <HAL_GPIO_Init+0x1e8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3e      	ldr	r2, [pc, #248]	; (8001324 <HAL_GPIO_Init+0x2c8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x1e4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_GPIO_Init+0x2cc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_GPIO_Init+0x1e0>
 8001238:	2303      	movs	r3, #3
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 800123c:	2304      	movs	r3, #4
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001248:	2300      	movs	r3, #0
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125a:	492f      	ldr	r1, [pc, #188]	; (8001318 <HAL_GPIO_Init+0x2bc>)
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_GPIO_Init+0x2d0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	492c      	ldr	r1, [pc, #176]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_GPIO_Init+0x2d0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4928      	ldr	r1, [pc, #160]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_GPIO_Init+0x2d0>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4922      	ldr	r1, [pc, #136]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	491e      	ldr	r1, [pc, #120]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	4918      	ldr	r1, [pc, #96]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4914      	ldr	r1, [pc, #80]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d021      	beq.n	8001330 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	490e      	ldr	r1, [pc, #56]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
 80012f8:	e021      	b.n	800133e <HAL_GPIO_Init+0x2e2>
 80012fa:	bf00      	nop
 80012fc:	10320000 	.word	0x10320000
 8001300:	10310000 	.word	0x10310000
 8001304:	10220000 	.word	0x10220000
 8001308:	10210000 	.word	0x10210000
 800130c:	10120000 	.word	0x10120000
 8001310:	10110000 	.word	0x10110000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	43db      	mvns	r3, r3
 8001338:	4909      	ldr	r1, [pc, #36]	; (8001360 <HAL_GPIO_Init+0x304>)
 800133a:	4013      	ands	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	3301      	adds	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	f47f ae8e 	bne.w	8001070 <HAL_GPIO_Init+0x14>
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	372c      	adds	r7, #44	; 0x2c
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	807b      	strh	r3, [r7, #2]
 800139e:	4613      	mov	r3, r2
 80013a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a2:	787b      	ldrb	r3, [r7, #1]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f828 	bl	8000438 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e12b      	b.n	800165e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f898 	bl	8000550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001458:	f002 fca6 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a81      	ldr	r2, [pc, #516]	; (8001668 <HAL_I2C_Init+0x274>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d807      	bhi.n	8001478 <HAL_I2C_Init+0x84>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_I2C_Init+0x278>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e006      	b.n	8001486 <HAL_I2C_Init+0x92>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a7d      	ldr	r2, [pc, #500]	; (8001670 <HAL_I2C_Init+0x27c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e7      	b.n	800165e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a78      	ldr	r2, [pc, #480]	; (8001674 <HAL_I2C_Init+0x280>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_I2C_Init+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d802      	bhi.n	80014c8 <HAL_I2C_Init+0xd4>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e009      	b.n	80014dc <HAL_I2C_Init+0xe8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4a69      	ldr	r2, [pc, #420]	; (8001678 <HAL_I2C_Init+0x284>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	495c      	ldr	r1, [pc, #368]	; (8001668 <HAL_I2C_Init+0x274>)
 80014f8:	428b      	cmp	r3, r1
 80014fa:	d819      	bhi.n	8001530 <HAL_I2C_Init+0x13c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e59      	subs	r1, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fbb1 f3f3 	udiv	r3, r1, r3
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001510:	400b      	ands	r3, r1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <HAL_I2C_Init+0x138>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e59      	subs	r1, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152a:	e051      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800152c:	2304      	movs	r3, #4
 800152e:	e04f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_I2C_Init+0x168>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e012      	b.n	8001582 <HAL_I2C_Init+0x18e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x196>
 8001586:	2301      	movs	r3, #1
 8001588:	e022      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <HAL_I2C_Init+0x1bc>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e58      	subs	r0, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ae:	e00f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	6809      	ldr	r1, [r1, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6911      	ldr	r1, [r2, #16]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68d2      	ldr	r2, [r2, #12]
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	000186a0 	.word	0x000186a0
 800166c:	001e847f 	.word	0x001e847f
 8001670:	003d08ff 	.word	0x003d08ff
 8001674:	431bde83 	.word	0x431bde83
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4603      	mov	r3, r0
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	460b      	mov	r3, r1
 8001690:	813b      	strh	r3, [r7, #8]
 8001692:	4613      	mov	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001696:	f7ff fba5 	bl	8000de4 <HAL_GetTick>
 800169a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	f040 80d9 	bne.w	800185c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2319      	movs	r3, #25
 80016b0:	2201      	movs	r2, #1
 80016b2:	496d      	ldr	r1, [pc, #436]	; (8001868 <HAL_I2C_Mem_Write+0x1ec>)
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f971 	bl	800199c <I2C_WaitOnFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0cc      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_I2C_Mem_Write+0x56>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e0c5      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d007      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001706:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2221      	movs	r2, #33	; 0x21
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_I2C_Mem_Write+0x1f0>)
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800173a:	88f8      	ldrh	r0, [r7, #6]
 800173c:	893a      	ldrh	r2, [r7, #8]
 800173e:	8979      	ldrh	r1, [r7, #10]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	4603      	mov	r3, r0
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f890 	bl	8001870 <I2C_RequestMemoryWrite>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d052      	beq.n	80017fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e081      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f9f2 	bl	8001b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2b04      	cmp	r3, #4
 8001770:	d107      	bne.n	8001782 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06b      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d11b      	bne.n	80017fc <HAL_I2C_Mem_Write+0x180>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d017      	beq.n	80017fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1aa      	bne.n	800175a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f9de 	bl	8001bca <I2C_WaitOnBTFFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00d      	beq.n	8001830 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	2b04      	cmp	r3, #4
 800181a:	d107      	bne.n	800182c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e016      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
  }
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	00100002 	.word	0x00100002
 800186c:	ffff0000 	.word	0xffff0000

08001870 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f878 	bl	800199c <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d103      	bne.n	80018ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e05f      	b.n	800198e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018ce:	897b      	ldrh	r3, [r7, #10]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	6a3a      	ldr	r2, [r7, #32]
 80018e2:	492d      	ldr	r1, [pc, #180]	; (8001998 <I2C_RequestMemoryWrite+0x128>)
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f8b0 	bl	8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e04c      	b.n	800198e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f91a 	bl	8001b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b04      	cmp	r3, #4
 8001920:	d107      	bne.n	8001932 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001930:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e02b      	b.n	800198e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800193c:	893b      	ldrh	r3, [r7, #8]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	e021      	b.n	800198c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001948:	893b      	ldrh	r3, [r7, #8]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f8f4 	bl	8001b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b04      	cmp	r3, #4
 800196c:	d107      	bne.n	800197e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e005      	b.n	800198e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	00010002 	.word	0x00010002

0800199c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ac:	e025      	b.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d021      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b6:	f7ff fa15 	bl	8000de4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d116      	bne.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e023      	b.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10d      	bne.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	e00c      	b.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0b6      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a58:	e051      	b.n	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a68:	d123      	bne.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0204 	orr.w	r2, r3, #4
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e046      	b.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d021      	beq.n	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7ff f993 	bl	8000de4 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d116      	bne.n	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e020      	b.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10c      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	e00b      	b.n	8001b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d18d      	bne.n	8001a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b54:	e02d      	b.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f878 	bl	8001c4c <I2C_IsAcknowledgeFailed>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e02d      	b.n	8001bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d021      	beq.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6e:	f7ff f939 	bl	8000de4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d116      	bne.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0220 	orr.w	r2, r3, #32
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e007      	b.n	8001bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	2b80      	cmp	r3, #128	; 0x80
 8001bbe:	d1ca      	bne.n	8001b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bd6:	e02d      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f837 	bl	8001c4c <I2C_IsAcknowledgeFailed>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e02d      	b.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bee:	d021      	beq.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf0:	f7ff f8f8 	bl	8000de4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d302      	bcc.n	8001c06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d1ca      	bne.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d11b      	bne.n	8001c9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af06      	add	r7, sp, #24
 8001cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0fd      	b.n	8001eb6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f006 fa66 	bl	80081a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 f96f 	bl	8003fc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	687e      	ldr	r6, [r7, #4]
 8001cee:	466d      	mov	r5, sp
 8001cf0:	f106 0410 	add.w	r4, r6, #16
 8001cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	1d33      	adds	r3, r6, #4
 8001cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d00:	6838      	ldr	r0, [r7, #0]
 8001d02:	f002 f939 	bl	8003f78 <USB_CoreInit>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0ce      	b.n	8001eb6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f96a 	bl	8003ff8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e04c      	b.n	8001dc4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	b298      	uxth	r0, r3
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3336      	adds	r3, #54	; 0x36
 8001d68:	4602      	mov	r2, r0
 8001d6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3303      	adds	r3, #3
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3338      	adds	r3, #56	; 0x38
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	333c      	adds	r3, #60	; 0x3c
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3340      	adds	r3, #64	; 0x40
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3ad      	bcc.n	8001d2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e044      	b.n	8001e5e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3b5      	bcc.n	8001dd4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	687e      	ldr	r6, [r7, #4]
 8001e70:	466d      	mov	r5, sp
 8001e72:	f106 0410 	add.w	r4, r6, #16
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f002 f8c4 	bl	8004010 <USB_DevInit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00d      	b.n	8001eb6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fd76 	bl	80069a0 <USB_DevDisconnect>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_PCD_Start+0x16>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e016      	b.n	8001f02 <HAL_PCD_Start+0x44>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 f859 	bl	8003f98 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f006 fba8 	bl	800863e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fd4a 	bl	800698c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fd4c 	bl	80069b4 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f26:	d102      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb48 	bl	80025be <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fd3e 	bl	80069b4 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f42:	d112      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f006 f99a 	bl	8008296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f62:	2100      	movs	r1, #0
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f923 	bl	80021b0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fd20 	bl	80069b4 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f7e:	d10b      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f92:	b292      	uxth	r2, r2
 8001f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fd09 	bl	80069b4 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc0:	b292      	uxth	r2, r2
 8001fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fcf2 	bl	80069b4 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d126      	bne.n	800202a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0208 	bic.w	r2, r2, #8
 8002006:	b292      	uxth	r2, r2
 8002008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f006 f97b 	bl	8008308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fcc0 	bl	80069b4 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800203e:	f040 8082 	bne.w	8002146 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	77fb      	strb	r3, [r7, #31]
 8002046:	e010      	b.n	800206a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	441a      	add	r2, r3
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	8812      	ldrh	r2, [r2, #0]
 8002058:	b292      	uxth	r2, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	3320      	adds	r3, #32
 800205e:	443b      	add	r3, r7
 8002060:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002064:	7ffb      	ldrb	r3, [r7, #31]
 8002066:	3301      	adds	r3, #1
 8002068:	77fb      	strb	r3, [r7, #31]
 800206a:	7ffb      	ldrb	r3, [r7, #31]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d9eb      	bls.n	8002048 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	b292      	uxth	r2, r2
 8002084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	b292      	uxth	r2, r2
 800209c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020a0:	bf00      	nop
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f6      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c6:	b292      	uxth	r2, r2
 80020c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	77fb      	strb	r3, [r7, #31]
 80020d0:	e00f      	b.n	80020f2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4611      	mov	r1, r2
 80020da:	7ffa      	ldrb	r2, [r7, #31]
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	440a      	add	r2, r1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	3320      	adds	r3, #32
 80020e4:	443b      	add	r3, r7
 80020e6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80020ea:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80020ec:	7ffb      	ldrb	r3, [r7, #31]
 80020ee:	3301      	adds	r3, #1
 80020f0:	77fb      	strb	r3, [r7, #31]
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d9ec      	bls.n	80020d2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	b292      	uxth	r2, r2
 800210c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002122:	b292      	uxth	r2, r2
 8002124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0204 	orr.w	r2, r2, #4
 800213a:	b292      	uxth	r2, r2
 800213c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f006 f8c7 	bl	80082d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fc32 	bl	80069b4 <USB_ReadInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	d10e      	bne.n	800217a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 f880 	bl	800827a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fc18 	bl	80069b4 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218e:	d10b      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a2:	b292      	uxth	r2, r2
 80021a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_PCD_SetAddress+0x1a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e013      	b.n	80021f2 <HAL_PCD_SetAddress+0x42>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fbbf 	bl	8006966 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	4608      	mov	r0, r1
 8002204:	4611      	mov	r1, r2
 8002206:	461a      	mov	r2, r3
 8002208:	4603      	mov	r3, r0
 800220a:	70fb      	strb	r3, [r7, #3]
 800220c:	460b      	mov	r3, r1
 800220e:	803b      	strh	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da0e      	bge.n	800223e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	705a      	strb	r2, [r3, #1]
 800223c:	e00e      	b.n	800225c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 0207 	and.w	r2, r3, #7
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002268:	883a      	ldrh	r2, [r7, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	78ba      	ldrb	r2, [r7, #2]
 8002272:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002286:	78bb      	ldrb	r3, [r7, #2]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d102      	bne.n	8002292 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_EP_Open+0xa6>
 800229c:	2302      	movs	r3, #2
 800229e:	e00e      	b.n	80022be <HAL_PCD_EP_Open+0xc4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 fece 	bl	8004050 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80022bc:	7afb      	ldrb	r3, [r7, #11]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0e      	bge.n	80022f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
 80022f6:	e00e      	b.n	8002316 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 0207 	and.w	r2, r3, #7
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_PCD_EP_Close+0x6a>
 800232c:	2302      	movs	r3, #2
 800232e:	e00e      	b.n	800234e <HAL_PCD_EP_Close+0x88>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 f9f0 	bl	8004724 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	460b      	mov	r3, r1
 8002364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002366:	7afb      	ldrb	r3, [r7, #11]
 8002368:	f003 0207 	and.w	r2, r3, #7
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	b2da      	uxtb	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fba2 	bl	8004afc <USB_EPStartXfer>
 80023b8:	e005      	b.n	80023c6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fb9b 	bl	8004afc <USB_EPStartXfer>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e0:	7afb      	ldrb	r3, [r7, #11]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2201      	movs	r2, #1
 800241a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	b2da      	uxtb	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fb5f 	bl	8004afc <USB_EPStartXfer>
 800243e:	e005      	b.n	800244c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6979      	ldr	r1, [r7, #20]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 fb58 	bl	8004afc <USB_EPStartXfer>
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	f003 0207 	and.w	r2, r3, #7
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d901      	bls.n	8002474 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e04c      	b.n	800250e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da0e      	bge.n	800249a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	705a      	strb	r2, [r3, #1]
 8002498:	e00c      	b.n	80024b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_PCD_EP_SetStall+0x7e>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e01c      	b.n	800250e <HAL_PCD_EP_SetStall+0xb8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f942 	bl	800676c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f004 fa67 	bl	80069d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d901      	bls.n	8002534 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e040      	b.n	80025b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da0e      	bge.n	800255a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	705a      	strb	r2, [r3, #1]
 8002558:	e00e      	b.n	8002578 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 0207 	and.w	r2, r3, #7
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_PCD_EP_ClrStall+0x82>
 8002594:	2302      	movs	r3, #2
 8002596:	e00e      	b.n	80025b6 <HAL_PCD_EP_ClrStall+0xa0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 f930 	bl	800680c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08e      	sub	sp, #56	; 0x38
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025c6:	e2ec      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8161 	bne.w	80028aa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d152      	bne.n	8002698 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	81fb      	strh	r3, [r7, #14]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002612:	b29b      	uxth	r3, r3
 8002614:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3328      	adds	r3, #40	; 0x28
 800261a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	3302      	adds	r3, #2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	441a      	add	r2, r3
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002656:	2100      	movs	r1, #0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fdf4 	bl	8008246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 829b 	beq.w	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 8296 	bne.w	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b292      	uxth	r2, r2
 800268a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002696:	e284      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d034      	beq.n	800271c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	3306      	adds	r3, #6
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f004 f9be 	bl	8006a72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002702:	4013      	ands	r3, r2
 8002704:	823b      	strh	r3, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	8a3a      	ldrh	r2, [r7, #16]
 800270c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002710:	b292      	uxth	r2, r2
 8002712:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f005 fd69 	bl	80081ec <HAL_PCD_SetupStageCallback>
 800271a:	e242      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800271c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002720:	2b00      	cmp	r3, #0
 8002722:	f280 823e 	bge.w	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002732:	4013      	ands	r3, r2
 8002734:	83bb      	strh	r3, [r7, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	8bba      	ldrh	r2, [r7, #28]
 800273c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002740:	b292      	uxth	r2, r2
 8002742:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	3306      	adds	r3, #6
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d019      	beq.n	80027ac <PCD_EP_ISR_Handler+0x1ee>
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	6959      	ldr	r1, [r3, #20]
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002790:	b29b      	uxth	r3, r3
 8002792:	f004 f96e 	bl	8006a72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	441a      	add	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027a4:	2100      	movs	r1, #0
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f005 fd32 	bl	8008210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 81f2 	bne.w	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d112      	bne.n	800280c <PCD_EP_ISR_Handler+0x24e>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e02f      	b.n	800286c <PCD_EP_ISR_Handler+0x2ae>
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b3e      	cmp	r3, #62	; 0x3e
 8002812:	d813      	bhi.n	800283c <PCD_EP_ISR_Handler+0x27e>
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <PCD_EP_ISR_Handler+0x270>
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	3301      	adds	r3, #1
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	b29b      	uxth	r3, r3
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	b29a      	uxth	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	e017      	b.n	800286c <PCD_EP_ISR_Handler+0x2ae>
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <PCD_EP_ISR_Handler+0x298>
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	3b01      	subs	r3, #1
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	b29b      	uxth	r3, r3
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	b29b      	uxth	r3, r3
 800285e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002866:	b29a      	uxth	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287c:	827b      	strh	r3, [r7, #18]
 800287e:	8a7b      	ldrh	r3, [r7, #18]
 8002880:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002884:	827b      	strh	r3, [r7, #18]
 8002886:	8a7b      	ldrh	r3, [r7, #18]
 8002888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800288c:	827b      	strh	r3, [r7, #18]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	8a7b      	ldrh	r3, [r7, #18]
 8002894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8013      	strh	r3, [r2, #0]
 80028a8:	e17b      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f280 80ea 	bge.w	8002a9a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028dc:	4013      	ands	r3, r2
 80028de:	853b      	strh	r3, [r7, #40]	; 0x28
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028f4:	b292      	uxth	r2, r2
 80028f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	7b1b      	ldrb	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d122      	bne.n	800295c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	3306      	adds	r3, #6
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	6959      	ldr	r1, [r3, #20]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	88da      	ldrh	r2, [r3, #6]
 8002954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002956:	f004 f88c 	bl	8006a72 <USB_ReadPMA>
 800295a:	e07c      	b.n	8002a56 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	78db      	ldrb	r3, [r3, #3]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d108      	bne.n	8002976 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002966:	461a      	mov	r2, r3
 8002968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f927 	bl	8002bbe <HAL_PCD_EP_DB_Receive>
 8002970:	4603      	mov	r3, r0
 8002972:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002974:	e06f      	b.n	8002a56 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	847b      	strh	r3, [r7, #34]	; 0x22
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d021      	beq.n	8002a14 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	3302      	adds	r3, #2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02a      	beq.n	8002a56 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	891a      	ldrh	r2, [r3, #8]
 8002a0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a0e:	f004 f830 	bl	8006a72 <USB_ReadPMA>
 8002a12:	e020      	b.n	8002a56 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	3306      	adds	r3, #6
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	6959      	ldr	r1, [r3, #20]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	895a      	ldrh	r2, [r3, #10]
 8002a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a52:	f004 f80e 	bl	8006a72 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a5c:	441a      	add	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a68:	441a      	add	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x4c2>
 8002a76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d206      	bcs.n	8002a8e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f005 fbc2 	bl	8008210 <HAL_PCD_DataOutStageCallback>
 8002a8c:	e005      	b.n	8002a9a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 f831 	bl	8004afc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d07e      	beq.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002aa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	843b      	strh	r3, [r7, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	8c3b      	ldrh	r3, [r7, #32]
 8002ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	78db      	ldrb	r3, [r3, #3]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d00c      	beq.n	8002b12 <PCD_EP_ISR_Handler+0x554>
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d146      	bne.n	8002b96 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d141      	bne.n	8002b96 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	3302      	adds	r3, #2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	8bfb      	ldrh	r3, [r7, #30]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d906      	bls.n	8002b54 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	8bfb      	ldrh	r3, [r7, #30]
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e002      	b.n	8002b5a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 fb6c 	bl	8008246 <HAL_PCD_DataInStageCallback>
 8002b6e:	e018      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	8bfb      	ldrh	r3, [r7, #30]
 8002b76:	441a      	add	r2, r3
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	8bfb      	ldrh	r3, [r7, #30]
 8002b82:	441a      	add	r2, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 ffb4 	bl	8004afc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b94:	e005      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f91b 	bl	8002dd8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f6ff ad0a 	blt.w	80025c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b088      	sub	sp, #32
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07e      	beq.n	8002cd4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	3302      	adds	r3, #2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d306      	bcc.n	8002c18 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	8b7b      	ldrh	r3, [r7, #26]
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d123      	bne.n	8002c6e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	833b      	strh	r3, [r7, #24]
 8002c42:	8b3b      	ldrh	r3, [r7, #24]
 8002c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c48:	833b      	strh	r3, [r7, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	8b3b      	ldrh	r3, [r7, #24]
 8002c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01f      	beq.n	8002cb8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	82fb      	strh	r3, [r7, #22]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	8afb      	ldrh	r3, [r7, #22]
 8002ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cb8:	8b7b      	ldrh	r3, [r7, #26]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6959      	ldr	r1, [r3, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	891a      	ldrh	r2, [r3, #8]
 8002ccc:	8b7b      	ldrh	r3, [r7, #26]
 8002cce:	f003 fed0 	bl	8006a72 <USB_ReadPMA>
 8002cd2:	e07c      	b.n	8002dce <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3306      	adds	r3, #6
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	8b7b      	ldrh	r3, [r7, #26]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d306      	bcc.n	8002d16 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d123      	bne.n	8002d6c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	83fb      	strh	r3, [r7, #30]
 8002d40:	8bfb      	ldrh	r3, [r7, #30]
 8002d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d46:	83fb      	strh	r3, [r7, #30]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	8bfb      	ldrh	r3, [r7, #30]
 8002d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11f      	bne.n	8002db6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	83bb      	strh	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	441a      	add	r2, r3
 8002da0:	8bbb      	ldrh	r3, [r7, #28]
 8002da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6959      	ldr	r1, [r3, #20]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	895a      	ldrh	r2, [r3, #10]
 8002dc8:	8b7b      	ldrh	r3, [r7, #26]
 8002dca:	f003 fe52 	bl	8006a72 <USB_ReadPMA>
    }
  }

  return count;
 8002dce:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0a2      	sub	sp, #136	; 0x88
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 81c7 	beq.w	8003180 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	3302      	adds	r3, #2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d907      	bls.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	619a      	str	r2, [r3, #24]
 8002e38:	e002      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 80b9 	bne.w	8002fbc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d126      	bne.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	4413      	add	r3, r2
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	011a      	lsls	r2, r3, #4
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	801a      	strh	r2, [r3, #0]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	e01a      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d116      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	4413      	add	r3, r2
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	011a      	lsls	r2, r3, #4
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d126      	bne.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4413      	add	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	e017      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d113      	bne.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	4413      	add	r3, r2
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	011a      	lsls	r2, r3, #4
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	4413      	add	r3, r2
 8002f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f005 f96c 	bl	8008246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 82d4 	beq.w	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	827b      	strh	r3, [r7, #18]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	8a7b      	ldrh	r3, [r7, #18]
 8002fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
 8002fba:	e2b2      	b.n	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d021      	beq.n	800300a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003006:	b29b      	uxth	r3, r3
 8003008:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 8286 	bne.w	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800301e:	441a      	add	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800302c:	441a      	add	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	429a      	cmp	r2, r3
 800303c:	d309      	bcc.n	8003052 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	e015      	b.n	800307e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800305a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800305e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003068:	e009      	b.n	800307e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d155      	bne.n	8003132 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	4413      	add	r3, r2
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	4413      	add	r3, r2
 80030a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d112      	bne.n	80030da <HAL_PCD_EP_DB_Transmit+0x302>
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	e047      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x392>
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	2b3e      	cmp	r3, #62	; 0x3e
 80030de:	d811      	bhi.n	8003104 <HAL_PCD_EP_DB_Transmit+0x32c>
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	3301      	adds	r3, #1
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e032      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x392>
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
 800310a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_PCD_EP_DB_Transmit+0x342>
 8003114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003116:	3b01      	subs	r3, #1
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	b29b      	uxth	r3, r3
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	b29b      	uxth	r3, r3
 8003122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312a:	b29a      	uxth	r2, r3
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	e01b      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x392>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d117      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x392>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003148:	b29b      	uxth	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314e:	4413      	add	r3, r2
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	011a      	lsls	r2, r3, #4
 8003158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315a:	4413      	add	r3, r2
 800315c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	b29a      	uxth	r2, r3
 8003166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003168:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	6959      	ldr	r1, [r3, #20]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	891a      	ldrh	r2, [r3, #8]
 8003176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003178:	b29b      	uxth	r3, r3
 800317a:	f003 fc35 	bl	80069e8 <USB_WritePMA>
 800317e:	e1d0      	b.n	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	3306      	adds	r3, #6
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d307      	bcc.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c0:	1ad2      	subs	r2, r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	619a      	str	r2, [r3, #24]
 80031c6:	e002      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 80c4 	bne.w	8003360 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d126      	bne.n	800322e <HAL_PCD_EP_DB_Transmit+0x456>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	4413      	add	r3, r2
 80031f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	011a      	lsls	r2, r3, #4
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	4413      	add	r3, r2
 8003202:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003206:	66bb      	str	r3, [r7, #104]	; 0x68
 8003208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003212:	b29a      	uxth	r2, r3
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003226:	b29a      	uxth	r2, r3
 8003228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	e01a      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x48c>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d116      	bne.n	8003264 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	677b      	str	r3, [r7, #116]	; 0x74
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324a:	4413      	add	r3, r2
 800324c:	677b      	str	r3, [r7, #116]	; 0x74
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	011a      	lsls	r2, r3, #4
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	4413      	add	r3, r2
 8003258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800325c:	673b      	str	r3, [r7, #112]	; 0x70
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	2200      	movs	r2, #0
 8003262:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	67bb      	str	r3, [r7, #120]	; 0x78
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d12f      	bne.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800328a:	4413      	add	r3, r2
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	011a      	lsls	r2, r3, #4
 8003296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800329a:	4413      	add	r3, r2
 800329c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b6:	801a      	strh	r2, [r3, #0]
 80032b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e017      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d113      	bne.n	8003302 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e8:	4413      	add	r3, r2
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	011a      	lsls	r2, r3, #4
 80032f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f4:	4413      	add	r3, r2
 80032f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f004 ff9c 	bl	8008246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 8104 	bne.w	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	441a      	add	r2, r3
 8003346:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800334a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	b29b      	uxth	r3, r3
 800335c:	8013      	strh	r3, [r2, #0]
 800335e:	e0e0      	b.n	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d121      	bne.n	80033ae <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003384:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800339a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 80b4 	bne.w	8003522 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c2:	441a      	add	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d0:	441a      	add	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d309      	bcc.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	621a      	str	r2, [r3, #32]
 80033f4:	e015      	b.n	8003422 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80033fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800340c:	e009      	b.n	8003422 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	667b      	str	r3, [r7, #100]	; 0x64
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d155      	bne.n	80034dc <HAL_PCD_EP_DB_Transmit+0x704>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	4413      	add	r3, r2
 8003446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	011a      	lsls	r2, r3, #4
 800344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003450:	4413      	add	r3, r2
 8003452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003456:	65bb      	str	r3, [r7, #88]	; 0x58
 8003458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345a:	2b00      	cmp	r3, #0
 800345c:	d112      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800345e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003468:	b29a      	uxth	r2, r3
 800346a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347c:	b29a      	uxth	r2, r3
 800347e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e044      	b.n	800350e <HAL_PCD_EP_DB_Transmit+0x736>
 8003484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003486:	2b3e      	cmp	r3, #62	; 0x3e
 8003488:	d811      	bhi.n	80034ae <HAL_PCD_EP_DB_Transmit+0x6d6>
 800348a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	657b      	str	r3, [r7, #84]	; 0x54
 8003490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800349a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349c:	3301      	adds	r3, #1
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
 80034a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	029b      	lsls	r3, r3, #10
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034aa:	801a      	strh	r2, [r3, #0]
 80034ac:	e02f      	b.n	800350e <HAL_PCD_EP_DB_Transmit+0x736>
 80034ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
 80034b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	3b01      	subs	r3, #1
 80034c2:	657b      	str	r3, [r7, #84]	; 0x54
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	e018      	b.n	800350e <HAL_PCD_EP_DB_Transmit+0x736>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d114      	bne.n	800350e <HAL_PCD_EP_DB_Transmit+0x736>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	4413      	add	r3, r2
 80034f4:	667b      	str	r3, [r7, #100]	; 0x64
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	011a      	lsls	r2, r3, #4
 80034fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fe:	4413      	add	r3, r2
 8003500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	b29a      	uxth	r2, r3
 800350a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800350c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6959      	ldr	r1, [r3, #20]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	895a      	ldrh	r2, [r3, #10]
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	b29b      	uxth	r3, r3
 800351e:	f003 fa63 	bl	80069e8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353c:	823b      	strh	r3, [r7, #16]
 800353e:	8a3b      	ldrh	r3, [r7, #16]
 8003540:	f083 0310 	eor.w	r3, r3, #16
 8003544:	823b      	strh	r3, [r7, #16]
 8003546:	8a3b      	ldrh	r3, [r7, #16]
 8003548:	f083 0320 	eor.w	r3, r3, #32
 800354c:	823b      	strh	r3, [r7, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	441a      	add	r2, r3
 800355c:	8a3b      	ldrh	r3, [r7, #16]
 800355e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3788      	adds	r7, #136	; 0x88
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	4613      	mov	r3, r2
 800358c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e009      	b.n	80035c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035b2:	897a      	ldrh	r2, [r7, #10]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035c6:	893b      	ldrh	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	80da      	strh	r2, [r3, #6]
 80035da:	e00b      	b.n	80035f4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2201      	movs	r2, #1
 80035e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e272      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8087 	beq.w	800372e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003620:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00c      	beq.n	8003646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d112      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
 8003638:	4b8c      	ldr	r3, [pc, #560]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d06c      	beq.n	800372c <HAL_RCC_OscConfig+0x12c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d168      	bne.n	800372c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e24c      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x76>
 8003668:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7f      	ldr	r2, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e02e      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b78      	ldr	r3, [pc, #480]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a77      	ldr	r2, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xbc>
 80036a2:	4b72      	ldr	r3, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a71      	ldr	r2, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 80036bc:	4b6b      	ldr	r3, [pc, #428]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fb82 	bl	8000de4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fd fb7e 	bl	8000de4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e200      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe4>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd fb6e 	bl	8000de4 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd fb6a 	bl	8000de4 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1ec      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x10c>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
 8003752:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c0      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4939      	ldr	r1, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd fb23 	bl	8000de4 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fd fb1f 	bl	8000de4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd fb02 	bl	8000de4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fd fafe 	bl	8000de4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e180      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03a      	beq.n	8003884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7fd fae2 	bl	8000de4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd fade 	bl	8000de4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e160      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 fac4 	bl	8003dd0 <RCC_Delay>
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fac8 	bl	8000de4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003856:	e00f      	b.n	8003878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003858:	f7fd fac4 	bl	8000de4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d908      	bls.n	8003878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e146      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	42420000 	.word	0x42420000
 8003874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e9      	bne.n	8003858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a6 	beq.w	80039de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7e      	ldr	r2, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fa85 	bl	8000de4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fa81 	bl	8000de4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e103      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x312>
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x334>
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x356>
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd fa35 	bl	8000de4 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd fa31 	bl	8000de4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0b1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x37e>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fa1f 	bl	8000de4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fa1b 	bl	8000de4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e09b      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8087 	beq.w	8003af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d061      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d146      	bne.n	8003a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd f9ef 	bl	8000de4 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd f9eb 	bl	8000de4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e06d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d108      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a19      	ldr	r1, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	430b      	orrs	r3, r1
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd f9bf 	bl	8000de4 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd f9bb 	bl	8000de4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46a>
 8003a88:	e035      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd f9a8 	bl	8000de4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd f9a4 	bl	8000de4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e026      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x498>
 8003ab6:	e01e      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e019      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x500>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd f8f6 	bl	8000de4 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd f8f2 	bl	8000de4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd f854 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	080087ac 	.word	0x080087ac
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	200000b4 	.word	0x200000b4

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ce0:	1d3c      	adds	r4, r7, #4
 8003ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ce8:	f240 2301 	movw	r3, #513	; 0x201
 8003cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x46>
 8003d16:	e02b      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d1a:	623b      	str	r3, [r7, #32]
      break;
 8003d1c:	e02b      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	0c9b      	lsrs	r3, r3, #18
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3328      	adds	r3, #40	; 0x28
 8003d28:	443b      	add	r3, r7
 8003d2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d012      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0c5b      	lsrs	r3, r3, #17
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	3328      	adds	r3, #40	; 0x28
 8003d46:	443b      	add	r3, r7
 8003d48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d52:	fb03 f202 	mul.w	r2, r3, r2
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	e004      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	623b      	str	r3, [r7, #32]
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d72:	623b      	str	r3, [r7, #32]
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	6a3b      	ldr	r3, [r7, #32]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc90      	pop	{r4, r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	08008760 	.word	0x08008760
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	007a1200 	.word	0x007a1200
 8003d90:	003d0900 	.word	0x003d0900

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff2 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	080087bc 	.word	0x080087bc

08003dd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <RCC_Delay+0x34>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <RCC_Delay+0x38>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dec:	bf00      	nop
  }
  while (Delay --);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1e5a      	subs	r2, r3, #1
 8003df2:	60fa      	str	r2, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f9      	bne.n	8003dec <RCC_Delay+0x1c>
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	20000000 	.word	0x20000000
 8003e08:	10624dd3 	.word	0x10624dd3

08003e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d07d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	61d3      	str	r3, [r2, #28]
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6c:	f7fc ffba 	bl	8000de4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fc ffb6 	bl	8000de4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e06d      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d027      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec6:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fc ff85 	bl	8000de4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fc ff81 	bl	8000de4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e036      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4917      	ldr	r1, [pc, #92]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42420440 	.word	0x42420440

08003f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f78:	b084      	sub	sp, #16
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	f107 0014 	add.w	r0, r7, #20
 8003f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr

08003f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fa8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fcc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004010:	b084      	sub	sp, #16
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	f107 0014 	add.w	r0, r7, #20
 800401e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	b004      	add	sp, #16
 800404e:	4770      	bx	lr

08004050 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004050:	b480      	push	{r7}
 8004052:	b09b      	sub	sp, #108	; 0x6c
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d81f      	bhi.n	80040c2 <USB_ActivateEndpoint+0x72>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <USB_ActivateEndpoint+0x38>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040cb 	.word	0x080040cb
 8004094:	080040a7 	.word	0x080040a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004098:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800409c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040a4:	e012      	b.n	80040cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040b2:	e00b      	b.n	80040cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040c0:	e004      	b.n	80040cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80040c8:	e000      	b.n	80040cc <USB_ActivateEndpoint+0x7c>
      break;
 80040ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	b29a      	uxth	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	4313      	orrs	r3, r2
 800410e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004130:	b29b      	uxth	r3, r3
 8004132:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	7b1b      	ldrb	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 8149 	bne.w	80043d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8084 	beq.w	8004250 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	011a      	lsls	r2, r3, #4
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	88db      	ldrh	r3, [r3, #6]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	81fb      	strh	r3, [r7, #14]
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <USB_ActivateEndpoint+0x17c>
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	81bb      	strh	r3, [r7, #12]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	89bb      	ldrh	r3, [r7, #12]
 80041b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d020      	beq.n	8004216 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	813b      	strh	r3, [r7, #8]
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	f083 0320 	eor.w	r3, r3, #32
 80041f2:	813b      	strh	r3, [r7, #8]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
 8004214:	e27f      	b.n	8004716 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	897b      	ldrh	r3, [r7, #10]
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
 800424e:	e262      	b.n	8004716 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	4413      	add	r3, r2
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	011a      	lsls	r2, r3, #4
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	4413      	add	r3, r2
 800426e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	88db      	ldrh	r3, [r3, #6]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	4413      	add	r3, r2
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	011a      	lsls	r2, r3, #4
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	4413      	add	r3, r2
 80042a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d112      	bne.n	80042d6 <USB_ActivateEndpoint+0x286>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	e02f      	b.n	8004336 <USB_ActivateEndpoint+0x2e6>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b3e      	cmp	r3, #62	; 0x3e
 80042dc:	d813      	bhi.n	8004306 <USB_ActivateEndpoint+0x2b6>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <USB_ActivateEndpoint+0x2a8>
 80042f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f4:	3301      	adds	r3, #1
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e017      	b.n	8004336 <USB_ActivateEndpoint+0x2e6>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <USB_ActivateEndpoint+0x2d0>
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	3b01      	subs	r3, #1
 800431e:	663b      	str	r3, [r7, #96]	; 0x60
 8004320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004322:	b29b      	uxth	r3, r3
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	b29b      	uxth	r3, r3
 8004328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004330:	b29a      	uxth	r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	83fb      	strh	r3, [r7, #30]
 8004344:	8bfb      	ldrh	r3, [r7, #30]
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01b      	beq.n	8004386 <USB_ActivateEndpoint+0x336>
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	83bb      	strh	r3, [r7, #28]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	8bbb      	ldrh	r3, [r7, #28]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	837b      	strh	r3, [r7, #26]
 800439e:	8b7b      	ldrh	r3, [r7, #26]
 80043a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043a4:	837b      	strh	r3, [r7, #26]
 80043a6:	8b7b      	ldrh	r3, [r7, #26]
 80043a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043ac:	837b      	strh	r3, [r7, #26]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8b7b      	ldrh	r3, [r7, #26]
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
 80043ce:	e1a2      	b.n	8004716 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	441a      	add	r2, r3
 80043f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800441c:	4413      	add	r3, r2
 800441e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	011a      	lsls	r2, r3, #4
 8004426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004428:	4413      	add	r3, r2
 800442a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	891b      	ldrh	r3, [r3, #8]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	653b      	str	r3, [r7, #80]	; 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004450:	4413      	add	r3, r2
 8004452:	653b      	str	r3, [r7, #80]	; 0x50
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	011a      	lsls	r2, r3, #4
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	4413      	add	r3, r2
 800445e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	895b      	ldrh	r3, [r3, #10]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	b29b      	uxth	r3, r3
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8091 	bne.w	80045a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800448c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <USB_ActivateEndpoint+0x47e>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	873b      	strh	r3, [r7, #56]	; 0x38
 80044dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <USB_ActivateEndpoint+0x4ce>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004536:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004538:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800453c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800453e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004540:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004544:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457c:	867b      	strh	r3, [r7, #50]	; 0x32
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e0ba      	b.n	8004716 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80045b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01d      	beq.n	80045f8 <USB_ActivateEndpoint+0x5a8>
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01d      	beq.n	8004650 <USB_ActivateEndpoint+0x600>
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d024      	beq.n	80046a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004676:	f083 0320 	eor.w	r3, r3, #32
 800467a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]
 80046a0:	e01d      	b.n	80046de <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800471a:	4618      	mov	r0, r3
 800471c:	376c      	adds	r7, #108	; 0x6c
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004724:	b480      	push	{r7}
 8004726:	b08d      	sub	sp, #52	; 0x34
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	7b1b      	ldrb	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 808e 	bne.w	8004854 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d044      	beq.n	80047ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	81bb      	strh	r3, [r7, #12]
 800474e:	89bb      	ldrh	r3, [r7, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <USB_DeactivateEndpoint+0x6c>
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	817b      	strh	r3, [r7, #10]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	813b      	strh	r3, [r7, #8]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	893b      	ldrh	r3, [r7, #8]
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
 80047c8:	e192      	b.n	8004af0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	827b      	strh	r3, [r7, #18]
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01b      	beq.n	800481a <USB_DeactivateEndpoint+0xf6>
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	823b      	strh	r3, [r7, #16]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	8a3b      	ldrh	r3, [r7, #16]
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004830:	81fb      	strh	r3, [r7, #14]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]
 8004852:	e14d      	b.n	8004af0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 80a5 	bne.w	80049a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	843b      	strh	r3, [r7, #32]
 800486c:	8c3b      	ldrh	r3, [r7, #32]
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01b      	beq.n	80048ae <USB_DeactivateEndpoint+0x18a>
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488c:	83fb      	strh	r3, [r7, #30]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	8bfb      	ldrh	r3, [r7, #30]
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	83bb      	strh	r3, [r7, #28]
 80048bc:	8bbb      	ldrh	r3, [r7, #28]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01b      	beq.n	80048fe <USB_DeactivateEndpoint+0x1da>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	837b      	strh	r3, [r7, #26]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8b7b      	ldrh	r3, [r7, #26]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	833b      	strh	r3, [r7, #24]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	8b3b      	ldrh	r3, [r7, #24]
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	82fb      	strh	r3, [r7, #22]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004984:	82bb      	strh	r3, [r7, #20]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	8abb      	ldrh	r3, [r7, #20]
 8004992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8013      	strh	r3, [r2, #0]
 80049a6:	e0a3      	b.n	8004af0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <USB_DeactivateEndpoint+0x2d4>
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <USB_DeactivateEndpoint+0x324>
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3734      	adds	r7, #52	; 0x34
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b0cc      	sub	sp, #304	; 0x130
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b0a:	6018      	str	r0, [r3, #0]
 8004b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b14:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	f041 817d 	bne.w	8005e22 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b54:	e007      	b.n	8004b66 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	7b1b      	ldrb	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d152      	bne.n	8004c1c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6959      	ldr	r1, [r3, #20]
 8004b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	88da      	ldrh	r2, [r3, #6]
 8004b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f001 ff23 	bl	80069e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004baa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bd4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	440a      	add	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	011a      	lsls	r2, r3, #4
 8004bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	f001 b8b5 	b.w	8005d86 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	78db      	ldrb	r3, [r3, #3]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f040 84c6 	bne.w	80055ba <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	f240 8443 	bls.w	80054d2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb8:	1ad2      	subs	r2, r2, r3
 8004cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 823e 	beq.w	800516a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cf6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cfa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 809a 	bne.w	8004e48 <USB_EPStartXfer+0x34c>
 8004d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d46:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	011a      	lsls	r2, r3, #4
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d122      	bne.n	8004dc6 <USB_EPStartXfer+0x2ca>
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e079      	b.n	8004eba <USB_EPStartXfer+0x3be>
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	2b3e      	cmp	r3, #62	; 0x3e
 8004dcc:	d81b      	bhi.n	8004e06 <USB_EPStartXfer+0x30a>
 8004dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <USB_EPStartXfer+0x2f2>
 8004de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004de8:	3301      	adds	r3, #1
 8004dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e059      	b.n	8004eba <USB_EPStartXfer+0x3be>
 8004e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <USB_EPStartXfer+0x32a>
 8004e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e20:	3b01      	subs	r3, #1
 8004e22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e038      	b.n	8004eba <USB_EPStartXfer+0x3be>
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d130      	bne.n	8004eba <USB_EPStartXfer+0x3be>
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e76:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	895b      	ldrh	r3, [r3, #10]
 8004ec6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6959      	ldr	r1, [r3, #20]
 8004ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ee0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ee4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ee8:	6800      	ldr	r0, [r0, #0]
 8004eea:	f001 fd7d 	bl	80069e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	441a      	add	r2, r3
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d90f      	bls.n	8004f48 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f38:	1ad2      	subs	r2, r2, r3
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	621a      	str	r2, [r3, #32]
 8004f46:	e00e      	b.n	8004f66 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 809a 	bne.w	80050ac <USB_EPStartXfer+0x5b0>
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f84:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004faa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d122      	bne.n	800502a <USB_EPStartXfer+0x52e>
 8004fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501a:	b29a      	uxth	r2, r3
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e083      	b.n	8005132 <USB_EPStartXfer+0x636>
 800502a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502e:	2b3e      	cmp	r3, #62	; 0x3e
 8005030:	d81b      	bhi.n	800506a <USB_EPStartXfer+0x56e>
 8005032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <USB_EPStartXfer+0x556>
 8005048:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800504c:	3301      	adds	r3, #1
 800504e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005052:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005056:	b29b      	uxth	r3, r3
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e063      	b.n	8005132 <USB_EPStartXfer+0x636>
 800506a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <USB_EPStartXfer+0x58e>
 8005080:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005084:	3b01      	subs	r3, #1
 8005086:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800508a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800508e:	b29b      	uxth	r3, r3
 8005090:	029b      	lsls	r3, r3, #10
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509c:	b29a      	uxth	r2, r3
 800509e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e042      	b.n	8005132 <USB_EPStartXfer+0x636>
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d13a      	bne.n	8005132 <USB_EPStartXfer+0x636>
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	440a      	add	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	011a      	lsls	r2, r3, #4
 8005106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4413      	add	r3, r2
 8005112:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	b29a      	uxth	r2, r3
 8005126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	891b      	ldrh	r3, [r3, #8]
 800513e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	b29b      	uxth	r3, r3
 8005154:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005158:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800515c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005160:	6800      	ldr	r0, [r0, #0]
 8005162:	f001 fc41 	bl	80069e8 <USB_WritePMA>
 8005166:	f000 be0e 	b.w	8005d86 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d16d      	bne.n	8005256 <USB_EPStartXfer+0x75a>
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519a:	4413      	add	r3, r2
 800519c:	64bb      	str	r3, [r7, #72]	; 0x48
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	011a      	lsls	r2, r3, #4
 80051ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b4:	647b      	str	r3, [r7, #68]	; 0x44
 80051b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d112      	bne.n	80051e4 <USB_EPStartXfer+0x6e8>
 80051be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e063      	b.n	80052ac <USB_EPStartXfer+0x7b0>
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ea:	d817      	bhi.n	800521c <USB_EPStartXfer+0x720>
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <USB_EPStartXfer+0x710>
 8005202:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005206:	3301      	adds	r3, #1
 8005208:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800520c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29a      	uxth	r2, r3
 8005216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e047      	b.n	80052ac <USB_EPStartXfer+0x7b0>
 800521c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <USB_EPStartXfer+0x740>
 8005232:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005236:	3b01      	subs	r3, #1
 8005238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800523c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	e02a      	b.n	80052ac <USB_EPStartXfer+0x7b0>
 8005256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d122      	bne.n	80052ac <USB_EPStartXfer+0x7b0>
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	653b      	str	r3, [r7, #80]	; 0x50
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005286:	4413      	add	r3, r2
 8005288:	653b      	str	r3, [r7, #80]	; 0x50
 800528a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	011a      	lsls	r2, r3, #4
 8005298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529a:	4413      	add	r3, r2
 800529c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	891b      	ldrh	r3, [r3, #8]
 80052b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6959      	ldr	r1, [r3, #20]
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	f001 fb84 	bl	80069e8 <USB_WritePMA>
            ep->xfer_buff += len;
 80052e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f0:	441a      	add	r2, r3
 80052f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90f      	bls.n	800533a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	621a      	str	r2, [r3, #32]
 8005338:	e00e      	b.n	8005358 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800533a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2200      	movs	r2, #0
 8005356:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
 8005364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d16d      	bne.n	8005450 <USB_EPStartXfer+0x954>
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	4413      	add	r3, r2
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
 8005398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011a      	lsls	r2, r3, #4
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d112      	bne.n	80053de <USB_EPStartXfer+0x8e2>
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e05d      	b.n	800549a <USB_EPStartXfer+0x99e>
 80053de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e2:	2b3e      	cmp	r3, #62	; 0x3e
 80053e4:	d817      	bhi.n	8005416 <USB_EPStartXfer+0x91a>
 80053e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <USB_EPStartXfer+0x90a>
 80053fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005400:	3301      	adds	r3, #1
 8005402:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800540a:	b29b      	uxth	r3, r3
 800540c:	029b      	lsls	r3, r3, #10
 800540e:	b29a      	uxth	r2, r3
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e041      	b.n	800549a <USB_EPStartXfer+0x99e>
 8005416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <USB_EPStartXfer+0x93a>
 800542c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005430:	3b01      	subs	r3, #1
 8005432:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800543a:	b29b      	uxth	r3, r3
 800543c:	029b      	lsls	r3, r3, #10
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e024      	b.n	800549a <USB_EPStartXfer+0x99e>
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d11c      	bne.n	800549a <USB_EPStartXfer+0x99e>
 8005460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546e:	b29b      	uxth	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005474:	4413      	add	r3, r2
 8005476:	643b      	str	r3, [r7, #64]	; 0x40
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	4413      	add	r3, r2
 800548a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005494:	b29a      	uxth	r2, r3
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800549a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	895b      	ldrh	r3, [r3, #10]
 80054a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6959      	ldr	r1, [r3, #20]
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054c8:	6800      	ldr	r0, [r0, #0]
 80054ca:	f001 fa8d 	bl	80069e8 <USB_WritePMA>
 80054ce:	f000 bc5a 	b.w	8005d86 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80054e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800553e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555e:	4413      	add	r3, r2
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005572:	4413      	add	r3, r2
 8005574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005578:	65bb      	str	r3, [r7, #88]	; 0x58
 800557a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557e:	b29a      	uxth	r2, r3
 8005580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005582:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	891b      	ldrh	r3, [r3, #8]
 8005590:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6959      	ldr	r1, [r3, #20]
 80055a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055aa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055ae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	f001 fa18 	bl	80069e8 <USB_WritePMA>
 80055b8:	e3e5      	b.n	8005d86 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80055ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800560a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800560e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005612:	b29b      	uxth	r3, r3
 8005614:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 81bc 	beq.w	80059d4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d16d      	bne.n	8005756 <USB_EPStartXfer+0xc5a>
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	67bb      	str	r3, [r7, #120]	; 0x78
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005694:	b29b      	uxth	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569a:	4413      	add	r3, r2
 800569c:	67bb      	str	r3, [r7, #120]	; 0x78
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	011a      	lsls	r2, r3, #4
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056b4:	677b      	str	r3, [r7, #116]	; 0x74
 80056b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d112      	bne.n	80056e4 <USB_EPStartXfer+0xbe8>
 80056be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e060      	b.n	80057a6 <USB_EPStartXfer+0xcaa>
 80056e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ea:	d817      	bhi.n	800571c <USB_EPStartXfer+0xc20>
 80056ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <USB_EPStartXfer+0xc10>
 8005702:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005706:	3301      	adds	r3, #1
 8005708:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800570c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005710:	b29b      	uxth	r3, r3
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	b29a      	uxth	r2, r3
 8005716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e044      	b.n	80057a6 <USB_EPStartXfer+0xcaa>
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <USB_EPStartXfer+0xc40>
 8005732:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005736:	3b01      	subs	r3, #1
 8005738:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800573c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29b      	uxth	r3, r3
 8005746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574e:	b29a      	uxth	r2, r3
 8005750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e027      	b.n	80057a6 <USB_EPStartXfer+0xcaa>
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d11f      	bne.n	80057a6 <USB_EPStartXfer+0xcaa>
 8005766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800577c:	4413      	add	r3, r2
 800577e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	011a      	lsls	r2, r3, #4
 8005790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005794:	4413      	add	r3, r2
 8005796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800579a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800579c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	895b      	ldrh	r3, [r3, #10]
 80057b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6959      	ldr	r1, [r3, #20]
 80057c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057d4:	6800      	ldr	r0, [r0, #0]
 80057d6:	f001 f907 	bl	80069e8 <USB_WritePMA>
          ep->xfer_buff += len;
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	441a      	add	r2, r3
 80057ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a1a      	ldr	r2, [r3, #32]
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d90f      	bls.n	8005834 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	621a      	str	r2, [r3, #32]
 8005832:	e00e      	b.n	8005852 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8295 	beq.w	8005d86 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d16d      	bne.n	8005948 <USB_EPStartXfer+0xe4c>
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	66bb      	str	r3, [r7, #104]	; 0x68
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800588c:	4413      	add	r3, r2
 800588e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058a6:	667b      	str	r3, [r7, #100]	; 0x64
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d112      	bne.n	80058d6 <USB_EPStartXfer+0xdda>
 80058b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e063      	b.n	800599e <USB_EPStartXfer+0xea2>
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	2b3e      	cmp	r3, #62	; 0x3e
 80058dc:	d817      	bhi.n	800590e <USB_EPStartXfer+0xe12>
 80058de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0xe02>
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	b29b      	uxth	r3, r3
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	b29a      	uxth	r2, r3
 8005908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e047      	b.n	800599e <USB_EPStartXfer+0xea2>
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <USB_EPStartXfer+0xe32>
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	3b01      	subs	r3, #1
 800592a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e02a      	b.n	800599e <USB_EPStartXfer+0xea2>
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d122      	bne.n	800599e <USB_EPStartXfer+0xea2>
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	673b      	str	r3, [r7, #112]	; 0x70
 8005964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005978:	4413      	add	r3, r2
 800597a:	673b      	str	r3, [r7, #112]	; 0x70
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	011a      	lsls	r2, r3, #4
 800598a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800598c:	4413      	add	r3, r2
 800598e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005998:	b29a      	uxth	r2, r3
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800599e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	891b      	ldrh	r3, [r3, #8]
 80059aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	f001 f80b 	bl	80069e8 <USB_WritePMA>
 80059d2:	e1d8      	b.n	8005d86 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d178      	bne.n	8005ad6 <USB_EPStartXfer+0xfda>
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a08:	4413      	add	r3, r2
 8005a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	011a      	lsls	r2, r3, #4
 8005a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <USB_EPStartXfer+0xf64>
 8005a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e06b      	b.n	8005b38 <USB_EPStartXfer+0x103c>
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	2b3e      	cmp	r3, #62	; 0x3e
 8005a66:	d818      	bhi.n	8005a9a <USB_EPStartXfer+0xf9e>
 8005a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <USB_EPStartXfer+0xf8c>
 8005a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a82:	3301      	adds	r3, #1
 8005a84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	029b      	lsls	r3, r3, #10
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e04e      	b.n	8005b38 <USB_EPStartXfer+0x103c>
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <USB_EPStartXfer+0xfbe>
 8005ab0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005aba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e030      	b.n	8005b38 <USB_EPStartXfer+0x103c>
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d128      	bne.n	8005b38 <USB_EPStartXfer+0x103c>
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	011a      	lsls	r2, r3, #4
 8005b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	891b      	ldrh	r3, [r3, #8]
 8005b44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6959      	ldr	r1, [r3, #20]
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b66:	6800      	ldr	r0, [r0, #0]
 8005b68:	f000 ff3e 	bl	80069e8 <USB_WritePMA>
          ep->xfer_buff += len;
 8005b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	441a      	add	r2, r3
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d90f      	bls.n	8005bc6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	621a      	str	r2, [r3, #32]
 8005bc4:	e00e      	b.n	8005be4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2200      	movs	r2, #0
 8005be2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80cc 	beq.w	8005d86 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d178      	bne.n	8005cfe <USB_EPStartXfer+0x1202>
 8005c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c30:	4413      	add	r3, r2
 8005c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	011a      	lsls	r2, r3, #4
 8005c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d116      	bne.n	8005c88 <USB_EPStartXfer+0x118c>
 8005c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e064      	b.n	8005d52 <USB_EPStartXfer+0x1256>
 8005c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8e:	d818      	bhi.n	8005cc2 <USB_EPStartXfer+0x11c6>
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <USB_EPStartXfer+0x11b4>
 8005ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005caa:	3301      	adds	r3, #1
 8005cac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e047      	b.n	8005d52 <USB_EPStartXfer+0x1256>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <USB_EPStartXfer+0x11e6>
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e029      	b.n	8005d52 <USB_EPStartXfer+0x1256>
 8005cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d121      	bne.n	8005d52 <USB_EPStartXfer+0x1256>
 8005d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d24:	4413      	add	r3, r2
 8005d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	011a      	lsls	r2, r3, #4
 8005d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	895b      	ldrh	r3, [r3, #10]
 8005d5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6959      	ldr	r1, [r3, #20]
 8005d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d80:	6800      	ldr	r0, [r0, #0]
 8005d82:	f000 fe31 	bl	80069e8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005da8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	8013      	strh	r3, [r2, #0]
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005dbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dc2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005dc6:	8812      	ldrh	r2, [r2, #0]
 8005dc8:	f082 0210 	eor.w	r2, r2, #16
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005dd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dda:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005dde:	8812      	ldrh	r2, [r2, #0]
 8005de0:	f082 0220 	eor.w	r2, r2, #32
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
 8005e1e:	f000 bc9f 	b.w	8006760 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 80ae 	bne.w	8005f90 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d917      	bls.n	8005e80 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	619a      	str	r2, [r3, #24]
 8005e7e:	e00e      	b.n	8005e9e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	011a      	lsls	r2, r3, #4
 8005ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d116      	bne.n	8005f1a <USB_EPStartXfer+0x141e>
 8005eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e3e8      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
 8005f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f20:	d818      	bhi.n	8005f54 <USB_EPStartXfer+0x1458>
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <USB_EPStartXfer+0x1446>
 8005f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	e3cb      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <USB_EPStartXfer+0x1478>
 8005f6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	e3ad      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	f040 8200 	bne.w	80063a2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 8091 	bne.w	80060d6 <USB_EPStartXfer+0x15da>
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fd8:	4413      	add	r3, r2
 8005fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	011a      	lsls	r2, r3, #4
 8005fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <USB_EPStartXfer+0x153c>
 800600a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006016:	b29a      	uxth	r2, r3
 8006018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e083      	b.n	8006140 <USB_EPStartXfer+0x1644>
 8006038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b3e      	cmp	r3, #62	; 0x3e
 8006046:	d820      	bhi.n	800608a <USB_EPStartXfer+0x158e>
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800605a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USB_EPStartXfer+0x157c>
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e05a      	b.n	8006140 <USB_EPStartXfer+0x1644>
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USB_EPStartXfer+0x15be>
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	e034      	b.n	8006140 <USB_EPStartXfer+0x1644>
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d12c      	bne.n	8006140 <USB_EPStartXfer+0x1644>
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006102:	b29b      	uxth	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800610a:	4413      	add	r3, r2
 800610c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	011a      	lsls	r2, r3, #4
 800611e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006122:	4413      	add	r3, r2
 8006124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800614e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 8091 	bne.w	8006282 <USB_EPStartXfer+0x1786>
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	011a      	lsls	r2, r3, #4
 8006198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800619c:	4413      	add	r3, r2
 800619e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d116      	bne.n	80061e4 <USB_EPStartXfer+0x16e8>
 80061b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e07c      	b.n	80062de <USB_EPStartXfer+0x17e2>
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b3e      	cmp	r3, #62	; 0x3e
 80061f2:	d820      	bhi.n	8006236 <USB_EPStartXfer+0x173a>
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USB_EPStartXfer+0x1728>
 800621a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006224:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e053      	b.n	80062de <USB_EPStartXfer+0x17e2>
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <USB_EPStartXfer+0x176a>
 800625c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006260:	3b01      	subs	r3, #1
 8006262:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800626a:	b29b      	uxth	r3, r3
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	b29b      	uxth	r3, r3
 8006270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e02d      	b.n	80062de <USB_EPStartXfer+0x17e2>
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d125      	bne.n	80062de <USB_EPStartXfer+0x17e2>
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062a8:	4413      	add	r3, r2
 80062aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	011a      	lsls	r2, r3, #4
 80062bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 81fe 	beq.w	80066ec <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006310:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <USB_EPStartXfer+0x182c>
 800631c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006328:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800632c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	f040 81db 	bne.w	80066ec <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006336:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 81d4 	bne.w	80066ec <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
 80063a0:	e1a4      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 819a 	bne.w	80066e8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d917      	bls.n	8006400 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	619a      	str	r2, [r3, #24]
 80063fe:	e00e      	b.n	800641e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800641e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d178      	bne.n	8006520 <USB_EPStartXfer+0x1a24>
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006452:	4413      	add	r3, r2
 8006454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	011a      	lsls	r2, r3, #4
 8006466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800646a:	4413      	add	r3, r2
 800646c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <USB_EPStartXfer+0x19ae>
 800647c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e06b      	b.n	8006582 <USB_EPStartXfer+0x1a86>
 80064aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ae:	2b3e      	cmp	r3, #62	; 0x3e
 80064b0:	d818      	bhi.n	80064e4 <USB_EPStartXfer+0x19e8>
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <USB_EPStartXfer+0x19d6>
 80064c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064cc:	3301      	adds	r3, #1
 80064ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e04e      	b.n	8006582 <USB_EPStartXfer+0x1a86>
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <USB_EPStartXfer+0x1a08>
 80064fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fe:	3b01      	subs	r3, #1
 8006500:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006508:	b29b      	uxth	r3, r3
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e030      	b.n	8006582 <USB_EPStartXfer+0x1a86>
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d128      	bne.n	8006582 <USB_EPStartXfer+0x1a86>
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	4413      	add	r3, r2
 8006556:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	011a      	lsls	r2, r3, #4
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	4413      	add	r3, r2
 800656e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006572:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d178      	bne.n	8006692 <USB_EPStartXfer+0x1b96>
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c4:	4413      	add	r3, r2
 80065c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	011a      	lsls	r2, r3, #4
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065dc:	4413      	add	r3, r2
 80065de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d116      	bne.n	800661c <USB_EPStartXfer+0x1b20>
 80065ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e067      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
 800661c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006620:	2b3e      	cmp	r3, #62	; 0x3e
 8006622:	d818      	bhi.n	8006656 <USB_EPStartXfer+0x1b5a>
 8006624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800662e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <USB_EPStartXfer+0x1b48>
 800663a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800663e:	3301      	adds	r3, #1
 8006640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006644:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006648:	b29b      	uxth	r3, r3
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	b29a      	uxth	r2, r3
 800664e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e04a      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USB_EPStartXfer+0x1b7a>
 800666c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006670:	3b01      	subs	r3, #1
 8006672:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e02c      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d124      	bne.n	80066ec <USB_EPStartXfer+0x1bf0>
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	011a      	lsls	r2, r3, #4
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	e001      	b.n	80066ec <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e03a      	b.n	8006762 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006716:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800671a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800671e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006722:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800672a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	81bb      	strh	r3, [r7, #12]
 8006796:	89bb      	ldrh	r3, [r7, #12]
 8006798:	f083 0310 	eor.w	r3, r3, #16
 800679c:	81bb      	strh	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	441a      	add	r2, r3
 80067a8:	89bb      	ldrh	r3, [r7, #12]
 80067aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8013      	strh	r3, [r2, #0]
 80067be:	e01f      	b.n	8006800 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	81fb      	strh	r3, [r7, #14]
 80067d8:	89fb      	ldrh	r3, [r7, #14]
 80067da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067de:	81fb      	strh	r3, [r7, #14]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	89fb      	ldrh	r3, [r7, #14]
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	7b1b      	ldrb	r3, [r3, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 809d 	bne.w	800695a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d04c      	beq.n	80068c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	823b      	strh	r3, [r7, #16]
 8006836:	8a3b      	ldrh	r3, [r7, #16]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01b      	beq.n	8006878 <USB_EPClearStall+0x6c>
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	81fb      	strh	r3, [r7, #14]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d06c      	beq.n	800695a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006896:	81bb      	strh	r3, [r7, #12]
 8006898:	89bb      	ldrh	r3, [r7, #12]
 800689a:	f083 0320 	eor.w	r3, r3, #32
 800689e:	81bb      	strh	r3, [r7, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	89bb      	ldrh	r3, [r7, #12]
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
 80068c0:	e04b      	b.n	800695a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	82fb      	strh	r3, [r7, #22]
 80068d0:	8afb      	ldrh	r3, [r7, #22]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <USB_EPClearStall+0x106>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f0:	82bb      	strh	r3, [r7, #20]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8abb      	ldrh	r3, [r7, #20]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	827b      	strh	r3, [r7, #18]
 800692a:	8a7b      	ldrh	r3, [r7, #18]
 800692c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006930:	827b      	strh	r3, [r7, #18]
 8006932:	8a7b      	ldrh	r3, [r7, #18]
 8006934:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006938:	827b      	strh	r3, [r7, #18]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8a7b      	ldrh	r3, [r7, #18]
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr

08006966 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069c6:	68fb      	ldr	r3, [r7, #12]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b08d      	sub	sp, #52	; 0x34
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4611      	mov	r1, r2
 80069f4:	461a      	mov	r2, r3
 80069f6:	460b      	mov	r3, r1
 80069f8:	80fb      	strh	r3, [r7, #6]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069fe:	88bb      	ldrh	r3, [r7, #4]
 8006a00:	3301      	adds	r3, #1
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	005a      	lsls	r2, r3, #1
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a20:	e01e      	b.n	8006a60 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	3302      	adds	r3, #2
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	3301      	adds	r3, #1
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1dd      	bne.n	8006a22 <USB_WritePMA+0x3a>
  }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	3734      	adds	r7, #52	; 0x34
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b08b      	sub	sp, #44	; 0x2c
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	460b      	mov	r3, r1
 8006a82:	80fb      	strh	r3, [r7, #6]
 8006a84:	4613      	mov	r3, r2
 8006a86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a88:	88bb      	ldrh	r3, [r7, #4]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	005a      	lsls	r2, r3, #1
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aaa:	e01b      	b.n	8006ae4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	3302      	adds	r3, #2
 8006adc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e0      	bne.n	8006aac <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006aea:	88bb      	ldrh	r3, [r7, #4]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	701a      	strb	r2, [r3, #0]
  }
}
 8006b06:	bf00      	nop
 8006b08:	372c      	adds	r7, #44	; 0x2c
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	2203      	movs	r2, #3
 8006b20:	2181      	movs	r1, #129	; 0x81
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fc61 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006b2e:	2010      	movs	r0, #16
 8006b30:	f001 fd70 	bl	8008614 <USBD_static_malloc>
 8006b34:	4602      	mov	r2, r0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006b46:	2302      	movs	r3, #2
 8006b48:	e005      	b.n	8006b56 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b50:	2200      	movs	r2, #0
 8006b52:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006b6a:	2181      	movs	r1, #129	; 0x81
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fc62 	bl	8008436 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fd4f 	bl	800862c <USBD_static_free>
    pdev->pClassData = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d045      	beq.n	8006c5a <USBD_HID_Setup+0xba>
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	f040 80d3 	bne.w	8006d7a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	3b02      	subs	r3, #2
 8006bda:	2b09      	cmp	r3, #9
 8006bdc:	d835      	bhi.n	8006c4a <USBD_HID_Setup+0xaa>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <USBD_HID_Setup+0x44>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c3b 	.word	0x08006c3b
 8006be8:	08006c1b 	.word	0x08006c1b
 8006bec:	08006c4b 	.word	0x08006c4b
 8006bf0:	08006c4b 	.word	0x08006c4b
 8006bf4:	08006c4b 	.word	0x08006c4b
 8006bf8:	08006c4b 	.word	0x08006c4b
 8006bfc:	08006c4b 	.word	0x08006c4b
 8006c00:	08006c4b 	.word	0x08006c4b
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c0d 	.word	0x08006c0d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	601a      	str	r2, [r3, #0]
          break;
 8006c18:	e01e      	b.n	8006c58 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f922 	bl	8007e6a <USBD_CtlSendData>
          break;
 8006c26:	e017      	b.n	8006c58 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]
          break;
 8006c38:	e00e      	b.n	8006c58 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f911 	bl	8007e6a <USBD_CtlSendData>
          break;
 8006c48:	e006      	b.n	8006c58 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f8a2 	bl	8007d96 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c52:	2302      	movs	r3, #2
 8006c54:	75fb      	strb	r3, [r7, #23]
          break;
 8006c56:	bf00      	nop
      }
      break;
 8006c58:	e096      	b.n	8006d88 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b0b      	cmp	r3, #11
 8006c60:	f200 8083 	bhi.w	8006d6a <USBD_HID_Setup+0x1ca>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <USBD_HID_Setup+0xcc>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006c9d 	.word	0x08006c9d
 8006c70:	08006d6b 	.word	0x08006d6b
 8006c74:	08006d6b 	.word	0x08006d6b
 8006c78:	08006d6b 	.word	0x08006d6b
 8006c7c:	08006d6b 	.word	0x08006d6b
 8006c80:	08006d6b 	.word	0x08006d6b
 8006c84:	08006cc5 	.word	0x08006cc5
 8006c88:	08006d6b 	.word	0x08006d6b
 8006c8c:	08006d6b 	.word	0x08006d6b
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006d1d 	.word	0x08006d1d
 8006c98:	08006d45 	.word	0x08006d45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d107      	bne.n	8006cb6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ca6:	f107 030e 	add.w	r3, r7, #14
 8006caa:	2202      	movs	r2, #2
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 f8db 	bl	8007e6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cb4:	e060      	b.n	8006d78 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f86c 	bl	8007d96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cc2:	e059      	b.n	8006d78 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	885b      	ldrh	r3, [r3, #2]
 8006cc8:	0a1b      	lsrs	r3, r3, #8
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b22      	cmp	r3, #34	; 0x22
 8006cce:	d108      	bne.n	8006ce2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	88db      	ldrh	r3, [r3, #6]
 8006cd4:	2b4a      	cmp	r3, #74	; 0x4a
 8006cd6:	bf28      	it	cs
 8006cd8:	234a      	movcs	r3, #74	; 0x4a
 8006cda:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <USBD_HID_Setup+0x1f4>)
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	e015      	b.n	8006d0e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	885b      	ldrh	r3, [r3, #2]
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b21      	cmp	r3, #33	; 0x21
 8006cec:	d108      	bne.n	8006d00 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006cee:	4b2a      	ldr	r3, [pc, #168]	; (8006d98 <USBD_HID_Setup+0x1f8>)
 8006cf0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b09      	cmp	r3, #9
 8006cf8:	bf28      	it	cs
 8006cfa:	2309      	movcs	r3, #9
 8006cfc:	83fb      	strh	r3, [r7, #30]
 8006cfe:	e006      	b.n	8006d0e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 f847 	bl	8007d96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d0c:	e034      	b.n	8006d78 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006d0e:	8bfb      	ldrh	r3, [r7, #30]
 8006d10:	461a      	mov	r2, r3
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f8a8 	bl	8007e6a <USBD_CtlSendData>
          break;
 8006d1a:	e02d      	b.n	8006d78 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d107      	bne.n	8006d36 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f89b 	bl	8007e6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d34:	e020      	b.n	8006d78 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f82c 	bl	8007d96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	75fb      	strb	r3, [r7, #23]
          break;
 8006d42:	e019      	b.n	8006d78 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d106      	bne.n	8006d5c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d5a:	e00d      	b.n	8006d78 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f819 	bl	8007d96 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	75fb      	strb	r3, [r7, #23]
          break;
 8006d68:	e006      	b.n	8006d78 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f812 	bl	8007d96 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	75fb      	strb	r3, [r7, #23]
          break;
 8006d76:	bf00      	nop
      }
      break;
 8006d78:	e006      	b.n	8006d88 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f80a 	bl	8007d96 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	75fb      	strb	r3, [r7, #23]
      break;
 8006d86:	bf00      	nop
  }

  return ret;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000178 	.word	0x20000178
 8006d98:	20000160 	.word	0x20000160

08006d9c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2222      	movs	r2, #34	; 0x22
 8006da8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006daa:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	200000f4 	.word	0x200000f4

08006dbc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2222      	movs	r2, #34	; 0x22
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000118 	.word	0x20000118

08006ddc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2222      	movs	r2, #34	; 0x22
 8006de8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006dea:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	2000013c 	.word	0x2000013c

08006dfc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	2200      	movs	r2, #0
 8006e10:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
	...

08006e20 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	2000016c 	.word	0x2000016c

08006e40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e54:	2302      	movs	r3, #2
 8006e56:	e01a      	b.n	8006e8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	79fa      	ldrb	r2, [r7, #7]
 8006e84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f001 fa4c 	bl	8008324 <USBD_LL_Init>

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d006      	beq.n	8006eb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e001      	b.n	8006ebc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fa6f 	bl	80083b4 <USBD_LL_Start>

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f00:	2302      	movs	r3, #2
 8006f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fed7 	bl	8007d1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d016      	beq.n	8006fc2 <USBD_LL_SetupStage+0x6a>
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d81c      	bhi.n	8006fd2 <USBD_LL_SetupStage+0x7a>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <USBD_LL_SetupStage+0x4a>
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d008      	beq.n	8006fb2 <USBD_LL_SetupStage+0x5a>
 8006fa0:	e017      	b.n	8006fd2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9ca 	bl	8007344 <USBD_StdDevReq>
      break;
 8006fb0:	e01a      	b.n	8006fe8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa2c 	bl	8007418 <USBD_StdItfReq>
      break;
 8006fc0:	e012      	b.n	8006fe8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa6c 	bl	80074a8 <USBD_StdEPReq>
      break;
 8006fd0:	e00a      	b.n	8006fe8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fa47 	bl	8008474 <USBD_LL_StallEP>
      break;
 8006fe6:	bf00      	nop
  }

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d14b      	bne.n	800709e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800700c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007014:	2b03      	cmp	r3, #3
 8007016:	d134      	bne.n	8007082 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	429a      	cmp	r2, r3
 8007022:	d919      	bls.n	8007058 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800703a:	429a      	cmp	r2, r3
 800703c:	d203      	bcs.n	8007046 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007042:	b29b      	uxth	r3, r3
 8007044:	e002      	b.n	800704c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800704a:	b29b      	uxth	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 ff38 	bl	8007ec6 <USBD_CtlContinueRx>
 8007056:	e038      	b.n	80070ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800706a:	2b03      	cmp	r3, #3
 800706c:	d105      	bne.n	800707a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 ff35 	bl	8007eea <USBD_CtlSendStatus>
 8007080:	e023      	b.n	80070ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007088:	2b05      	cmp	r3, #5
 800708a:	d11e      	bne.n	80070ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007094:	2100      	movs	r1, #0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 f9ec 	bl	8008474 <USBD_LL_StallEP>
 800709c:	e015      	b.n	80070ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d108      	bne.n	80070c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	7afa      	ldrb	r2, [r7, #11]
 80070be:	4611      	mov	r1, r2
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	4798      	blx	r3
 80070c4:	e001      	b.n	80070ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070c6:	2302      	movs	r3, #2
 80070c8:	e000      	b.n	80070cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	460b      	mov	r3, r1
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d17f      	bne.n	80071e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3314      	adds	r3, #20
 80070ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d15c      	bne.n	80071b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	429a      	cmp	r2, r3
 8007102:	d915      	bls.n	8007130 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fec0 	bl	8007ea2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f001 fa4f 	bl	80085cc <USBD_LL_PrepareReceive>
 800712e:	e04e      	b.n	80071ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	6912      	ldr	r2, [r2, #16]
 8007138:	fbb3 f1f2 	udiv	r1, r3, r2
 800713c:	fb01 f202 	mul.w	r2, r1, r2
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d11c      	bne.n	8007180 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800714e:	429a      	cmp	r2, r3
 8007150:	d316      	bcc.n	8007180 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800715c:	429a      	cmp	r2, r3
 800715e:	d20f      	bcs.n	8007180 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fe9c 	bl	8007ea2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f001 fa27 	bl	80085cc <USBD_LL_PrepareReceive>
 800717e:	e026      	b.n	80071ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007192:	2b03      	cmp	r3, #3
 8007194:	d105      	bne.n	80071a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 f965 	bl	8008474 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 feb0 	bl	8007f10 <USBD_CtlReceiveStatus>
 80071b0:	e00d      	b.n	80071ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d004      	beq.n	80071c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f001 f953 	bl	8008474 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d11d      	bne.n	8007214 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fe81 	bl	8006ee0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071e6:	e015      	b.n	8007214 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d108      	bne.n	8007210 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	7afa      	ldrb	r2, [r7, #11]
 8007208:	4611      	mov	r1, r2
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	4798      	blx	r3
 800720e:	e001      	b.n	8007214 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007210:	2302      	movs	r3, #2
 8007212:	e000      	b.n	8007216 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f8dc 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	2200      	movs	r2, #0
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f8ce 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2240      	movs	r2, #64	; 0x40
 8007258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6852      	ldr	r2, [r2, #4]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	4611      	mov	r1, r2
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
  }

  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2204      	movs	r2, #4
 80072d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr

080072e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d105      	bne.n	8007304 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10b      	bne.n	800733a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d005      	beq.n	800736a <USBD_StdDevReq+0x26>
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d84f      	bhi.n	8007402 <USBD_StdDevReq+0xbe>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <USBD_StdDevReq+0x36>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d14b      	bne.n	8007402 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      break;
 8007378:	e048      	b.n	800740c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b09      	cmp	r3, #9
 8007380:	d839      	bhi.n	80073f6 <USBD_StdDevReq+0xb2>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <USBD_StdDevReq+0x44>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073d9 	.word	0x080073d9
 800738c:	080073ed 	.word	0x080073ed
 8007390:	080073f7 	.word	0x080073f7
 8007394:	080073e3 	.word	0x080073e3
 8007398:	080073f7 	.word	0x080073f7
 800739c:	080073bb 	.word	0x080073bb
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073f7 	.word	0x080073f7
 80073a8:	080073cf 	.word	0x080073cf
 80073ac:	080073c5 	.word	0x080073c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9dc 	bl	8007770 <USBD_GetDescriptor>
          break;
 80073b8:	e022      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb3f 	bl	8007a40 <USBD_SetAddress>
          break;
 80073c2:	e01d      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb7e 	bl	8007ac8 <USBD_SetConfig>
          break;
 80073cc:	e018      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc07 	bl	8007be4 <USBD_GetConfig>
          break;
 80073d6:	e013      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc37 	bl	8007c4e <USBD_GetStatus>
          break;
 80073e0:	e00e      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc65 	bl	8007cb4 <USBD_SetFeature>
          break;
 80073ea:	e009      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc74 	bl	8007cdc <USBD_ClrFeature>
          break;
 80073f4:	e004      	b.n	8007400 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fccc 	bl	8007d96 <USBD_CtlError>
          break;
 80073fe:	bf00      	nop
      }
      break;
 8007400:	e004      	b.n	800740c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fcc6 	bl	8007d96 <USBD_CtlError>
      break;
 800740a:	bf00      	nop
  }

  return ret;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop

08007418 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d005      	beq.n	800743e <USBD_StdItfReq+0x26>
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d82e      	bhi.n	8007494 <USBD_StdItfReq+0x7c>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <USBD_StdItfReq+0x26>
 800743a:	2b20      	cmp	r3, #32
 800743c:	d12a      	bne.n	8007494 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	3b01      	subs	r3, #1
 8007446:	2b02      	cmp	r3, #2
 8007448:	d81d      	bhi.n	8007486 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	889b      	ldrh	r3, [r3, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d813      	bhi.n	800747c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d110      	bne.n	8007490 <USBD_StdItfReq+0x78>
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10d      	bne.n	8007490 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fd38 	bl	8007eea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800747a:	e009      	b.n	8007490 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fc89 	bl	8007d96 <USBD_CtlError>
          break;
 8007484:	e004      	b.n	8007490 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc84 	bl	8007d96 <USBD_CtlError>
          break;
 800748e:	e000      	b.n	8007492 <USBD_StdItfReq+0x7a>
          break;
 8007490:	bf00      	nop
      }
      break;
 8007492:	e004      	b.n	800749e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fc7d 	bl	8007d96 <USBD_CtlError>
      break;
 800749c:	bf00      	nop
  }

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d007      	beq.n	80074d8 <USBD_StdEPReq+0x30>
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	f200 8146 	bhi.w	800775a <USBD_StdEPReq+0x2b2>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <USBD_StdEPReq+0x40>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	f040 8141 	bne.w	800775a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
      break;
 80074e6:	e13d      	b.n	8007764 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d10a      	bne.n	800750a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	e12d      	b.n	8007766 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b03      	cmp	r3, #3
 8007510:	d007      	beq.n	8007522 <USBD_StdEPReq+0x7a>
 8007512:	2b03      	cmp	r3, #3
 8007514:	f300 811b 	bgt.w	800774e <USBD_StdEPReq+0x2a6>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d072      	beq.n	8007602 <USBD_StdEPReq+0x15a>
 800751c:	2b01      	cmp	r3, #1
 800751e:	d03a      	beq.n	8007596 <USBD_StdEPReq+0xee>
 8007520:	e115      	b.n	800774e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	2b02      	cmp	r3, #2
 800752a:	d002      	beq.n	8007532 <USBD_StdEPReq+0x8a>
 800752c:	2b03      	cmp	r3, #3
 800752e:	d015      	beq.n	800755c <USBD_StdEPReq+0xb4>
 8007530:	e02b      	b.n	800758a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <USBD_StdEPReq+0xaa>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d009      	beq.n	8007552 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 ff96 	bl	8008474 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 ff92 	bl	8008474 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007550:	e020      	b.n	8007594 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc1e 	bl	8007d96 <USBD_CtlError>
              break;
 800755a:	e01b      	b.n	8007594 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10e      	bne.n	8007582 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <USBD_StdEPReq+0xda>
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d008      	beq.n	8007582 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	88db      	ldrh	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ff79 	bl	8008474 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fcb1 	bl	8007eea <USBD_CtlSendStatus>

              break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fc02 	bl	8007d96 <USBD_CtlError>
              break;
 8007592:	bf00      	nop
          }
          break;
 8007594:	e0e0      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	2b02      	cmp	r3, #2
 800759e:	d002      	beq.n	80075a6 <USBD_StdEPReq+0xfe>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d015      	beq.n	80075d0 <USBD_StdEPReq+0x128>
 80075a4:	e026      	b.n	80075f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <USBD_StdEPReq+0x11e>
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d009      	beq.n	80075c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 ff5c 	bl	8008474 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 ff58 	bl	8008474 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c4:	e01c      	b.n	8007600 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fbe4 	bl	8007d96 <USBD_CtlError>
              break;
 80075ce:	e017      	b.n	8007600 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d112      	bne.n	80075fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 ff63 	bl	80084b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc7c 	bl	8007eea <USBD_CtlSendStatus>
              }
              break;
 80075f2:	e004      	b.n	80075fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fbcd 	bl	8007d96 <USBD_CtlError>
              break;
 80075fc:	e000      	b.n	8007600 <USBD_StdEPReq+0x158>
              break;
 80075fe:	bf00      	nop
          }
          break;
 8007600:	e0aa      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	2b02      	cmp	r3, #2
 800760a:	d002      	beq.n	8007612 <USBD_StdEPReq+0x16a>
 800760c:	2b03      	cmp	r3, #3
 800760e:	d032      	beq.n	8007676 <USBD_StdEPReq+0x1ce>
 8007610:	e097      	b.n	8007742 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <USBD_StdEPReq+0x180>
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d004      	beq.n	8007628 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbb8 	bl	8007d96 <USBD_CtlError>
                break;
 8007626:	e091      	b.n	800774c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da0b      	bge.n	8007648 <USBD_StdEPReq+0x1a0>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3310      	adds	r3, #16
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	e00b      	b.n	8007660 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	3304      	adds	r3, #4
 8007660:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2202      	movs	r2, #2
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbfb 	bl	8007e6a <USBD_CtlSendData>
              break;
 8007674:	e06a      	b.n	800774c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da11      	bge.n	80076a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	f003 020f 	and.w	r2, r3, #15
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	3318      	adds	r3, #24
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d117      	bne.n	80076c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb7b 	bl	8007d96 <USBD_CtlError>
                  break;
 80076a0:	e054      	b.n	800774c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	f003 020f 	and.w	r2, r3, #15
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb68 	bl	8007d96 <USBD_CtlError>
                  break;
 80076c6:	e041      	b.n	800774c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	da0b      	bge.n	80076e8 <USBD_StdEPReq+0x240>
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3310      	adds	r3, #16
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	e00b      	b.n	8007700 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <USBD_StdEPReq+0x266>
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d103      	bne.n	8007716 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e00e      	b.n	8007734 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fee8 	bl	80084f0 <USBD_LL_IsStallEP>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e002      	b.n	8007734 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb95 	bl	8007e6a <USBD_CtlSendData>
              break;
 8007740:	e004      	b.n	800774c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb26 	bl	8007d96 <USBD_CtlError>
              break;
 800774a:	bf00      	nop
          }
          break;
 800774c:	e004      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb20 	bl	8007d96 <USBD_CtlError>
          break;
 8007756:	bf00      	nop
      }
      break;
 8007758:	e004      	b.n	8007764 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb1a 	bl	8007d96 <USBD_CtlError>
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	2b06      	cmp	r3, #6
 8007792:	f200 8128 	bhi.w	80079e6 <USBD_GetDescriptor+0x276>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBD_GetDescriptor+0x2c>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	08007811 	.word	0x08007811
 80077a8:	080079e7 	.word	0x080079e7
 80077ac:	080079e7 	.word	0x080079e7
 80077b0:	08007987 	.word	0x08007987
 80077b4:	080079b3 	.word	0x080079b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
      break;
 80077ce:	e112      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7c1b      	ldrb	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10d      	bne.n	80077f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f107 0208 	add.w	r2, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	2202      	movs	r2, #2
 80077f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077f2:	e100      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
      break;
 800780e:	e0f2      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b05      	cmp	r3, #5
 8007818:	f200 80ac 	bhi.w	8007974 <USBD_GetDescriptor+0x204>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <USBD_GetDescriptor+0xb4>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007871 	.word	0x08007871
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078d9 	.word	0x080078d9
 8007834:	0800790d 	.word	0x0800790d
 8007838:	08007941 	.word	0x08007941
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e091      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa97 	bl	8007d96 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e089      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e077      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa7d 	bl	8007d96 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e06f      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e05d      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa63 	bl	8007d96 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e055      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e043      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa49 	bl	8007d96 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e03b      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e029      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa2f 	bl	8007d96 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e021      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e00f      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa15 	bl	8007d96 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e007      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa0d 	bl	8007d96 <USBD_CtlError>
          err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007982:	e038      	b.n	80079f6 <USBD_GetDescriptor+0x286>
 8007984:	e037      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7c1b      	ldrb	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	f107 0208 	add.w	r2, r7, #8
 800799a:	4610      	mov	r0, r2
 800799c:	4798      	blx	r3
 800799e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a0:	e029      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f6 	bl	8007d96 <USBD_CtlError>
        err++;
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	3301      	adds	r3, #1
 80079ae:	72fb      	strb	r3, [r7, #11]
      break;
 80079b0:	e021      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7c1b      	ldrb	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f107 0208 	add.w	r2, r7, #8
 80079c6:	4610      	mov	r0, r2
 80079c8:	4798      	blx	r3
 80079ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	2207      	movs	r2, #7
 80079d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d4:	e00f      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9dc 	bl	8007d96 <USBD_CtlError>
        err++;
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	3301      	adds	r3, #1
 80079e2:	72fb      	strb	r3, [r7, #11]
      break;
 80079e4:	e007      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9d4 	bl	8007d96 <USBD_CtlError>
      err++;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	3301      	adds	r3, #1
 80079f2:	72fb      	strb	r3, [r7, #11]
      break;
 80079f4:	bf00      	nop
  }

  if (err != 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11c      	bne.n	8007a36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079fc:	893b      	ldrh	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88da      	ldrh	r2, [r3, #6]
 8007a0e:	893b      	ldrh	r3, [r7, #8]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bf28      	it	cs
 8007a14:	4613      	movcs	r3, r2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1a:	893b      	ldrh	r3, [r7, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa22 	bl	8007e6a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88db      	ldrh	r3, [r3, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa5b 	bl	8007eea <USBD_CtlSendStatus>
 8007a34:	e000      	b.n	8007a38 <USBD_GetDescriptor+0x2c8>
    return;
 8007a36:	bf00      	nop
    }
  }
}
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d130      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d12c      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a60:	d828      	bhi.n	8007ab4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d104      	bne.n	8007a82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f98b 	bl	8007d96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	e01d      	b.n	8007abe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fd5a 	bl	8008548 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa28 	bl	8007eea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa8:	e009      	b.n	8007abe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	e004      	b.n	8007abe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f96d 	bl	8007d96 <USBD_CtlError>
  }
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	4b41      	ldr	r3, [pc, #260]	; (8007be0 <USBD_SetConfig+0x118>)
 8007ada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007adc:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <USBD_SetConfig+0x118>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d904      	bls.n	8007aee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f955 	bl	8007d96 <USBD_CtlError>
 8007aec:	e075      	b.n	8007bda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d002      	beq.n	8007afe <USBD_SetConfig+0x36>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d023      	beq.n	8007b44 <USBD_SetConfig+0x7c>
 8007afc:	e062      	b.n	8007bc4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007afe:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01a      	beq.n	8007b3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b06:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2203      	movs	r2, #3
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b18:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f9e8 	bl	8006ef4 <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d104      	bne.n	8007b34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f932 	bl	8007d96 <USBD_CtlError>
            return;
 8007b32:	e052      	b.n	8007bda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9d8 	bl	8007eea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b3a:	e04e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9d4 	bl	8007eea <USBD_CtlSendStatus>
        break;
 8007b42:	e04a      	b.n	8007bda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b44:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d112      	bne.n	8007b72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b54:	4b22      	ldr	r3, [pc, #136]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f9e4 	bl	8006f32 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9bd 	bl	8007eea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b70:	e033      	b.n	8007bda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b72:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d01d      	beq.n	8007bbc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff f9d2 	bl	8006f32 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f9a8 	bl	8006ef4 <USBD_SetClassConfig>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d104      	bne.n	8007bb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8f2 	bl	8007d96 <USBD_CtlError>
            return;
 8007bb2:	e012      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f998 	bl	8007eea <USBD_CtlSendStatus>
        break;
 8007bba:	e00e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f994 	bl	8007eea <USBD_CtlSendStatus>
        break;
 8007bc2:	e00a      	b.n	8007bda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8e5 	bl	8007d96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <USBD_SetConfig+0x118>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f9ad 	bl	8006f32 <USBD_ClrClassConfig>
        break;
 8007bd8:	bf00      	nop
    }
  }
}
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000656 	.word	0x20000656

08007be4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d004      	beq.n	8007c00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8cc 	bl	8007d96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bfe:	e022      	b.n	8007c46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	dc02      	bgt.n	8007c10 <USBD_GetConfig+0x2c>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dc03      	bgt.n	8007c16 <USBD_GetConfig+0x32>
 8007c0e:	e015      	b.n	8007c3c <USBD_GetConfig+0x58>
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d00b      	beq.n	8007c2c <USBD_GetConfig+0x48>
 8007c14:	e012      	b.n	8007c3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	2201      	movs	r2, #1
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f920 	bl	8007e6a <USBD_CtlSendData>
        break;
 8007c2a:	e00c      	b.n	8007c46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	2201      	movs	r2, #1
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f918 	bl	8007e6a <USBD_CtlSendData>
        break;
 8007c3a:	e004      	b.n	8007c46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8a9 	bl	8007d96 <USBD_CtlError>
        break;
 8007c44:	bf00      	nop
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d81e      	bhi.n	8007ca2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	88db      	ldrh	r3, [r3, #6]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d004      	beq.n	8007c76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f891 	bl	8007d96 <USBD_CtlError>
        break;
 8007c74:	e01a      	b.n	8007cac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f043 0202 	orr.w	r2, r3, #2
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	330c      	adds	r3, #12
 8007c96:	2202      	movs	r2, #2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8e5 	bl	8007e6a <USBD_CtlSendData>
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f876 	bl	8007d96 <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
  }
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d106      	bne.n	8007cd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f90b 	bl	8007eea <USBD_CtlSendStatus>
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d80b      	bhi.n	8007d0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10c      	bne.n	8007d14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8f1 	bl	8007eea <USBD_CtlSendStatus>
      }
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f842 	bl	8007d96 <USBD_CtlError>
      break;
 8007d12:	e000      	b.n	8007d16 <USBD_ClrFeature+0x3a>
      break;
 8007d14:	bf00      	nop
  }
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785a      	ldrb	r2, [r3, #1]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3303      	adds	r3, #3
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3304      	adds	r3, #4
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3305      	adds	r3, #5
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4413      	add	r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	3306      	adds	r3, #6
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3307      	adds	r3, #7
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4413      	add	r3, r2
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	80da      	strh	r2, [r3, #6]

}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb66 	bl	8008474 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb62 	bl	8008474 <USBD_LL_StallEP>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d032      	beq.n	8007e34 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f834 	bl	8007e3c <USBD_GetLen>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	75fa      	strb	r2, [r7, #23]
 8007de8:	461a      	mov	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	75fa      	strb	r2, [r7, #23]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4413      	add	r3, r2
 8007e00:	2203      	movs	r2, #3
 8007e02:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e04:	e012      	b.n	8007e2c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	60fa      	str	r2, [r7, #12]
 8007e0c:	7dfa      	ldrb	r2, [r7, #23]
 8007e0e:	1c51      	adds	r1, r2, #1
 8007e10:	75f9      	strb	r1, [r7, #23]
 8007e12:	4611      	mov	r1, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	440a      	add	r2, r1
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	75fa      	strb	r2, [r7, #23]
 8007e22:	461a      	mov	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4413      	add	r3, r2
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e8      	bne.n	8007e06 <USBD_GetString+0x4e>
    }
  }
}
 8007e34:	bf00      	nop
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e48:	e005      	b.n	8007e56 <USBD_GetLen+0x1a>
  {
    len++;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3301      	adds	r3, #1
 8007e54:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f5      	bne.n	8007e4a <USBD_GetLen+0xe>
  }

  return len;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	4613      	mov	r3, r2
 8007e76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e86:	88fa      	ldrh	r2, [r7, #6]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fb77 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fb65 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fb76 	bl	80085cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007efa:	2300      	movs	r3, #0
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fb40 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f20:	2300      	movs	r3, #0
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fb50 	bl	80085cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	490e      	ldr	r1, [pc, #56]	; (8007f78 <MX_USB_DEVICE_Init+0x40>)
 8007f40:	480e      	ldr	r0, [pc, #56]	; (8007f7c <MX_USB_DEVICE_Init+0x44>)
 8007f42:	f7fe ff7d 	bl	8006e40 <USBD_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f4c:	f7f8 fac8 	bl	80004e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007f50:	490b      	ldr	r1, [pc, #44]	; (8007f80 <MX_USB_DEVICE_Init+0x48>)
 8007f52:	480a      	ldr	r0, [pc, #40]	; (8007f7c <MX_USB_DEVICE_Init+0x44>)
 8007f54:	f7fe ff9f 	bl	8006e96 <USBD_RegisterClass>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f5e:	f7f8 fabf 	bl	80004e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f62:	4806      	ldr	r0, [pc, #24]	; (8007f7c <MX_USB_DEVICE_Init+0x44>)
 8007f64:	f7fe ffb0 	bl	8006ec8 <USBD_Start>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007f6e:	f7f8 fab7 	bl	80004e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f72:	bf00      	nop
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200001c4 	.word	0x200001c4
 8007f7c:	200008f8 	.word	0x200008f8
 8007f80:	200000bc 	.word	0x200000bc

08007f84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2212      	movs	r2, #18
 8007f94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200001e0 	.word	0x200001e0

08007fa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	200001f4 	.word	0x200001f4

08007fcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d105      	bne.n	8007fea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	4907      	ldr	r1, [pc, #28]	; (8008000 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fe2:	4808      	ldr	r0, [pc, #32]	; (8008004 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fe4:	f7ff fee8 	bl	8007db8 <USBD_GetString>
 8007fe8:	e004      	b.n	8007ff4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4904      	ldr	r1, [pc, #16]	; (8008000 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fee:	4805      	ldr	r0, [pc, #20]	; (8008004 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ff0:	f7ff fee2 	bl	8007db8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff4:	4b02      	ldr	r3, [pc, #8]	; (8008000 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000bbc 	.word	0x20000bbc
 8008004:	08008770 	.word	0x08008770

08008008 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	4904      	ldr	r1, [pc, #16]	; (8008028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008018:	4804      	ldr	r0, [pc, #16]	; (800802c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800801a:	f7ff fecd 	bl	8007db8 <USBD_GetString>
  return USBD_StrDesc;
 800801e:	4b02      	ldr	r3, [pc, #8]	; (8008028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000bbc 	.word	0x20000bbc
 800802c:	0800877c 	.word	0x0800877c

08008030 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	221a      	movs	r2, #26
 8008040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008042:	f000 f843 	bl	80080cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008046:	4b02      	ldr	r3, [pc, #8]	; (8008050 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	200001f8 	.word	0x200001f8

08008054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4907      	ldr	r1, [pc, #28]	; (8008088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800806a:	4808      	ldr	r0, [pc, #32]	; (800808c <USBD_FS_ConfigStrDescriptor+0x38>)
 800806c:	f7ff fea4 	bl	8007db8 <USBD_GetString>
 8008070:	e004      	b.n	800807c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4904      	ldr	r1, [pc, #16]	; (8008088 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008076:	4805      	ldr	r0, [pc, #20]	; (800808c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008078:	f7ff fe9e 	bl	8007db8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000bbc 	.word	0x20000bbc
 800808c:	08008790 	.word	0x08008790

08008090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d105      	bne.n	80080ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	4907      	ldr	r1, [pc, #28]	; (80080c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080a6:	4808      	ldr	r0, [pc, #32]	; (80080c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080a8:	f7ff fe86 	bl	8007db8 <USBD_GetString>
 80080ac:	e004      	b.n	80080b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4904      	ldr	r1, [pc, #16]	; (80080c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080b2:	4805      	ldr	r0, [pc, #20]	; (80080c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080b4:	f7ff fe80 	bl	8007db8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000bbc 	.word	0x20000bbc
 80080c8:	0800879c 	.word	0x0800879c

080080cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080d2:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <Get_SerialNum+0x44>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <Get_SerialNum+0x48>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <Get_SerialNum+0x4c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4413      	add	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080f2:	2208      	movs	r2, #8
 80080f4:	4909      	ldr	r1, [pc, #36]	; (800811c <Get_SerialNum+0x50>)
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f814 	bl	8008124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080fc:	2204      	movs	r2, #4
 80080fe:	4908      	ldr	r1, [pc, #32]	; (8008120 <Get_SerialNum+0x54>)
 8008100:	68b8      	ldr	r0, [r7, #8]
 8008102:	f000 f80f 	bl	8008124 <IntToUnicode>
  }
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	1ffff7e8 	.word	0x1ffff7e8
 8008114:	1ffff7ec 	.word	0x1ffff7ec
 8008118:	1ffff7f0 	.word	0x1ffff7f0
 800811c:	200001fa 	.word	0x200001fa
 8008120:	2000020a 	.word	0x2000020a

08008124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]
 800813a:	e027      	b.n	800818c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0f1b      	lsrs	r3, r3, #28
 8008140:	2b09      	cmp	r3, #9
 8008142:	d80b      	bhi.n	800815c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	0f1b      	lsrs	r3, r3, #28
 8008148:	b2da      	uxtb	r2, r3
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	4619      	mov	r1, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	440b      	add	r3, r1
 8008154:	3230      	adds	r2, #48	; 0x30
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	e00a      	b.n	8008172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	b2da      	uxtb	r2, r3
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4619      	mov	r1, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	440b      	add	r3, r1
 800816c:	3237      	adds	r2, #55	; 0x37
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	3301      	adds	r3, #1
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	3301      	adds	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	7dfa      	ldrb	r2, [r7, #23]
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	429a      	cmp	r2, r3
 8008192:	d3d3      	bcc.n	800813c <IntToUnicode+0x18>
  }
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr

080081a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a0d      	ldr	r2, [pc, #52]	; (80081e4 <HAL_PCD_MspInit+0x44>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d113      	bne.n	80081da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_PCD_MspInit+0x48>)
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <HAL_PCD_MspInit+0x48>)
 80081b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081bc:	61d3      	str	r3, [r2, #28]
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_PCD_MspInit+0x48>)
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	2014      	movs	r0, #20
 80081d0:	f7f8 ff0d 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80081d4:	2014      	movs	r0, #20
 80081d6:	f7f8 ff26 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	40005c00 	.word	0x40005c00
 80081e8:	40021000 	.word	0x40021000

080081ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe fea8 	bl	8006f58 <USBD_LL_SetupStage>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	440b      	add	r3, r1
 8008230:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	4619      	mov	r1, r3
 800823a:	f7fe feda 	bl	8006ff2 <USBD_LL_DataOutStage>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	440b      	add	r3, r1
 8008266:	333c      	adds	r3, #60	; 0x3c
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe ff31 	bl	80070d4 <USBD_LL_DataInStage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff f841 	bl	8007310 <USBD_LL_SOF>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d001      	beq.n	80082ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082aa:	f7f8 f919 	bl	80004e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082b4:	7bfa      	ldrb	r2, [r7, #15]
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fff1 	bl	80072a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe ffaa 	bl	800721e <USBD_LL_Reset>
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe ffeb 	bl	80072be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <HAL_PCD_SuspendCallback+0x30>)
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	4a03      	ldr	r2, [pc, #12]	; (8008304 <HAL_PCD_SuspendCallback+0x30>)
 80082f6:	f043 0306 	orr.w	r3, r3, #6
 80082fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ffe5 	bl	80072e6 <USBD_LL_Resume>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800832c:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <USBD_LL_Init+0x88>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <USBD_LL_Init+0x88>)
 8008338:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <USBD_LL_Init+0x88>)
 800833e:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <USBD_LL_Init+0x8c>)
 8008340:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008342:	4b1a      	ldr	r3, [pc, #104]	; (80083ac <USBD_LL_Init+0x88>)
 8008344:	2208      	movs	r2, #8
 8008346:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008348:	4b18      	ldr	r3, [pc, #96]	; (80083ac <USBD_LL_Init+0x88>)
 800834a:	2202      	movs	r2, #2
 800834c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800834e:	4b17      	ldr	r3, [pc, #92]	; (80083ac <USBD_LL_Init+0x88>)
 8008350:	2200      	movs	r2, #0
 8008352:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008354:	4b15      	ldr	r3, [pc, #84]	; (80083ac <USBD_LL_Init+0x88>)
 8008356:	2200      	movs	r2, #0
 8008358:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800835a:	4b14      	ldr	r3, [pc, #80]	; (80083ac <USBD_LL_Init+0x88>)
 800835c:	2200      	movs	r2, #0
 800835e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008360:	4812      	ldr	r0, [pc, #72]	; (80083ac <USBD_LL_Init+0x88>)
 8008362:	f7f9 fca1 	bl	8001ca8 <HAL_PCD_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800836c:	f7f8 f8b8 	bl	80004e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008376:	2318      	movs	r3, #24
 8008378:	2200      	movs	r2, #0
 800837a:	2100      	movs	r1, #0
 800837c:	f7fb f8fe 	bl	800357c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008386:	2358      	movs	r3, #88	; 0x58
 8008388:	2200      	movs	r2, #0
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	f7fb f8f6 	bl	800357c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800839a:	2200      	movs	r2, #0
 800839c:	2181      	movs	r1, #129	; 0x81
 800839e:	f7fb f8ed 	bl	800357c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000dbc 	.word	0x20000dbc
 80083b0:	40005c00 	.word	0x40005c00

080083b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f9 fd77 	bl	8001ebe <HAL_PCD_Start>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 f93c 	bl	8008654 <USBD_Get_USB_Status>
 80083dc:	4603      	mov	r3, r0
 80083de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	461a      	mov	r2, r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	70fb      	strb	r3, [r7, #3]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70bb      	strb	r3, [r7, #2]
 8008400:	4613      	mov	r3, r2
 8008402:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008412:	78bb      	ldrb	r3, [r7, #2]
 8008414:	883a      	ldrh	r2, [r7, #0]
 8008416:	78f9      	ldrb	r1, [r7, #3]
 8008418:	f7f9 feef 	bl	80021fa <HAL_PCD_EP_Open>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f916 	bl	8008654 <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7f9 ff36 	bl	80022c6 <HAL_PCD_EP_Close>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f8f7 	bl	8008654 <USBD_Get_USB_Status>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846a:	7bbb      	ldrb	r3, [r7, #14]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7f9 ffdf 	bl	8002456 <HAL_PCD_EP_SetStall>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f8d8 	bl	8008654 <USBD_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fa f820 	bl	8002516 <HAL_PCD_EP_ClrStall>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f8b9 	bl	8008654 <USBD_Get_USB_Status>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008502:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	da0c      	bge.n	8008526 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	440b      	add	r3, r1
 8008520:	3302      	adds	r3, #2
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	e00b      	b.n	800853e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	440b      	add	r3, r1
 8008538:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800853c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7f9 fe22 	bl	80021b0 <HAL_PCD_SetAddress>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f86e 	bl	8008654 <USBD_Get_USB_Status>
 8008578:	4603      	mov	r3, r0
 800857a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800857c:	7bbb      	ldrb	r3, [r7, #14]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	461a      	mov	r2, r3
 8008592:	460b      	mov	r3, r1
 8008594:	72fb      	strb	r3, [r7, #11]
 8008596:	4613      	mov	r3, r2
 8008598:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	7af9      	ldrb	r1, [r7, #11]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	f7f9 ff0f 	bl	80023d0 <HAL_PCD_EP_Transmit>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f84b 	bl	8008654 <USBD_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
 80085dc:	4613      	mov	r3, r2
 80085de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085ee:	893b      	ldrh	r3, [r7, #8]
 80085f0:	7af9      	ldrb	r1, [r7, #11]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	f7f9 feaf 	bl	8002356 <HAL_PCD_EP_Receive>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f828 	bl	8008654 <USBD_Get_USB_Status>
 8008604:	4603      	mov	r3, r0
 8008606:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008608:	7dbb      	ldrb	r3, [r7, #22]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <USBD_static_malloc+0x14>)
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr
 8008628:	20000658 	.word	0x20000658

0800862c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr

08008654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d817      	bhi.n	8008698 <USBD_Get_USB_Status+0x44>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_Get_USB_Status+0x1c>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008681 	.word	0x08008681
 8008674:	08008687 	.word	0x08008687
 8008678:	0800868d 	.word	0x0800868d
 800867c:	08008693 	.word	0x08008693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
    break;
 8008684:	e00b      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008686:	2302      	movs	r3, #2
 8008688:	73fb      	strb	r3, [r7, #15]
    break;
 800868a:	e008      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
    break;
 8008690:	e005      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008692:	2302      	movs	r3, #2
 8008694:	73fb      	strb	r3, [r7, #15]
    break;
 8008696:	e002      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008698:	2302      	movs	r3, #2
 800869a:	73fb      	strb	r3, [r7, #15]
    break;
 800869c:	bf00      	nop
  }
  return usb_status;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	2600      	movs	r6, #0
 80086b0:	4d0c      	ldr	r5, [pc, #48]	; (80086e4 <__libc_init_array+0x38>)
 80086b2:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b4:	1b64      	subs	r4, r4, r5
 80086b6:	10a4      	asrs	r4, r4, #2
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	f000 f82a 	bl	8008714 <_init>
 80086c0:	2600      	movs	r6, #0
 80086c2:	4d0a      	ldr	r5, [pc, #40]	; (80086ec <__libc_init_array+0x40>)
 80086c4:	4c0a      	ldr	r4, [pc, #40]	; (80086f0 <__libc_init_array+0x44>)
 80086c6:	1b64      	subs	r4, r4, r5
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	080087c4 	.word	0x080087c4
 80086e8:	080087c4 	.word	0x080087c4
 80086ec:	080087c4 	.word	0x080087c4
 80086f0:	080087c8 	.word	0x080087c8

080086f4 <memset>:
 80086f4:	4603      	mov	r3, r0
 80086f6:	4402      	add	r2, r0
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d100      	bne.n	80086fe <memset+0xa>
 80086fc:	4770      	bx	lr
 80086fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008702:	e7f9      	b.n	80086f8 <memset+0x4>

08008704 <strcpy>:
 8008704:	4603      	mov	r3, r0
 8008706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800870a:	f803 2b01 	strb.w	r2, [r3], #1
 800870e:	2a00      	cmp	r2, #0
 8008710:	d1f9      	bne.n	8008706 <strcpy+0x2>
 8008712:	4770      	bx	lr

08008714 <_init>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	bf00      	nop
 8008718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871a:	bc08      	pop	{r3}
 800871c:	469e      	mov	lr, r3
 800871e:	4770      	bx	lr

08008720 <_fini>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr
